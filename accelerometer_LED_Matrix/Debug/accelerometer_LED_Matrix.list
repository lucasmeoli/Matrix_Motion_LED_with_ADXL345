
accelerometer_LED_Matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a44  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000a0  08003bf0  08003bf0  00013bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c90  08003c90  00020054  2**0
                  CONTENTS
  4 .ARM          00000008  08003c90  08003c90  00013c90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c98  08003c98  00020054  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c98  08003c98  00013c98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003c9c  08003c9c  00013c9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000054  20000000  08003ca0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020054  2**0
                  CONTENTS
 10 .bss          00000124  20000054  20000054  00020054  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000178  20000178  00020054  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020054  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020084  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000e099  00000000  00000000  000200c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000022f0  00000000  00000000  0002e160  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000ce0  00000000  00000000  00030450  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000a08  00000000  00000000  00031130  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002663d  00000000  00000000  00031b38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014054  00000000  00000000  00058175  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e4a1b  00000000  00000000  0006c1c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003424  00000000  00000000  00150be4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  00154008  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000054 	.word	0x20000054
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08003bd8 	.word	0x08003bd8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000058 	.word	0x20000058
 80001e8:	08003bd8 	.word	0x08003bd8

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <adlx345_init>:
static void write_register(uint8_t reg, uint8_t value);
static uint8_t read_register(uint8_t reg);


/* Public functions ---------------------------------------------------------*/
void adlx345_init() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0

	/* I2C configuration*/
	hi2c1.Instance 				= I2C1;
 80004ee:	4b35      	ldr	r3, [pc, #212]	; (80005c4 <adlx345_init+0xdc>)
 80004f0:	4a35      	ldr	r2, [pc, #212]	; (80005c8 <adlx345_init+0xe0>)
 80004f2:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed 		= 100000;
 80004f4:	4b33      	ldr	r3, [pc, #204]	; (80005c4 <adlx345_init+0xdc>)
 80004f6:	4a35      	ldr	r2, [pc, #212]	; (80005cc <adlx345_init+0xe4>)
 80004f8:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 80004fa:	4b32      	ldr	r3, [pc, #200]	; (80005c4 <adlx345_init+0xdc>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 		= 0;
 8000500:	4b30      	ldr	r3, [pc, #192]	; (80005c4 <adlx345_init+0xdc>)
 8000502:	2200      	movs	r2, #0
 8000504:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000506:	4b2f      	ldr	r3, [pc, #188]	; (80005c4 <adlx345_init+0xdc>)
 8000508:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800050c:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 800050e:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <adlx345_init+0xdc>)
 8000510:	2200      	movs	r2, #0
 8000512:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 		= 0;
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <adlx345_init+0xdc>)
 8000516:	2200      	movs	r2, #0
 8000518:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 800051a:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <adlx345_init+0xdc>)
 800051c:	2200      	movs	r2, #0
 800051e:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode 	= I2C_NOSTRETCH_DISABLE;
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <adlx345_init+0xdc>)
 8000522:	2200      	movs	r2, #0
 8000524:	621a      	str	r2, [r3, #32]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000526:	2300      	movs	r3, #0
 8000528:	60bb      	str	r3, [r7, #8]
 800052a:	4b29      	ldr	r3, [pc, #164]	; (80005d0 <adlx345_init+0xe8>)
 800052c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800052e:	4a28      	ldr	r2, [pc, #160]	; (80005d0 <adlx345_init+0xe8>)
 8000530:	f043 0302 	orr.w	r3, r3, #2
 8000534:	6313      	str	r3, [r2, #48]	; 0x30
 8000536:	4b26      	ldr	r3, [pc, #152]	; (80005d0 <adlx345_init+0xe8>)
 8000538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800053a:	f003 0302 	and.w	r3, r3, #2
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	68bb      	ldr	r3, [r7, #8]

	/* I2C GPIO configuration */
	GPIO_InitStruct.Pin 		= GPIO_PIN_8|GPIO_PIN_9;
 8000542:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000546:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 8000548:	2312      	movs	r3, #18
 800054a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 800054c:	2300      	movs	r3, #0
 800054e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8000550:	2300      	movs	r3, #0
 8000552:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate 	= GPIO_AF4_I2C1;
 8000554:	2304      	movs	r3, #4
 8000556:	61fb      	str	r3, [r7, #28]

	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000558:	f107 030c 	add.w	r3, r7, #12
 800055c:	4619      	mov	r1, r3
 800055e:	481d      	ldr	r0, [pc, #116]	; (80005d4 <adlx345_init+0xec>)
 8000560:	f000 fd3c 	bl	8000fdc <HAL_GPIO_Init>

	 /* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000564:	2300      	movs	r3, #0
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	4b19      	ldr	r3, [pc, #100]	; (80005d0 <adlx345_init+0xe8>)
 800056a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056c:	4a18      	ldr	r2, [pc, #96]	; (80005d0 <adlx345_init+0xe8>)
 800056e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000572:	6413      	str	r3, [r2, #64]	; 0x40
 8000574:	4b16      	ldr	r3, [pc, #88]	; (80005d0 <adlx345_init+0xe8>)
 8000576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000578:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800057c:	607b      	str	r3, [r7, #4]
 800057e:	687b      	ldr	r3, [r7, #4]

	if(HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8000580:	4810      	ldr	r0, [pc, #64]	; (80005c4 <adlx345_init+0xdc>)
 8000582:	f000 fef1 	bl	8001368 <HAL_I2C_Init>
 8000586:	4603      	mov	r3, r0
 8000588:	2b00      	cmp	r3, #0
 800058a:	d002      	beq.n	8000592 <adlx345_init+0xaa>
		uart_send_string("Error en la INICIALIZACION \n\r");
 800058c:	4812      	ldr	r0, [pc, #72]	; (80005d8 <adlx345_init+0xf0>)
 800058e:	f000 fabf 	bl	8000b10 <uart_send_string>
	}

	/* Chequeo que la direccion statica sea correcta */
	if (read_register(REG_DEVID) != 0xE5) {
 8000592:	2000      	movs	r0, #0
 8000594:	f000 f85e 	bl	8000654 <read_register>
 8000598:	4603      	mov	r3, r0
 800059a:	2be5      	cmp	r3, #229	; 0xe5
 800059c:	d002      	beq.n	80005a4 <adlx345_init+0xbc>
		uart_send_string("Error primer registro \n\r");
 800059e:	480f      	ldr	r0, [pc, #60]	; (80005dc <adlx345_init+0xf4>)
 80005a0:	f000 fab6 	bl	8000b10 <uart_send_string>
	}

	write_register(REG_BW_RATE, 0x08);
 80005a4:	2108      	movs	r1, #8
 80005a6:	202c      	movs	r0, #44	; 0x2c
 80005a8:	f000 f882 	bl	80006b0 <write_register>
	write_register(REG_DATA_FORMAT, 0x08);
 80005ac:	2108      	movs	r1, #8
 80005ae:	2031      	movs	r0, #49	; 0x31
 80005b0:	f000 f87e 	bl	80006b0 <write_register>
	write_register(REG_POWER_CTL, 0x08);
 80005b4:	2108      	movs	r1, #8
 80005b6:	202d      	movs	r0, #45	; 0x2d
 80005b8:	f000 f87a 	bl	80006b0 <write_register>
}
 80005bc:	bf00      	nop
 80005be:	3720      	adds	r7, #32
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd80      	pop	{r7, pc}
 80005c4:	20000070 	.word	0x20000070
 80005c8:	40005400 	.word	0x40005400
 80005cc:	000186a0 	.word	0x000186a0
 80005d0:	40023800 	.word	0x40023800
 80005d4:	40020400 	.word	0x40020400
 80005d8:	08003bf0 	.word	0x08003bf0
 80005dc:	08003c10 	.word	0x08003c10

080005e0 <read_coordinates>:
/**
 * @brief   Reads the coordinates from the ADXL345 accelerometer.
 * @param   None.
 * @retval  Coordinates structure containing X, Y, and Z coordinates.
 */
coordinates_t read_coordinates() {
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b088      	sub	sp, #32
 80005e4:	af02      	add	r7, sp, #8
 80005e6:	6078      	str	r0, [r7, #4]
	uint8_t reg_data_coord = REG_DATAX0;
 80005e8:	2332      	movs	r3, #50	; 0x32
 80005ea:	757b      	strb	r3, [r7, #21]
	coordinates_t coord;
	uint16_t coord_size = sizeof(coord)/ sizeof(uint8_t);
 80005ec:	2306      	movs	r3, #6
 80005ee:	82fb      	strh	r3, [r7, #22]

	if (HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, &reg_data_coord, sizeof(reg_data_coord), 1000) != HAL_OK) {
 80005f0:	f107 0215 	add.w	r2, r7, #21
 80005f4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80005f8:	9300      	str	r3, [sp, #0]
 80005fa:	2301      	movs	r3, #1
 80005fc:	21a6      	movs	r1, #166	; 0xa6
 80005fe:	4812      	ldr	r0, [pc, #72]	; (8000648 <read_coordinates+0x68>)
 8000600:	f001 f800 	bl	8001604 <HAL_I2C_Master_Transmit>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d002      	beq.n	8000610 <read_coordinates+0x30>
		uart_send_string("Error de que voy a leer\n\r");
 800060a:	4810      	ldr	r0, [pc, #64]	; (800064c <read_coordinates+0x6c>)
 800060c:	f000 fa80 	bl	8000b10 <uart_send_string>
	}

	if (HAL_I2C_Master_Receive(&hi2c1, ADXL345_ADDRESS<<1, (uint8_t *) &coord, coord_size, 10000) != HAL_OK) {
 8000610:	8afb      	ldrh	r3, [r7, #22]
 8000612:	f107 020c 	add.w	r2, r7, #12
 8000616:	f242 7110 	movw	r1, #10000	; 0x2710
 800061a:	9100      	str	r1, [sp, #0]
 800061c:	21a6      	movs	r1, #166	; 0xa6
 800061e:	480a      	ldr	r0, [pc, #40]	; (8000648 <read_coordinates+0x68>)
 8000620:	f001 f8ee 	bl	8001800 <HAL_I2C_Master_Receive>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d002      	beq.n	8000630 <read_coordinates+0x50>
		uart_send_string("Error al lleer todas las cosas juntas\n\r");
 800062a:	4809      	ldr	r0, [pc, #36]	; (8000650 <read_coordinates+0x70>)
 800062c:	f000 fa70 	bl	8000b10 <uart_send_string>
	}

	return coord;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	461a      	mov	r2, r3
 8000634:	f107 030c 	add.w	r3, r7, #12
 8000638:	6818      	ldr	r0, [r3, #0]
 800063a:	6010      	str	r0, [r2, #0]
 800063c:	889b      	ldrh	r3, [r3, #4]
 800063e:	8093      	strh	r3, [r2, #4]
}
 8000640:	6878      	ldr	r0, [r7, #4]
 8000642:	3718      	adds	r7, #24
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	20000070 	.word	0x20000070
 800064c:	08003c2c 	.word	0x08003c2c
 8000650:	08003c48 	.word	0x08003c48

08000654 <read_register>:
/**
 * @brief   Reads the value from the specified register of the ADXL345 accelerometer.
 * @param   reg: The register address to read from.
 * @retval  The value read from the specified register.
 */
static uint8_t read_register(uint8_t reg) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b086      	sub	sp, #24
 8000658:	af02      	add	r7, sp, #8
 800065a:	4603      	mov	r3, r0
 800065c:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	if (HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, &reg, sizeof(reg), 10000) != HAL_OK) {
 800065e:	1dfa      	adds	r2, r7, #7
 8000660:	f242 7310 	movw	r3, #10000	; 0x2710
 8000664:	9300      	str	r3, [sp, #0]
 8000666:	2301      	movs	r3, #1
 8000668:	21a6      	movs	r1, #166	; 0xa6
 800066a:	480f      	ldr	r0, [pc, #60]	; (80006a8 <read_register+0x54>)
 800066c:	f000 ffca 	bl	8001604 <HAL_I2C_Master_Transmit>
 8000670:	4603      	mov	r3, r0
 8000672:	2b00      	cmp	r3, #0
 8000674:	d002      	beq.n	800067c <read_register+0x28>
		uart_send_string(pmesg_error);
 8000676:	480d      	ldr	r0, [pc, #52]	; (80006ac <read_register+0x58>)
 8000678:	f000 fa4a 	bl	8000b10 <uart_send_string>
	}
	if (HAL_I2C_Master_Receive(&hi2c1, ADXL345_ADDRESS<<1, &value, sizeof(value), 10000) != HAL_OK) {
 800067c:	f107 020f 	add.w	r2, r7, #15
 8000680:	f242 7310 	movw	r3, #10000	; 0x2710
 8000684:	9300      	str	r3, [sp, #0]
 8000686:	2301      	movs	r3, #1
 8000688:	21a6      	movs	r1, #166	; 0xa6
 800068a:	4807      	ldr	r0, [pc, #28]	; (80006a8 <read_register+0x54>)
 800068c:	f001 f8b8 	bl	8001800 <HAL_I2C_Master_Receive>
 8000690:	4603      	mov	r3, r0
 8000692:	2b00      	cmp	r3, #0
 8000694:	d002      	beq.n	800069c <read_register+0x48>
		uart_send_string(pmesg_error);
 8000696:	4805      	ldr	r0, [pc, #20]	; (80006ac <read_register+0x58>)
 8000698:	f000 fa3a 	bl	8000b10 <uart_send_string>
	}

	return value;
 800069c:	7bfb      	ldrb	r3, [r7, #15]
}
 800069e:	4618      	mov	r0, r3
 80006a0:	3710      	adds	r7, #16
 80006a2:	46bd      	mov	sp, r7
 80006a4:	bd80      	pop	{r7, pc}
 80006a6:	bf00      	nop
 80006a8:	20000070 	.word	0x20000070
 80006ac:	20000000 	.word	0x20000000

080006b0 <write_register>:
 * @brief   Writes a value to the specified register of the ADXL345 accelerometer.
 * @param   reg: The register address to write to.
 * @param   value: The value to write to the register.
 * @retval  None.
 */
static void write_register(uint8_t reg, uint8_t value) {
 80006b0:	b580      	push	{r7, lr}
 80006b2:	b086      	sub	sp, #24
 80006b4:	af02      	add	r7, sp, #8
 80006b6:	4603      	mov	r3, r0
 80006b8:	460a      	mov	r2, r1
 80006ba:	71fb      	strb	r3, [r7, #7]
 80006bc:	4613      	mov	r3, r2
 80006be:	71bb      	strb	r3, [r7, #6]
	 uint8_t buf[] = {reg, value};
 80006c0:	79fb      	ldrb	r3, [r7, #7]
 80006c2:	733b      	strb	r3, [r7, #12]
 80006c4:	79bb      	ldrb	r3, [r7, #6]
 80006c6:	737b      	strb	r3, [r7, #13]
	 uint16_t size = sizeof(buf) / sizeof(uint8_t);
 80006c8:	2302      	movs	r3, #2
 80006ca:	81fb      	strh	r3, [r7, #14]

	if (HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, buf, size, 10000) != HAL_OK) {
 80006cc:	89fb      	ldrh	r3, [r7, #14]
 80006ce:	f107 020c 	add.w	r2, r7, #12
 80006d2:	f242 7110 	movw	r1, #10000	; 0x2710
 80006d6:	9100      	str	r1, [sp, #0]
 80006d8:	21a6      	movs	r1, #166	; 0xa6
 80006da:	4806      	ldr	r0, [pc, #24]	; (80006f4 <write_register+0x44>)
 80006dc:	f000 ff92 	bl	8001604 <HAL_I2C_Master_Transmit>
 80006e0:	4603      	mov	r3, r0
 80006e2:	2b00      	cmp	r3, #0
 80006e4:	d002      	beq.n	80006ec <write_register+0x3c>
		uart_send_string(pmesg_error);
 80006e6:	4804      	ldr	r0, [pc, #16]	; (80006f8 <write_register+0x48>)
 80006e8:	f000 fa12 	bl	8000b10 <uart_send_string>
	}
}
 80006ec:	bf00      	nop
 80006ee:	3710      	adds	r7, #16
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000070 	.word	0x20000070
 80006f8:	20000000 	.word	0x20000000

080006fc <coordinates_FSM_init>:
/* Private function prototypes -----------------------------------------------*/
static void FSM_error_handler(void);


/* Public functions ---------------------------------------------------------*/
void coordinates_FSM_init() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	current_state = CONFIGURE_MODULES;
 8000700:	4b0c      	ldr	r3, [pc, #48]	; (8000734 <coordinates_FSM_init+0x38>)
 8000702:	2200      	movs	r2, #0
 8000704:	701a      	strb	r2, [r3, #0]

	if(!uart_init()){
 8000706:	f000 f9d3 	bl	8000ab0 <uart_init>
 800070a:	4603      	mov	r3, r0
 800070c:	f083 0301 	eor.w	r3, r3, #1
 8000710:	b2db      	uxtb	r3, r3
 8000712:	2b00      	cmp	r3, #0
 8000714:	d001      	beq.n	800071a <coordinates_FSM_init+0x1e>
		FSM_error_handler();
 8000716:	f000 f8e9 	bl	80008ec <FSM_error_handler>
	}

	adlx345_init();
 800071a:	f7ff fee5 	bl	80004e8 <adlx345_init>

	HAL_Delay(500);
 800071e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000722:	f000 fb51 	bl	8000dc8 <HAL_Delay>

	max7219_SPI_init();
 8000726:	f000 f8eb 	bl	8000900 <max7219_SPI_init>

	positive = false;
 800072a:	4b03      	ldr	r3, [pc, #12]	; (8000738 <coordinates_FSM_init+0x3c>)
 800072c:	2200      	movs	r2, #0
 800072e:	701a      	strb	r2, [r3, #0]
}
 8000730:	bf00      	nop
 8000732:	bd80      	pop	{r7, pc}
 8000734:	200000c4 	.word	0x200000c4
 8000738:	200000ce 	.word	0x200000ce

0800073c <coordinates_FSM_update>:

void coordinates_FSM_update() {
 800073c:	b590      	push	{r4, r7, lr}
 800073e:	b085      	sub	sp, #20
 8000740:	af00      	add	r7, sp, #0
	switch (current_state) {
 8000742:	4b65      	ldr	r3, [pc, #404]	; (80008d8 <coordinates_FSM_update+0x19c>)
 8000744:	781b      	ldrb	r3, [r3, #0]
 8000746:	2b03      	cmp	r3, #3
 8000748:	f200 80bf 	bhi.w	80008ca <coordinates_FSM_update+0x18e>
 800074c:	a201      	add	r2, pc, #4	; (adr r2, 8000754 <coordinates_FSM_update+0x18>)
 800074e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000752:	bf00      	nop
 8000754:	08000765 	.word	0x08000765
 8000758:	080007c3 	.word	0x080007c3
 800075c:	080007e1 	.word	0x080007e1
 8000760:	08000863 	.word	0x08000863
		case CONFIGURE_MODULES:
			for (int8_t display = 0; display < 2; display++) {
 8000764:	2300      	movs	r3, #0
 8000766:	73fb      	strb	r3, [r7, #15]
 8000768:	e023      	b.n	80007b2 <coordinates_FSM_update+0x76>
				max7219_send_data(REG_SHUTDOWN,		0x00, display);
 800076a:	7bfb      	ldrb	r3, [r7, #15]
 800076c:	461a      	mov	r2, r3
 800076e:	2100      	movs	r1, #0
 8000770:	200c      	movs	r0, #12
 8000772:	f000 f909 	bl	8000988 <max7219_send_data>
				max7219_send_data(REG_DECODE_MODE,  0x00, display);
 8000776:	7bfb      	ldrb	r3, [r7, #15]
 8000778:	461a      	mov	r2, r3
 800077a:	2100      	movs	r1, #0
 800077c:	2009      	movs	r0, #9
 800077e:	f000 f903 	bl	8000988 <max7219_send_data>
				max7219_send_data(REG_INTENSITY, 	0x03, display);
 8000782:	7bfb      	ldrb	r3, [r7, #15]
 8000784:	461a      	mov	r2, r3
 8000786:	2103      	movs	r1, #3
 8000788:	200a      	movs	r0, #10
 800078a:	f000 f8fd 	bl	8000988 <max7219_send_data>
				max7219_send_data(REG_SCAN_LIMIT, 	0x07, display);
 800078e:	7bfb      	ldrb	r3, [r7, #15]
 8000790:	461a      	mov	r2, r3
 8000792:	2107      	movs	r1, #7
 8000794:	200b      	movs	r0, #11
 8000796:	f000 f8f7 	bl	8000988 <max7219_send_data>
				max7219_send_data(REG_SHUTDOWN,		0x01, display);
 800079a:	7bfb      	ldrb	r3, [r7, #15]
 800079c:	461a      	mov	r2, r3
 800079e:	2101      	movs	r1, #1
 80007a0:	200c      	movs	r0, #12
 80007a2:	f000 f8f1 	bl	8000988 <max7219_send_data>
			for (int8_t display = 0; display < 2; display++) {
 80007a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007aa:	b2db      	uxtb	r3, r3
 80007ac:	3301      	adds	r3, #1
 80007ae:	b2db      	uxtb	r3, r3
 80007b0:	73fb      	strb	r3, [r7, #15]
 80007b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80007b6:	2b01      	cmp	r3, #1
 80007b8:	ddd7      	ble.n	800076a <coordinates_FSM_update+0x2e>
			}


			current_state = READ_COORDINATES;
 80007ba:	4b47      	ldr	r3, [pc, #284]	; (80008d8 <coordinates_FSM_update+0x19c>)
 80007bc:	2201      	movs	r2, #1
 80007be:	701a      	strb	r2, [r3, #0]


			break;
 80007c0:	e086      	b.n	80008d0 <coordinates_FSM_update+0x194>

		case READ_COORDINATES:
			coordinates = read_coordinates();
 80007c2:	4c46      	ldr	r4, [pc, #280]	; (80008dc <coordinates_FSM_update+0x1a0>)
 80007c4:	463b      	mov	r3, r7
 80007c6:	4618      	mov	r0, r3
 80007c8:	f7ff ff0a 	bl	80005e0 <read_coordinates>
 80007cc:	4622      	mov	r2, r4
 80007ce:	463b      	mov	r3, r7
 80007d0:	6818      	ldr	r0, [r3, #0]
 80007d2:	6010      	str	r0, [r2, #0]
 80007d4:	889b      	ldrh	r3, [r3, #4]
 80007d6:	8093      	strh	r3, [r2, #4]

			current_state = DECODE_COORDINATES;
 80007d8:	4b3f      	ldr	r3, [pc, #252]	; (80008d8 <coordinates_FSM_update+0x19c>)
 80007da:	2202      	movs	r2, #2
 80007dc:	701a      	strb	r2, [r3, #0]
			break;
 80007de:	e077      	b.n	80008d0 <coordinates_FSM_update+0x194>

		case DECODE_COORDINATES:

		    if (coordinates.y_coord >= -255 && coordinates.y_coord <= 255) {
 80007e0:	4b3e      	ldr	r3, [pc, #248]	; (80008dc <coordinates_FSM_update+0x1a0>)
 80007e2:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007e6:	f113 0fff 	cmn.w	r3, #255	; 0xff
 80007ea:	db19      	blt.n	8000820 <coordinates_FSM_update+0xe4>
 80007ec:	4b3b      	ldr	r3, [pc, #236]	; (80008dc <coordinates_FSM_update+0x1a0>)
 80007ee:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007f2:	2bff      	cmp	r3, #255	; 0xff
 80007f4:	dc14      	bgt.n	8000820 <coordinates_FSM_update+0xe4>
		        indice = (coordinates.y_coord + 255) / 64; // Calcula el índice del bit activado
 80007f6:	4b39      	ldr	r3, [pc, #228]	; (80008dc <coordinates_FSM_update+0x1a0>)
 80007f8:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007fc:	33ff      	adds	r3, #255	; 0xff
 80007fe:	2b00      	cmp	r3, #0
 8000800:	da00      	bge.n	8000804 <coordinates_FSM_update+0xc8>
 8000802:	333f      	adds	r3, #63	; 0x3f
 8000804:	119b      	asrs	r3, r3, #6
 8000806:	461a      	mov	r2, r3
 8000808:	4b35      	ldr	r3, [pc, #212]	; (80008e0 <coordinates_FSM_update+0x1a4>)
 800080a:	601a      	str	r2, [r3, #0]
		        coordenada_y = 1 << (7 - indice); // Enciende el bit correspondiente
 800080c:	4b34      	ldr	r3, [pc, #208]	; (80008e0 <coordinates_FSM_update+0x1a4>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	f1c3 0307 	rsb	r3, r3, #7
 8000814:	2201      	movs	r2, #1
 8000816:	fa02 f303 	lsl.w	r3, r2, r3
 800081a:	b2da      	uxtb	r2, r3
 800081c:	4b31      	ldr	r3, [pc, #196]	; (80008e4 <coordinates_FSM_update+0x1a8>)
 800081e:	701a      	strb	r2, [r3, #0]
		    }

		    if (coordinates.x_coord  >= -255 && coordinates.x_coord  <= 255) {
 8000820:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <coordinates_FSM_update+0x1a0>)
 8000822:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000826:	f113 0fff 	cmn.w	r3, #255	; 0xff
 800082a:	db16      	blt.n	800085a <coordinates_FSM_update+0x11e>
 800082c:	4b2b      	ldr	r3, [pc, #172]	; (80008dc <coordinates_FSM_update+0x1a0>)
 800082e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000832:	2bff      	cmp	r3, #255	; 0xff
 8000834:	dc11      	bgt.n	800085a <coordinates_FSM_update+0x11e>
		        indice = (coordinates.x_coord  + 255) / 64; // Calcula el índice del valor asignado
 8000836:	4b29      	ldr	r3, [pc, #164]	; (80008dc <coordinates_FSM_update+0x1a0>)
 8000838:	f9b3 3000 	ldrsh.w	r3, [r3]
 800083c:	33ff      	adds	r3, #255	; 0xff
 800083e:	2b00      	cmp	r3, #0
 8000840:	da00      	bge.n	8000844 <coordinates_FSM_update+0x108>
 8000842:	333f      	adds	r3, #63	; 0x3f
 8000844:	119b      	asrs	r3, r3, #6
 8000846:	461a      	mov	r2, r3
 8000848:	4b25      	ldr	r3, [pc, #148]	; (80008e0 <coordinates_FSM_update+0x1a4>)
 800084a:	601a      	str	r2, [r3, #0]
		        coordenada_x = indice + 1; // Asigna el valor correspondiente
 800084c:	4b24      	ldr	r3, [pc, #144]	; (80008e0 <coordinates_FSM_update+0x1a4>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	b2db      	uxtb	r3, r3
 8000852:	3301      	adds	r3, #1
 8000854:	b2da      	uxtb	r2, r3
 8000856:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <coordinates_FSM_update+0x1ac>)
 8000858:	701a      	strb	r2, [r3, #0]
//				positive = false;
//			} else {
//				positive = true;
//			}

			current_state = DISPLAY_COORDINATES;
 800085a:	4b1f      	ldr	r3, [pc, #124]	; (80008d8 <coordinates_FSM_update+0x19c>)
 800085c:	2203      	movs	r2, #3
 800085e:	701a      	strb	r2, [r3, #0]
			break;
 8000860:	e036      	b.n	80008d0 <coordinates_FSM_update+0x194>

		case DISPLAY_COORDINATES:
			max7219_send_data(REG_DIGIT_0, 0x00, 0);
 8000862:	2200      	movs	r2, #0
 8000864:	2100      	movs	r1, #0
 8000866:	2001      	movs	r0, #1
 8000868:	f000 f88e 	bl	8000988 <max7219_send_data>
			max7219_send_data(REG_DIGIT_1, 0x00, 0);
 800086c:	2200      	movs	r2, #0
 800086e:	2100      	movs	r1, #0
 8000870:	2002      	movs	r0, #2
 8000872:	f000 f889 	bl	8000988 <max7219_send_data>
			max7219_send_data(REG_DIGIT_2, 0x00, 0);
 8000876:	2200      	movs	r2, #0
 8000878:	2100      	movs	r1, #0
 800087a:	2003      	movs	r0, #3
 800087c:	f000 f884 	bl	8000988 <max7219_send_data>
			max7219_send_data(REG_DIGIT_3, 0x00, 0);
 8000880:	2200      	movs	r2, #0
 8000882:	2100      	movs	r1, #0
 8000884:	2004      	movs	r0, #4
 8000886:	f000 f87f 	bl	8000988 <max7219_send_data>
			max7219_send_data(REG_DIGIT_4, 0x00, 0);
 800088a:	2200      	movs	r2, #0
 800088c:	2100      	movs	r1, #0
 800088e:	2005      	movs	r0, #5
 8000890:	f000 f87a 	bl	8000988 <max7219_send_data>
			max7219_send_data(REG_DIGIT_5, 0x00, 0);
 8000894:	2200      	movs	r2, #0
 8000896:	2100      	movs	r1, #0
 8000898:	2006      	movs	r0, #6
 800089a:	f000 f875 	bl	8000988 <max7219_send_data>
			max7219_send_data(REG_DIGIT_6, 0x00, 0);
 800089e:	2200      	movs	r2, #0
 80008a0:	2100      	movs	r1, #0
 80008a2:	2007      	movs	r0, #7
 80008a4:	f000 f870 	bl	8000988 <max7219_send_data>
			max7219_send_data(REG_DIGIT_7, 0x00, 0);
 80008a8:	2200      	movs	r2, #0
 80008aa:	2100      	movs	r1, #0
 80008ac:	2008      	movs	r0, #8
 80008ae:	f000 f86b 	bl	8000988 <max7219_send_data>



			max7219_send_data(coordenada_x, coordenada_y, 0);
 80008b2:	4b0d      	ldr	r3, [pc, #52]	; (80008e8 <coordinates_FSM_update+0x1ac>)
 80008b4:	781b      	ldrb	r3, [r3, #0]
 80008b6:	4a0b      	ldr	r2, [pc, #44]	; (80008e4 <coordinates_FSM_update+0x1a8>)
 80008b8:	7811      	ldrb	r1, [r2, #0]
 80008ba:	2200      	movs	r2, #0
 80008bc:	4618      	mov	r0, r3
 80008be:	f000 f863 	bl	8000988 <max7219_send_data>
////				max7219_send_data(REG_DIGIT_6, 0xFF, 0);
////				max7219_send_data(REG_DIGIT_7, 0xFF, 0);
//
//			}

			current_state = READ_COORDINATES;
 80008c2:	4b05      	ldr	r3, [pc, #20]	; (80008d8 <coordinates_FSM_update+0x19c>)
 80008c4:	2201      	movs	r2, #1
 80008c6:	701a      	strb	r2, [r3, #0]
			break;
 80008c8:	e002      	b.n	80008d0 <coordinates_FSM_update+0x194>

		default:
			FSM_error_handler();
 80008ca:	f000 f80f 	bl	80008ec <FSM_error_handler>
			break;
 80008ce:	bf00      	nop
	}
}
 80008d0:	bf00      	nop
 80008d2:	3714      	adds	r7, #20
 80008d4:	46bd      	mov	sp, r7
 80008d6:	bd90      	pop	{r4, r7, pc}
 80008d8:	200000c4 	.word	0x200000c4
 80008dc:	200000c8 	.word	0x200000c8
 80008e0:	200000d4 	.word	0x200000d4
 80008e4:	200000cf 	.word	0x200000cf
 80008e8:	200000d0 	.word	0x200000d0

080008ec <FSM_error_handler>:
 * @brief  This function is executed in case of error occurrence.
 *
 * @param  None
 * @retval None
 */
static void FSM_error_handler(void) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_Init(LED2);
 80008f0:	2001      	movs	r0, #1
 80008f2:	f000 f92f 	bl	8000b54 <BSP_LED_Init>
	BSP_LED_On(LED2);
 80008f6:	2001      	movs	r0, #1
 80008f8:	f000 f97c 	bl	8000bf4 <BSP_LED_On>
	while (1)
 80008fc:	e7fe      	b.n	80008fc <FSM_error_handler+0x10>
	...

08000900 <max7219_SPI_init>:

void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi);
/* Public functions ---------------------------------------------------------*/


void max7219_SPI_init() {
 8000900:	b580      	push	{r7, lr}
 8000902:	af00      	add	r7, sp, #0

	if(HAL_SPI_GetState(&hspi1) == HAL_SPI_STATE_RESET) {
 8000904:	481d      	ldr	r0, [pc, #116]	; (800097c <max7219_SPI_init+0x7c>)
 8000906:	f002 fc00 	bl	800310a <HAL_SPI_GetState>
 800090a:	4603      	mov	r3, r0
 800090c:	2b00      	cmp	r3, #0
 800090e:	d132      	bne.n	8000976 <max7219_SPI_init+0x76>
		/* SPI configuration*/
		hspi1.Instance 					= SPI1;
 8000910:	4b1a      	ldr	r3, [pc, #104]	; (800097c <max7219_SPI_init+0x7c>)
 8000912:	4a1b      	ldr	r2, [pc, #108]	; (8000980 <max7219_SPI_init+0x80>)
 8000914:	601a      	str	r2, [r3, #0]
		hspi1.Init.Mode 				= SPI_MODE_MASTER;
 8000916:	4b19      	ldr	r3, [pc, #100]	; (800097c <max7219_SPI_init+0x7c>)
 8000918:	f44f 7282 	mov.w	r2, #260	; 0x104
 800091c:	605a      	str	r2, [r3, #4]
		hspi1.Init.Direction			= SPI_DIRECTION_1LINE;
 800091e:	4b17      	ldr	r3, [pc, #92]	; (800097c <max7219_SPI_init+0x7c>)
 8000920:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000924:	609a      	str	r2, [r3, #8]
		hspi1.Init.DataSize				= SPI_DATASIZE_16BIT;
 8000926:	4b15      	ldr	r3, [pc, #84]	; (800097c <max7219_SPI_init+0x7c>)
 8000928:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800092c:	60da      	str	r2, [r3, #12]
		hspi1.Init.CLKPolarity			= SPI_POLARITY_LOW;
 800092e:	4b13      	ldr	r3, [pc, #76]	; (800097c <max7219_SPI_init+0x7c>)
 8000930:	2200      	movs	r2, #0
 8000932:	611a      	str	r2, [r3, #16]
		hspi1.Init.CLKPhase				= SPI_PHASE_1EDGE;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <max7219_SPI_init+0x7c>)
 8000936:	2200      	movs	r2, #0
 8000938:	615a      	str	r2, [r3, #20]
		hspi1.Init.NSS 					= SPI_NSS_SOFT;
 800093a:	4b10      	ldr	r3, [pc, #64]	; (800097c <max7219_SPI_init+0x7c>)
 800093c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000940:	619a      	str	r2, [r3, #24]
		hspi1.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_128;
 8000942:	4b0e      	ldr	r3, [pc, #56]	; (800097c <max7219_SPI_init+0x7c>)
 8000944:	2230      	movs	r2, #48	; 0x30
 8000946:	61da      	str	r2, [r3, #28]
		hspi1.Init.FirstBit				= SPI_FIRSTBIT_MSB;
 8000948:	4b0c      	ldr	r3, [pc, #48]	; (800097c <max7219_SPI_init+0x7c>)
 800094a:	2200      	movs	r2, #0
 800094c:	621a      	str	r2, [r3, #32]
		hspi1.Init.TIMode				= SPI_TIMODE_DISABLE;
 800094e:	4b0b      	ldr	r3, [pc, #44]	; (800097c <max7219_SPI_init+0x7c>)
 8000950:	2200      	movs	r2, #0
 8000952:	625a      	str	r2, [r3, #36]	; 0x24
		hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <max7219_SPI_init+0x7c>)
 8000956:	2200      	movs	r2, #0
 8000958:	629a      	str	r2, [r3, #40]	; 0x28
		hspi1.Init.CRCPolynomial 		= 10;
 800095a:	4b08      	ldr	r3, [pc, #32]	; (800097c <max7219_SPI_init+0x7c>)
 800095c:	220a      	movs	r2, #10
 800095e:	62da      	str	r2, [r3, #44]	; 0x2c

		HAL_SPI_MspInit(&hspi1);
 8000960:	4806      	ldr	r0, [pc, #24]	; (800097c <max7219_SPI_init+0x7c>)
 8000962:	f000 f851 	bl	8000a08 <HAL_SPI_MspInit>
		HAL_SPI_Init(&hspi1);
 8000966:	4805      	ldr	r0, [pc, #20]	; (800097c <max7219_SPI_init+0x7c>)
 8000968:	f002 f9e0 	bl	8002d2c <HAL_SPI_Init>

		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800096c:	2201      	movs	r2, #1
 800096e:	2110      	movs	r1, #16
 8000970:	4804      	ldr	r0, [pc, #16]	; (8000984 <max7219_SPI_init+0x84>)
 8000972:	f000 fcdf 	bl	8001334 <HAL_GPIO_WritePin>

	}
}
 8000976:	bf00      	nop
 8000978:	bd80      	pop	{r7, pc}
 800097a:	bf00      	nop
 800097c:	200000d8 	.word	0x200000d8
 8000980:	40013000 	.word	0x40013000
 8000984:	40020000 	.word	0x40020000

08000988 <max7219_send_data>:


void max7219_send_data(uint8_t reg, uint8_t data, uint8_t display_num) {
 8000988:	b580      	push	{r7, lr}
 800098a:	b084      	sub	sp, #16
 800098c:	af00      	add	r7, sp, #0
 800098e:	4603      	mov	r3, r0
 8000990:	71fb      	strb	r3, [r7, #7]
 8000992:	460b      	mov	r3, r1
 8000994:	71bb      	strb	r3, [r7, #6]
 8000996:	4613      	mov	r3, r2
 8000998:	717b      	strb	r3, [r7, #5]
	uint16_t no_op = 0x0000;
 800099a:	2300      	movs	r3, #0
 800099c:	81bb      	strh	r3, [r7, #12]
	uint16_t buf = reg<<8 | data;
 800099e:	79fb      	ldrb	r3, [r7, #7]
 80009a0:	021b      	lsls	r3, r3, #8
 80009a2:	b21a      	sxth	r2, r3
 80009a4:	79bb      	ldrb	r3, [r7, #6]
 80009a6:	b21b      	sxth	r3, r3
 80009a8:	4313      	orrs	r3, r2
 80009aa:	b21b      	sxth	r3, r3
 80009ac:	b29b      	uxth	r3, r3
 80009ae:	817b      	strh	r3, [r7, #10]


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // select slave
 80009b0:	2200      	movs	r2, #0
 80009b2:	2110      	movs	r1, #16
 80009b4:	4812      	ldr	r0, [pc, #72]	; (8000a00 <max7219_send_data+0x78>)
 80009b6:	f000 fcbd 	bl	8001334 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&buf, 1, 1000);
 80009ba:	f107 010a 	add.w	r1, r7, #10
 80009be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009c2:	2201      	movs	r2, #1
 80009c4:	480f      	ldr	r0, [pc, #60]	; (8000a04 <max7219_send_data+0x7c>)
 80009c6:	f002 fa42 	bl	8002e4e <HAL_SPI_Transmit>

	for (uint8_t i = 0; i < display_num; i++) {
 80009ca:	2300      	movs	r3, #0
 80009cc:	73fb      	strb	r3, [r7, #15]
 80009ce:	e00a      	b.n	80009e6 <max7219_send_data+0x5e>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&no_op, 1, 1000);
 80009d0:	f107 010c 	add.w	r1, r7, #12
 80009d4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80009d8:	2201      	movs	r2, #1
 80009da:	480a      	ldr	r0, [pc, #40]	; (8000a04 <max7219_send_data+0x7c>)
 80009dc:	f002 fa37 	bl	8002e4e <HAL_SPI_Transmit>
	for (uint8_t i = 0; i < display_num; i++) {
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	3301      	adds	r3, #1
 80009e4:	73fb      	strb	r3, [r7, #15]
 80009e6:	7bfa      	ldrb	r2, [r7, #15]
 80009e8:	797b      	ldrb	r3, [r7, #5]
 80009ea:	429a      	cmp	r2, r3
 80009ec:	d3f0      	bcc.n	80009d0 <max7219_send_data+0x48>
	}



	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80009ee:	2201      	movs	r2, #1
 80009f0:	2110      	movs	r1, #16
 80009f2:	4803      	ldr	r0, [pc, #12]	; (8000a00 <max7219_send_data+0x78>)
 80009f4:	f000 fc9e 	bl	8001334 <HAL_GPIO_WritePin>
}
 80009f8:	bf00      	nop
 80009fa:	3710      	adds	r7, #16
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	40020000 	.word	0x40020000
 8000a04:	200000d8 	.word	0x200000d8

08000a08 <HAL_SPI_MspInit>:


/* Private functions ---------------------------------------------------------*/

void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b08a      	sub	sp, #40	; 0x28
 8000a0c:	af00      	add	r7, sp, #0
 8000a0e:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;

  	/*** Configure the GPIOs ***/
  	/* Enable GPIO clock */
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000a10:	2300      	movs	r3, #0
 8000a12:	613b      	str	r3, [r7, #16]
 8000a14:	4b24      	ldr	r3, [pc, #144]	; (8000aa8 <HAL_SPI_MspInit+0xa0>)
 8000a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a18:	4a23      	ldr	r2, [pc, #140]	; (8000aa8 <HAL_SPI_MspInit+0xa0>)
 8000a1a:	f043 0301 	orr.w	r3, r3, #1
 8000a1e:	6313      	str	r3, [r2, #48]	; 0x30
 8000a20:	4b21      	ldr	r3, [pc, #132]	; (8000aa8 <HAL_SPI_MspInit+0xa0>)
 8000a22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a24:	f003 0301 	and.w	r3, r3, #1
 8000a28:	613b      	str	r3, [r7, #16]
 8000a2a:	693b      	ldr	r3, [r7, #16]

	/* Configure SPI SCK */
	GPIO_InitStruct.Pin 		= GPIO_PIN_5;
 8000a2c:	2320      	movs	r3, #32
 8000a2e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull  		= GPIO_PULLDOWN;
 8000a34:	2302      	movs	r3, #2
 8000a36:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 8000a3c:	2305      	movs	r3, #5
 8000a3e:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a40:	f107 0314 	add.w	r3, r7, #20
 8000a44:	4619      	mov	r1, r3
 8000a46:	4819      	ldr	r0, [pc, #100]	; (8000aac <HAL_SPI_MspInit+0xa4>)
 8000a48:	f000 fac8 	bl	8000fdc <HAL_GPIO_Init>

	/* Configure SPI MOSI */
	GPIO_InitStruct.Pin 		= GPIO_PIN_7;
 8000a4c:	2380      	movs	r3, #128	; 0x80
 8000a4e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8000a50:	2302      	movs	r3, #2
 8000a52:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_HIGH;
 8000a54:	2303      	movs	r3, #3
 8000a56:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 8000a58:	2305      	movs	r3, #5
 8000a5a:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a5c:	f107 0314 	add.w	r3, r7, #20
 8000a60:	4619      	mov	r1, r3
 8000a62:	4812      	ldr	r0, [pc, #72]	; (8000aac <HAL_SPI_MspInit+0xa4>)
 8000a64:	f000 faba 	bl	8000fdc <HAL_GPIO_Init>


	/*Configure SPI CS */
	GPIO_InitStruct.Pin 		= GPIO_PIN_4;
 8000a68:	2310      	movs	r3, #16
 8000a6a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000a6c:	2301      	movs	r3, #1
 8000a6e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 		= GPIO_PULLUP;
 8000a70:	2301      	movs	r3, #1
 8000a72:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8000a74:	2300      	movs	r3, #0
 8000a76:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	4619      	mov	r1, r3
 8000a7e:	480b      	ldr	r0, [pc, #44]	; (8000aac <HAL_SPI_MspInit+0xa4>)
 8000a80:	f000 faac 	bl	8000fdc <HAL_GPIO_Init>

	/*** Configure the SPI peripheral ***/
	/* Enable SPI clock */
	/* Peripheral clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000a84:	2300      	movs	r3, #0
 8000a86:	60fb      	str	r3, [r7, #12]
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <HAL_SPI_MspInit+0xa0>)
 8000a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8c:	4a06      	ldr	r2, [pc, #24]	; (8000aa8 <HAL_SPI_MspInit+0xa0>)
 8000a8e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000a92:	6453      	str	r3, [r2, #68]	; 0x44
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <HAL_SPI_MspInit+0xa0>)
 8000a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a98:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000a9c:	60fb      	str	r3, [r7, #12]
 8000a9e:	68fb      	ldr	r3, [r7, #12]
}
 8000aa0:	bf00      	nop
 8000aa2:	3728      	adds	r7, #40	; 0x28
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	bd80      	pop	{r7, pc}
 8000aa8:	40023800 	.word	0x40023800
 8000aac:	40020000 	.word	0x40020000

08000ab0 <uart_init>:

static UART_HandleTypeDef UartHandle;
static uint8_t msg_uart_init[] = MSG_UART_INIT;


bool_t uart_init() {
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	af00      	add	r7, sp, #0

	  UartHandle.Instance        	= USARTx;
 8000ab4:	4b13      	ldr	r3, [pc, #76]	; (8000b04 <uart_init+0x54>)
 8000ab6:	4a14      	ldr	r2, [pc, #80]	; (8000b08 <uart_init+0x58>)
 8000ab8:	601a      	str	r2, [r3, #0]
	  UartHandle.Init.BaudRate   	= BAUDRATE;
 8000aba:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <uart_init+0x54>)
 8000abc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ac0:	605a      	str	r2, [r3, #4]
	  UartHandle.Init.WordLength	= UART_WORDLENGTH_8B;
 8000ac2:	4b10      	ldr	r3, [pc, #64]	; (8000b04 <uart_init+0x54>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	609a      	str	r2, [r3, #8]
	  UartHandle.Init.StopBits   	= UART_STOPBITS_1;
 8000ac8:	4b0e      	ldr	r3, [pc, #56]	; (8000b04 <uart_init+0x54>)
 8000aca:	2200      	movs	r2, #0
 8000acc:	60da      	str	r2, [r3, #12]
	  UartHandle.Init.Parity     	= UART_PARITY_NONE;
 8000ace:	4b0d      	ldr	r3, [pc, #52]	; (8000b04 <uart_init+0x54>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	611a      	str	r2, [r3, #16]
	  UartHandle.Init.HwFlowCtl  	= UART_HWCONTROL_NONE;
 8000ad4:	4b0b      	ldr	r3, [pc, #44]	; (8000b04 <uart_init+0x54>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	619a      	str	r2, [r3, #24]
	  UartHandle.Init.Mode       	= UART_MODE_TX_RX;
 8000ada:	4b0a      	ldr	r3, [pc, #40]	; (8000b04 <uart_init+0x54>)
 8000adc:	220c      	movs	r2, #12
 8000ade:	615a      	str	r2, [r3, #20]
	  UartHandle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8000ae0:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <uart_init+0x54>)
 8000ae2:	2200      	movs	r2, #0
 8000ae4:	61da      	str	r2, [r3, #28]


	  if (HAL_UART_Init(&UartHandle) != HAL_OK) {
 8000ae6:	4807      	ldr	r0, [pc, #28]	; (8000b04 <uart_init+0x54>)
 8000ae8:	f002 fbe8 	bl	80032bc <HAL_UART_Init>
 8000aec:	4603      	mov	r3, r0
 8000aee:	2b00      	cmp	r3, #0
 8000af0:	d001      	beq.n	8000af6 <uart_init+0x46>
		  return false;
 8000af2:	2300      	movs	r3, #0
 8000af4:	e003      	b.n	8000afe <uart_init+0x4e>
	  }

	  uart_send_string(msg_uart_init);
 8000af6:	4805      	ldr	r0, [pc, #20]	; (8000b0c <uart_init+0x5c>)
 8000af8:	f000 f80a 	bl	8000b10 <uart_send_string>

	  return true;
 8000afc:	2301      	movs	r3, #1
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	bd80      	pop	{r7, pc}
 8000b02:	bf00      	nop
 8000b04:	20000130 	.word	0x20000130
 8000b08:	40004800 	.word	0x40004800
 8000b0c:	20000010 	.word	0x20000010

08000b10 <uart_send_string>:


void uart_send_string(uint8_t * pstring) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	uint32_t size = 0;
 8000b18:	2300      	movs	r3, #0
 8000b1a:	60fb      	str	r3, [r7, #12]

	if(pstring == NULL) {
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d012      	beq.n	8000b48 <uart_send_string+0x38>
		return;
	}

	for(; pstring[size] != '\0'; size++ );
 8000b22:	e002      	b.n	8000b2a <uart_send_string+0x1a>
 8000b24:	68fb      	ldr	r3, [r7, #12]
 8000b26:	3301      	adds	r3, #1
 8000b28:	60fb      	str	r3, [r7, #12]
 8000b2a:	687a      	ldr	r2, [r7, #4]
 8000b2c:	68fb      	ldr	r3, [r7, #12]
 8000b2e:	4413      	add	r3, r2
 8000b30:	781b      	ldrb	r3, [r3, #0]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d1f6      	bne.n	8000b24 <uart_send_string+0x14>
	HAL_UART_Transmit(&UartHandle, pstring, size, 1000);
 8000b36:	68fb      	ldr	r3, [r7, #12]
 8000b38:	b29a      	uxth	r2, r3
 8000b3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	4803      	ldr	r0, [pc, #12]	; (8000b50 <uart_send_string+0x40>)
 8000b42:	f002 fc08 	bl	8003356 <HAL_UART_Transmit>
 8000b46:	e000      	b.n	8000b4a <uart_send_string+0x3a>
		return;
 8000b48:	bf00      	nop
}
 8000b4a:	3710      	adds	r7, #16
 8000b4c:	46bd      	mov	sp, r7
 8000b4e:	bd80      	pop	{r7, pc}
 8000b50:	20000130 	.word	0x20000130

08000b54 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b08a      	sub	sp, #40	; 0x28
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d10e      	bne.n	8000b82 <BSP_LED_Init+0x2e>
 8000b64:	2300      	movs	r3, #0
 8000b66:	613b      	str	r3, [r7, #16]
 8000b68:	4b1f      	ldr	r3, [pc, #124]	; (8000be8 <BSP_LED_Init+0x94>)
 8000b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b6c:	4a1e      	ldr	r2, [pc, #120]	; (8000be8 <BSP_LED_Init+0x94>)
 8000b6e:	f043 0302 	orr.w	r3, r3, #2
 8000b72:	6313      	str	r3, [r2, #48]	; 0x30
 8000b74:	4b1c      	ldr	r3, [pc, #112]	; (8000be8 <BSP_LED_Init+0x94>)
 8000b76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	613b      	str	r3, [r7, #16]
 8000b7e:	693b      	ldr	r3, [r7, #16]
 8000b80:	e00d      	b.n	8000b9e <BSP_LED_Init+0x4a>
 8000b82:	2300      	movs	r3, #0
 8000b84:	60fb      	str	r3, [r7, #12]
 8000b86:	4b18      	ldr	r3, [pc, #96]	; (8000be8 <BSP_LED_Init+0x94>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	4a17      	ldr	r2, [pc, #92]	; (8000be8 <BSP_LED_Init+0x94>)
 8000b8c:	f043 0302 	orr.w	r3, r3, #2
 8000b90:	6313      	str	r3, [r2, #48]	; 0x30
 8000b92:	4b15      	ldr	r3, [pc, #84]	; (8000be8 <BSP_LED_Init+0x94>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	f003 0302 	and.w	r3, r3, #2
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000b9e:	79fb      	ldrb	r3, [r7, #7]
 8000ba0:	4a12      	ldr	r2, [pc, #72]	; (8000bec <BSP_LED_Init+0x98>)
 8000ba2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000ba6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ba8:	2301      	movs	r3, #1
 8000baa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bac:	2300      	movs	r3, #0
 8000bae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000bb0:	2302      	movs	r3, #2
 8000bb2:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8000bb4:	79fb      	ldrb	r3, [r7, #7]
 8000bb6:	4a0e      	ldr	r2, [pc, #56]	; (8000bf0 <BSP_LED_Init+0x9c>)
 8000bb8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bbc:	f107 0214 	add.w	r2, r7, #20
 8000bc0:	4611      	mov	r1, r2
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f000 fa0a 	bl	8000fdc <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000bc8:	79fb      	ldrb	r3, [r7, #7]
 8000bca:	4a09      	ldr	r2, [pc, #36]	; (8000bf0 <BSP_LED_Init+0x9c>)
 8000bcc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000bd0:	79fb      	ldrb	r3, [r7, #7]
 8000bd2:	4a06      	ldr	r2, [pc, #24]	; (8000bec <BSP_LED_Init+0x98>)
 8000bd4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000bd8:	2200      	movs	r2, #0
 8000bda:	4619      	mov	r1, r3
 8000bdc:	f000 fbaa 	bl	8001334 <HAL_GPIO_WritePin>
}
 8000be0:	bf00      	nop
 8000be2:	3728      	adds	r7, #40	; 0x28
 8000be4:	46bd      	mov	sp, r7
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	40023800 	.word	0x40023800
 8000bec:	08003c70 	.word	0x08003c70
 8000bf0:	2000003c 	.word	0x2000003c

08000bf4 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	b082      	sub	sp, #8
 8000bf8:	af00      	add	r7, sp, #0
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8000bfe:	79fb      	ldrb	r3, [r7, #7]
 8000c00:	4a07      	ldr	r2, [pc, #28]	; (8000c20 <BSP_LED_On+0x2c>)
 8000c02:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000c06:	79fb      	ldrb	r3, [r7, #7]
 8000c08:	4a06      	ldr	r2, [pc, #24]	; (8000c24 <BSP_LED_On+0x30>)
 8000c0a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c0e:	2201      	movs	r2, #1
 8000c10:	4619      	mov	r1, r3
 8000c12:	f000 fb8f 	bl	8001334 <HAL_GPIO_WritePin>
}
 8000c16:	bf00      	nop
 8000c18:	3708      	adds	r7, #8
 8000c1a:	46bd      	mov	sp, r7
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	2000003c 	.word	0x2000003c
 8000c24:	08003c70 	.word	0x08003c70

08000c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c28:	b480      	push	{r7}
 8000c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c2c:	4b16      	ldr	r3, [pc, #88]	; (8000c88 <SystemInit+0x60>)
 8000c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c32:	4a15      	ldr	r2, [pc, #84]	; (8000c88 <SystemInit+0x60>)
 8000c34:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c38:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000c3c:	4b13      	ldr	r3, [pc, #76]	; (8000c8c <SystemInit+0x64>)
 8000c3e:	681b      	ldr	r3, [r3, #0]
 8000c40:	4a12      	ldr	r2, [pc, #72]	; (8000c8c <SystemInit+0x64>)
 8000c42:	f043 0301 	orr.w	r3, r3, #1
 8000c46:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000c48:	4b10      	ldr	r3, [pc, #64]	; (8000c8c <SystemInit+0x64>)
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	; (8000c8c <SystemInit+0x64>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0e      	ldr	r2, [pc, #56]	; (8000c8c <SystemInit+0x64>)
 8000c54:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000c58:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000c5c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000c5e:	4b0b      	ldr	r3, [pc, #44]	; (8000c8c <SystemInit+0x64>)
 8000c60:	4a0b      	ldr	r2, [pc, #44]	; (8000c90 <SystemInit+0x68>)
 8000c62:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000c64:	4b09      	ldr	r3, [pc, #36]	; (8000c8c <SystemInit+0x64>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	4a08      	ldr	r2, [pc, #32]	; (8000c8c <SystemInit+0x64>)
 8000c6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000c6e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <SystemInit+0x64>)
 8000c72:	2200      	movs	r2, #0
 8000c74:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c76:	4b04      	ldr	r3, [pc, #16]	; (8000c88 <SystemInit+0x60>)
 8000c78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000c7c:	609a      	str	r2, [r3, #8]
#endif
}
 8000c7e:	bf00      	nop
 8000c80:	46bd      	mov	sp, r7
 8000c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c86:	4770      	bx	lr
 8000c88:	e000ed00 	.word	0xe000ed00
 8000c8c:	40023800 	.word	0x40023800
 8000c90:	24003010 	.word	0x24003010

08000c94 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000c94:	b480      	push	{r7}
 8000c96:	af00      	add	r7, sp, #0
}
 8000c98:	bf00      	nop
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca0:	4770      	bx	lr

08000ca2 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000ca2:	b480      	push	{r7}
 8000ca4:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000ca6:	e7fe      	b.n	8000ca6 <HardFault_Handler+0x4>

08000ca8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000ca8:	b480      	push	{r7}
 8000caa:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000cac:	e7fe      	b.n	8000cac <MemManage_Handler+0x4>

08000cae <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000cae:	b480      	push	{r7}
 8000cb0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000cb2:	e7fe      	b.n	8000cb2 <BusFault_Handler+0x4>

08000cb4 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000cb8:	e7fe      	b.n	8000cb8 <UsageFault_Handler+0x4>

08000cba <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000cba:	b480      	push	{r7}
 8000cbc:	af00      	add	r7, sp, #0
}
 8000cbe:	bf00      	nop
 8000cc0:	46bd      	mov	sp, r7
 8000cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cc6:	4770      	bx	lr

08000cc8 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000cc8:	b480      	push	{r7}
 8000cca:	af00      	add	r7, sp, #0
}
 8000ccc:	bf00      	nop
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd4:	4770      	bx	lr

08000cd6 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	af00      	add	r7, sp, #0
}
 8000cda:	bf00      	nop
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ce2:	4770      	bx	lr

08000ce4 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000ce8:	f000 f84e 	bl	8000d88 <HAL_IncTick>
}
 8000cec:	bf00      	nop
 8000cee:	bd80      	pop	{r7, pc}

08000cf0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cf4:	4b0b      	ldr	r3, [pc, #44]	; (8000d24 <HAL_Init+0x34>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	4a0a      	ldr	r2, [pc, #40]	; (8000d24 <HAL_Init+0x34>)
 8000cfa:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cfe:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000d00:	4b08      	ldr	r3, [pc, #32]	; (8000d24 <HAL_Init+0x34>)
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a07      	ldr	r2, [pc, #28]	; (8000d24 <HAL_Init+0x34>)
 8000d06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000d0a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000d0c:	2003      	movs	r0, #3
 8000d0e:	f000 f931 	bl	8000f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000d12:	200f      	movs	r0, #15
 8000d14:	f000 f808 	bl	8000d28 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000d18:	f001 fb18 	bl	800234c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000d1c:	2300      	movs	r3, #0
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	40023c00 	.word	0x40023c00

08000d28 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b082      	sub	sp, #8
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d30:	4b12      	ldr	r3, [pc, #72]	; (8000d7c <HAL_InitTick+0x54>)
 8000d32:	681a      	ldr	r2, [r3, #0]
 8000d34:	4b12      	ldr	r3, [pc, #72]	; (8000d80 <HAL_InitTick+0x58>)
 8000d36:	781b      	ldrb	r3, [r3, #0]
 8000d38:	4619      	mov	r1, r3
 8000d3a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d3e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d42:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d46:	4618      	mov	r0, r3
 8000d48:	f000 f93b 	bl	8000fc2 <HAL_SYSTICK_Config>
 8000d4c:	4603      	mov	r3, r0
 8000d4e:	2b00      	cmp	r3, #0
 8000d50:	d001      	beq.n	8000d56 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d52:	2301      	movs	r3, #1
 8000d54:	e00e      	b.n	8000d74 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	2b0f      	cmp	r3, #15
 8000d5a:	d80a      	bhi.n	8000d72 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	6879      	ldr	r1, [r7, #4]
 8000d60:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d64:	f000 f911 	bl	8000f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d68:	4a06      	ldr	r2, [pc, #24]	; (8000d84 <HAL_InitTick+0x5c>)
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d6e:	2300      	movs	r3, #0
 8000d70:	e000      	b.n	8000d74 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d72:	2301      	movs	r3, #1
}
 8000d74:	4618      	mov	r0, r3
 8000d76:	3708      	adds	r7, #8
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	20000048 	.word	0x20000048
 8000d80:	20000050 	.word	0x20000050
 8000d84:	2000004c 	.word	0x2000004c

08000d88 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d8c:	4b06      	ldr	r3, [pc, #24]	; (8000da8 <HAL_IncTick+0x20>)
 8000d8e:	781b      	ldrb	r3, [r3, #0]
 8000d90:	461a      	mov	r2, r3
 8000d92:	4b06      	ldr	r3, [pc, #24]	; (8000dac <HAL_IncTick+0x24>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	4413      	add	r3, r2
 8000d98:	4a04      	ldr	r2, [pc, #16]	; (8000dac <HAL_IncTick+0x24>)
 8000d9a:	6013      	str	r3, [r2, #0]
}
 8000d9c:	bf00      	nop
 8000d9e:	46bd      	mov	sp, r7
 8000da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da4:	4770      	bx	lr
 8000da6:	bf00      	nop
 8000da8:	20000050 	.word	0x20000050
 8000dac:	20000174 	.word	0x20000174

08000db0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000db0:	b480      	push	{r7}
 8000db2:	af00      	add	r7, sp, #0
  return uwTick;
 8000db4:	4b03      	ldr	r3, [pc, #12]	; (8000dc4 <HAL_GetTick+0x14>)
 8000db6:	681b      	ldr	r3, [r3, #0]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000174 	.word	0x20000174

08000dc8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b084      	sub	sp, #16
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000dd0:	f7ff ffee 	bl	8000db0 <HAL_GetTick>
 8000dd4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000dda:	68fb      	ldr	r3, [r7, #12]
 8000ddc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000de0:	d005      	beq.n	8000dee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000de2:	4b0a      	ldr	r3, [pc, #40]	; (8000e0c <HAL_Delay+0x44>)
 8000de4:	781b      	ldrb	r3, [r3, #0]
 8000de6:	461a      	mov	r2, r3
 8000de8:	68fb      	ldr	r3, [r7, #12]
 8000dea:	4413      	add	r3, r2
 8000dec:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dee:	bf00      	nop
 8000df0:	f7ff ffde 	bl	8000db0 <HAL_GetTick>
 8000df4:	4602      	mov	r2, r0
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	1ad3      	subs	r3, r2, r3
 8000dfa:	68fa      	ldr	r2, [r7, #12]
 8000dfc:	429a      	cmp	r2, r3
 8000dfe:	d8f7      	bhi.n	8000df0 <HAL_Delay+0x28>
  {
  }
}
 8000e00:	bf00      	nop
 8000e02:	bf00      	nop
 8000e04:	3710      	adds	r7, #16
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	20000050 	.word	0x20000050

08000e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e10:	b480      	push	{r7}
 8000e12:	b085      	sub	sp, #20
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	f003 0307 	and.w	r3, r3, #7
 8000e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e20:	4b0c      	ldr	r3, [pc, #48]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e22:	68db      	ldr	r3, [r3, #12]
 8000e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e26:	68ba      	ldr	r2, [r7, #8]
 8000e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e2c:	4013      	ands	r3, r2
 8000e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e30:	68fb      	ldr	r3, [r7, #12]
 8000e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e34:	68bb      	ldr	r3, [r7, #8]
 8000e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000e42:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <__NVIC_SetPriorityGrouping+0x44>)
 8000e44:	68bb      	ldr	r3, [r7, #8]
 8000e46:	60d3      	str	r3, [r2, #12]
}
 8000e48:	bf00      	nop
 8000e4a:	3714      	adds	r7, #20
 8000e4c:	46bd      	mov	sp, r7
 8000e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e52:	4770      	bx	lr
 8000e54:	e000ed00 	.word	0xe000ed00

08000e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <__NVIC_GetPriorityGrouping+0x18>)
 8000e5e:	68db      	ldr	r3, [r3, #12]
 8000e60:	0a1b      	lsrs	r3, r3, #8
 8000e62:	f003 0307 	and.w	r3, r3, #7
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e6e:	4770      	bx	lr
 8000e70:	e000ed00 	.word	0xe000ed00

08000e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000e74:	b480      	push	{r7}
 8000e76:	b083      	sub	sp, #12
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	4603      	mov	r3, r0
 8000e7c:	6039      	str	r1, [r7, #0]
 8000e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e84:	2b00      	cmp	r3, #0
 8000e86:	db0a      	blt.n	8000e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e88:	683b      	ldr	r3, [r7, #0]
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	490c      	ldr	r1, [pc, #48]	; (8000ec0 <__NVIC_SetPriority+0x4c>)
 8000e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000e92:	0112      	lsls	r2, r2, #4
 8000e94:	b2d2      	uxtb	r2, r2
 8000e96:	440b      	add	r3, r1
 8000e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000e9c:	e00a      	b.n	8000eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	b2da      	uxtb	r2, r3
 8000ea2:	4908      	ldr	r1, [pc, #32]	; (8000ec4 <__NVIC_SetPriority+0x50>)
 8000ea4:	79fb      	ldrb	r3, [r7, #7]
 8000ea6:	f003 030f 	and.w	r3, r3, #15
 8000eaa:	3b04      	subs	r3, #4
 8000eac:	0112      	lsls	r2, r2, #4
 8000eae:	b2d2      	uxtb	r2, r2
 8000eb0:	440b      	add	r3, r1
 8000eb2:	761a      	strb	r2, [r3, #24]
}
 8000eb4:	bf00      	nop
 8000eb6:	370c      	adds	r7, #12
 8000eb8:	46bd      	mov	sp, r7
 8000eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ebe:	4770      	bx	lr
 8000ec0:	e000e100 	.word	0xe000e100
 8000ec4:	e000ed00 	.word	0xe000ed00

08000ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	b089      	sub	sp, #36	; 0x24
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	60f8      	str	r0, [r7, #12]
 8000ed0:	60b9      	str	r1, [r7, #8]
 8000ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f003 0307 	and.w	r3, r3, #7
 8000eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000edc:	69fb      	ldr	r3, [r7, #28]
 8000ede:	f1c3 0307 	rsb	r3, r3, #7
 8000ee2:	2b04      	cmp	r3, #4
 8000ee4:	bf28      	it	cs
 8000ee6:	2304      	movcs	r3, #4
 8000ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000eea:	69fb      	ldr	r3, [r7, #28]
 8000eec:	3304      	adds	r3, #4
 8000eee:	2b06      	cmp	r3, #6
 8000ef0:	d902      	bls.n	8000ef8 <NVIC_EncodePriority+0x30>
 8000ef2:	69fb      	ldr	r3, [r7, #28]
 8000ef4:	3b03      	subs	r3, #3
 8000ef6:	e000      	b.n	8000efa <NVIC_EncodePriority+0x32>
 8000ef8:	2300      	movs	r3, #0
 8000efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000efc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000f00:	69bb      	ldr	r3, [r7, #24]
 8000f02:	fa02 f303 	lsl.w	r3, r2, r3
 8000f06:	43da      	mvns	r2, r3
 8000f08:	68bb      	ldr	r3, [r7, #8]
 8000f0a:	401a      	ands	r2, r3
 8000f0c:	697b      	ldr	r3, [r7, #20]
 8000f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000f10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000f14:	697b      	ldr	r3, [r7, #20]
 8000f16:	fa01 f303 	lsl.w	r3, r1, r3
 8000f1a:	43d9      	mvns	r1, r3
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f20:	4313      	orrs	r3, r2
         );
}
 8000f22:	4618      	mov	r0, r3
 8000f24:	3724      	adds	r7, #36	; 0x24
 8000f26:	46bd      	mov	sp, r7
 8000f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f2c:	4770      	bx	lr
	...

08000f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000f40:	d301      	bcc.n	8000f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000f42:	2301      	movs	r3, #1
 8000f44:	e00f      	b.n	8000f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000f46:	4a0a      	ldr	r2, [pc, #40]	; (8000f70 <SysTick_Config+0x40>)
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	3b01      	subs	r3, #1
 8000f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000f4e:	210f      	movs	r1, #15
 8000f50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000f54:	f7ff ff8e 	bl	8000e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000f58:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <SysTick_Config+0x40>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000f5e:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <SysTick_Config+0x40>)
 8000f60:	2207      	movs	r2, #7
 8000f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000f64:	2300      	movs	r3, #0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000e010 	.word	0xe000e010

08000f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b082      	sub	sp, #8
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000f7c:	6878      	ldr	r0, [r7, #4]
 8000f7e:	f7ff ff47 	bl	8000e10 <__NVIC_SetPriorityGrouping>
}
 8000f82:	bf00      	nop
 8000f84:	3708      	adds	r7, #8
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}

08000f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000f8a:	b580      	push	{r7, lr}
 8000f8c:	b086      	sub	sp, #24
 8000f8e:	af00      	add	r7, sp, #0
 8000f90:	4603      	mov	r3, r0
 8000f92:	60b9      	str	r1, [r7, #8]
 8000f94:	607a      	str	r2, [r7, #4]
 8000f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000f9c:	f7ff ff5c 	bl	8000e58 <__NVIC_GetPriorityGrouping>
 8000fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000fa2:	687a      	ldr	r2, [r7, #4]
 8000fa4:	68b9      	ldr	r1, [r7, #8]
 8000fa6:	6978      	ldr	r0, [r7, #20]
 8000fa8:	f7ff ff8e 	bl	8000ec8 <NVIC_EncodePriority>
 8000fac:	4602      	mov	r2, r0
 8000fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000fb2:	4611      	mov	r1, r2
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f7ff ff5d 	bl	8000e74 <__NVIC_SetPriority>
}
 8000fba:	bf00      	nop
 8000fbc:	3718      	adds	r7, #24
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	bd80      	pop	{r7, pc}

08000fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000fc2:	b580      	push	{r7, lr}
 8000fc4:	b082      	sub	sp, #8
 8000fc6:	af00      	add	r7, sp, #0
 8000fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000fca:	6878      	ldr	r0, [r7, #4]
 8000fcc:	f7ff ffb0 	bl	8000f30 <SysTick_Config>
 8000fd0:	4603      	mov	r3, r0
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3708      	adds	r7, #8
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
	...

08000fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	b089      	sub	sp, #36	; 0x24
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
 8000fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000fe6:	2300      	movs	r3, #0
 8000fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000fea:	2300      	movs	r3, #0
 8000fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	61fb      	str	r3, [r7, #28]
 8000ff6:	e177      	b.n	80012e8 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	69fb      	ldr	r3, [r7, #28]
 8000ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8001000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	697a      	ldr	r2, [r7, #20]
 8001008:	4013      	ands	r3, r2
 800100a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800100c:	693a      	ldr	r2, [r7, #16]
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	429a      	cmp	r2, r3
 8001012:	f040 8166 	bne.w	80012e2 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001016:	683b      	ldr	r3, [r7, #0]
 8001018:	685b      	ldr	r3, [r3, #4]
 800101a:	f003 0303 	and.w	r3, r3, #3
 800101e:	2b01      	cmp	r3, #1
 8001020:	d005      	beq.n	800102e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001022:	683b      	ldr	r3, [r7, #0]
 8001024:	685b      	ldr	r3, [r3, #4]
 8001026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800102a:	2b02      	cmp	r3, #2
 800102c:	d130      	bne.n	8001090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	689b      	ldr	r3, [r3, #8]
 8001032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	005b      	lsls	r3, r3, #1
 8001038:	2203      	movs	r2, #3
 800103a:	fa02 f303 	lsl.w	r3, r2, r3
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	68da      	ldr	r2, [r3, #12]
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	005b      	lsls	r3, r3, #1
 800104e:	fa02 f303 	lsl.w	r3, r2, r3
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	4313      	orrs	r3, r2
 8001056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	685b      	ldr	r3, [r3, #4]
 8001062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001064:	2201      	movs	r2, #1
 8001066:	69fb      	ldr	r3, [r7, #28]
 8001068:	fa02 f303 	lsl.w	r3, r2, r3
 800106c:	43db      	mvns	r3, r3
 800106e:	69ba      	ldr	r2, [r7, #24]
 8001070:	4013      	ands	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001074:	683b      	ldr	r3, [r7, #0]
 8001076:	685b      	ldr	r3, [r3, #4]
 8001078:	091b      	lsrs	r3, r3, #4
 800107a:	f003 0201 	and.w	r2, r3, #1
 800107e:	69fb      	ldr	r3, [r7, #28]
 8001080:	fa02 f303 	lsl.w	r3, r2, r3
 8001084:	69ba      	ldr	r2, [r7, #24]
 8001086:	4313      	orrs	r3, r2
 8001088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	69ba      	ldr	r2, [r7, #24]
 800108e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001090:	683b      	ldr	r3, [r7, #0]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	f003 0303 	and.w	r3, r3, #3
 8001098:	2b03      	cmp	r3, #3
 800109a:	d017      	beq.n	80010cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	68db      	ldr	r3, [r3, #12]
 80010a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	005b      	lsls	r3, r3, #1
 80010a6:	2203      	movs	r2, #3
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	689a      	ldr	r2, [r3, #8]
 80010b8:	69fb      	ldr	r3, [r7, #28]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	fa02 f303 	lsl.w	r3, r2, r3
 80010c0:	69ba      	ldr	r2, [r7, #24]
 80010c2:	4313      	orrs	r3, r2
 80010c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	69ba      	ldr	r2, [r7, #24]
 80010ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80010cc:	683b      	ldr	r3, [r7, #0]
 80010ce:	685b      	ldr	r3, [r3, #4]
 80010d0:	f003 0303 	and.w	r3, r3, #3
 80010d4:	2b02      	cmp	r3, #2
 80010d6:	d123      	bne.n	8001120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	08da      	lsrs	r2, r3, #3
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	3208      	adds	r2, #8
 80010e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80010e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80010e6:	69fb      	ldr	r3, [r7, #28]
 80010e8:	f003 0307 	and.w	r3, r3, #7
 80010ec:	009b      	lsls	r3, r3, #2
 80010ee:	220f      	movs	r2, #15
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	43db      	mvns	r3, r3
 80010f6:	69ba      	ldr	r2, [r7, #24]
 80010f8:	4013      	ands	r3, r2
 80010fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	691a      	ldr	r2, [r3, #16]
 8001100:	69fb      	ldr	r3, [r7, #28]
 8001102:	f003 0307 	and.w	r3, r3, #7
 8001106:	009b      	lsls	r3, r3, #2
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	69ba      	ldr	r2, [r7, #24]
 800110e:	4313      	orrs	r3, r2
 8001110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001112:	69fb      	ldr	r3, [r7, #28]
 8001114:	08da      	lsrs	r2, r3, #3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	3208      	adds	r2, #8
 800111a:	69b9      	ldr	r1, [r7, #24]
 800111c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	005b      	lsls	r3, r3, #1
 800112a:	2203      	movs	r2, #3
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	43db      	mvns	r3, r3
 8001132:	69ba      	ldr	r2, [r7, #24]
 8001134:	4013      	ands	r3, r2
 8001136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	685b      	ldr	r3, [r3, #4]
 800113c:	f003 0203 	and.w	r2, r3, #3
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	005b      	lsls	r3, r3, #1
 8001144:	fa02 f303 	lsl.w	r3, r2, r3
 8001148:	69ba      	ldr	r2, [r7, #24]
 800114a:	4313      	orrs	r3, r2
 800114c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	69ba      	ldr	r2, [r7, #24]
 8001152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	685b      	ldr	r3, [r3, #4]
 8001158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800115c:	2b00      	cmp	r3, #0
 800115e:	f000 80c0 	beq.w	80012e2 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001162:	2300      	movs	r3, #0
 8001164:	60fb      	str	r3, [r7, #12]
 8001166:	4b66      	ldr	r3, [pc, #408]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800116a:	4a65      	ldr	r2, [pc, #404]	; (8001300 <HAL_GPIO_Init+0x324>)
 800116c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001170:	6453      	str	r3, [r2, #68]	; 0x44
 8001172:	4b63      	ldr	r3, [pc, #396]	; (8001300 <HAL_GPIO_Init+0x324>)
 8001174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800117a:	60fb      	str	r3, [r7, #12]
 800117c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800117e:	4a61      	ldr	r2, [pc, #388]	; (8001304 <HAL_GPIO_Init+0x328>)
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	089b      	lsrs	r3, r3, #2
 8001184:	3302      	adds	r3, #2
 8001186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800118c:	69fb      	ldr	r3, [r7, #28]
 800118e:	f003 0303 	and.w	r3, r3, #3
 8001192:	009b      	lsls	r3, r3, #2
 8001194:	220f      	movs	r2, #15
 8001196:	fa02 f303 	lsl.w	r3, r2, r3
 800119a:	43db      	mvns	r3, r3
 800119c:	69ba      	ldr	r2, [r7, #24]
 800119e:	4013      	ands	r3, r2
 80011a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	4a58      	ldr	r2, [pc, #352]	; (8001308 <HAL_GPIO_Init+0x32c>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d037      	beq.n	800121a <HAL_GPIO_Init+0x23e>
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	4a57      	ldr	r2, [pc, #348]	; (800130c <HAL_GPIO_Init+0x330>)
 80011ae:	4293      	cmp	r3, r2
 80011b0:	d031      	beq.n	8001216 <HAL_GPIO_Init+0x23a>
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	4a56      	ldr	r2, [pc, #344]	; (8001310 <HAL_GPIO_Init+0x334>)
 80011b6:	4293      	cmp	r3, r2
 80011b8:	d02b      	beq.n	8001212 <HAL_GPIO_Init+0x236>
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	4a55      	ldr	r2, [pc, #340]	; (8001314 <HAL_GPIO_Init+0x338>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d025      	beq.n	800120e <HAL_GPIO_Init+0x232>
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a54      	ldr	r2, [pc, #336]	; (8001318 <HAL_GPIO_Init+0x33c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d01f      	beq.n	800120a <HAL_GPIO_Init+0x22e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a53      	ldr	r2, [pc, #332]	; (800131c <HAL_GPIO_Init+0x340>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d019      	beq.n	8001206 <HAL_GPIO_Init+0x22a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a52      	ldr	r2, [pc, #328]	; (8001320 <HAL_GPIO_Init+0x344>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d013      	beq.n	8001202 <HAL_GPIO_Init+0x226>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a51      	ldr	r2, [pc, #324]	; (8001324 <HAL_GPIO_Init+0x348>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d00d      	beq.n	80011fe <HAL_GPIO_Init+0x222>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a50      	ldr	r2, [pc, #320]	; (8001328 <HAL_GPIO_Init+0x34c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d007      	beq.n	80011fa <HAL_GPIO_Init+0x21e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a4f      	ldr	r2, [pc, #316]	; (800132c <HAL_GPIO_Init+0x350>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d101      	bne.n	80011f6 <HAL_GPIO_Init+0x21a>
 80011f2:	2309      	movs	r3, #9
 80011f4:	e012      	b.n	800121c <HAL_GPIO_Init+0x240>
 80011f6:	230a      	movs	r3, #10
 80011f8:	e010      	b.n	800121c <HAL_GPIO_Init+0x240>
 80011fa:	2308      	movs	r3, #8
 80011fc:	e00e      	b.n	800121c <HAL_GPIO_Init+0x240>
 80011fe:	2307      	movs	r3, #7
 8001200:	e00c      	b.n	800121c <HAL_GPIO_Init+0x240>
 8001202:	2306      	movs	r3, #6
 8001204:	e00a      	b.n	800121c <HAL_GPIO_Init+0x240>
 8001206:	2305      	movs	r3, #5
 8001208:	e008      	b.n	800121c <HAL_GPIO_Init+0x240>
 800120a:	2304      	movs	r3, #4
 800120c:	e006      	b.n	800121c <HAL_GPIO_Init+0x240>
 800120e:	2303      	movs	r3, #3
 8001210:	e004      	b.n	800121c <HAL_GPIO_Init+0x240>
 8001212:	2302      	movs	r3, #2
 8001214:	e002      	b.n	800121c <HAL_GPIO_Init+0x240>
 8001216:	2301      	movs	r3, #1
 8001218:	e000      	b.n	800121c <HAL_GPIO_Init+0x240>
 800121a:	2300      	movs	r3, #0
 800121c:	69fa      	ldr	r2, [r7, #28]
 800121e:	f002 0203 	and.w	r2, r2, #3
 8001222:	0092      	lsls	r2, r2, #2
 8001224:	4093      	lsls	r3, r2
 8001226:	69ba      	ldr	r2, [r7, #24]
 8001228:	4313      	orrs	r3, r2
 800122a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800122c:	4935      	ldr	r1, [pc, #212]	; (8001304 <HAL_GPIO_Init+0x328>)
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	089b      	lsrs	r3, r3, #2
 8001232:	3302      	adds	r3, #2
 8001234:	69ba      	ldr	r2, [r7, #24]
 8001236:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800123a:	4b3d      	ldr	r3, [pc, #244]	; (8001330 <HAL_GPIO_Init+0x354>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001240:	693b      	ldr	r3, [r7, #16]
 8001242:	43db      	mvns	r3, r3
 8001244:	69ba      	ldr	r2, [r7, #24]
 8001246:	4013      	ands	r3, r2
 8001248:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001252:	2b00      	cmp	r3, #0
 8001254:	d003      	beq.n	800125e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	693b      	ldr	r3, [r7, #16]
 800125a:	4313      	orrs	r3, r2
 800125c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800125e:	4a34      	ldr	r2, [pc, #208]	; (8001330 <HAL_GPIO_Init+0x354>)
 8001260:	69bb      	ldr	r3, [r7, #24]
 8001262:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001264:	4b32      	ldr	r3, [pc, #200]	; (8001330 <HAL_GPIO_Init+0x354>)
 8001266:	685b      	ldr	r3, [r3, #4]
 8001268:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126a:	693b      	ldr	r3, [r7, #16]
 800126c:	43db      	mvns	r3, r3
 800126e:	69ba      	ldr	r2, [r7, #24]
 8001270:	4013      	ands	r3, r2
 8001272:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001274:	683b      	ldr	r3, [r7, #0]
 8001276:	685b      	ldr	r3, [r3, #4]
 8001278:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800127c:	2b00      	cmp	r3, #0
 800127e:	d003      	beq.n	8001288 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001280:	69ba      	ldr	r2, [r7, #24]
 8001282:	693b      	ldr	r3, [r7, #16]
 8001284:	4313      	orrs	r3, r2
 8001286:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001288:	4a29      	ldr	r2, [pc, #164]	; (8001330 <HAL_GPIO_Init+0x354>)
 800128a:	69bb      	ldr	r3, [r7, #24]
 800128c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800128e:	4b28      	ldr	r3, [pc, #160]	; (8001330 <HAL_GPIO_Init+0x354>)
 8001290:	689b      	ldr	r3, [r3, #8]
 8001292:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001294:	693b      	ldr	r3, [r7, #16]
 8001296:	43db      	mvns	r3, r3
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	4013      	ands	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800129e:	683b      	ldr	r3, [r7, #0]
 80012a0:	685b      	ldr	r3, [r3, #4]
 80012a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d003      	beq.n	80012b2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012aa:	69ba      	ldr	r2, [r7, #24]
 80012ac:	693b      	ldr	r3, [r7, #16]
 80012ae:	4313      	orrs	r3, r2
 80012b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012b2:	4a1f      	ldr	r2, [pc, #124]	; (8001330 <HAL_GPIO_Init+0x354>)
 80012b4:	69bb      	ldr	r3, [r7, #24]
 80012b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012b8:	4b1d      	ldr	r3, [pc, #116]	; (8001330 <HAL_GPIO_Init+0x354>)
 80012ba:	68db      	ldr	r3, [r3, #12]
 80012bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012be:	693b      	ldr	r3, [r7, #16]
 80012c0:	43db      	mvns	r3, r3
 80012c2:	69ba      	ldr	r2, [r7, #24]
 80012c4:	4013      	ands	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80012c8:	683b      	ldr	r3, [r7, #0]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d003      	beq.n	80012dc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	693b      	ldr	r3, [r7, #16]
 80012d8:	4313      	orrs	r3, r2
 80012da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012dc:	4a14      	ldr	r2, [pc, #80]	; (8001330 <HAL_GPIO_Init+0x354>)
 80012de:	69bb      	ldr	r3, [r7, #24]
 80012e0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e2:	69fb      	ldr	r3, [r7, #28]
 80012e4:	3301      	adds	r3, #1
 80012e6:	61fb      	str	r3, [r7, #28]
 80012e8:	69fb      	ldr	r3, [r7, #28]
 80012ea:	2b0f      	cmp	r3, #15
 80012ec:	f67f ae84 	bls.w	8000ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f0:	bf00      	nop
 80012f2:	bf00      	nop
 80012f4:	3724      	adds	r7, #36	; 0x24
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr
 80012fe:	bf00      	nop
 8001300:	40023800 	.word	0x40023800
 8001304:	40013800 	.word	0x40013800
 8001308:	40020000 	.word	0x40020000
 800130c:	40020400 	.word	0x40020400
 8001310:	40020800 	.word	0x40020800
 8001314:	40020c00 	.word	0x40020c00
 8001318:	40021000 	.word	0x40021000
 800131c:	40021400 	.word	0x40021400
 8001320:	40021800 	.word	0x40021800
 8001324:	40021c00 	.word	0x40021c00
 8001328:	40022000 	.word	0x40022000
 800132c:	40022400 	.word	0x40022400
 8001330:	40013c00 	.word	0x40013c00

08001334 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001334:	b480      	push	{r7}
 8001336:	b083      	sub	sp, #12
 8001338:	af00      	add	r7, sp, #0
 800133a:	6078      	str	r0, [r7, #4]
 800133c:	460b      	mov	r3, r1
 800133e:	807b      	strh	r3, [r7, #2]
 8001340:	4613      	mov	r3, r2
 8001342:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001344:	787b      	ldrb	r3, [r7, #1]
 8001346:	2b00      	cmp	r3, #0
 8001348:	d003      	beq.n	8001352 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800134a:	887a      	ldrh	r2, [r7, #2]
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001350:	e003      	b.n	800135a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001352:	887b      	ldrh	r3, [r7, #2]
 8001354:	041a      	lsls	r2, r3, #16
 8001356:	687b      	ldr	r3, [r7, #4]
 8001358:	619a      	str	r2, [r3, #24]
}
 800135a:	bf00      	nop
 800135c:	370c      	adds	r7, #12
 800135e:	46bd      	mov	sp, r7
 8001360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001364:	4770      	bx	lr
	...

08001368 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d101      	bne.n	800137a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e12b      	b.n	80015d2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001380:	b2db      	uxtb	r3, r3
 8001382:	2b00      	cmp	r3, #0
 8001384:	d106      	bne.n	8001394 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800138e:	6878      	ldr	r0, [r7, #4]
 8001390:	f000 f92e 	bl	80015f0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	2224      	movs	r2, #36	; 0x24
 8001398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	681a      	ldr	r2, [r3, #0]
 80013a2:	687b      	ldr	r3, [r7, #4]
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	f022 0201 	bic.w	r2, r2, #1
 80013aa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	681a      	ldr	r2, [r3, #0]
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80013ba:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681a      	ldr	r2, [r3, #0]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80013ca:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80013cc:	f001 fc86 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 80013d0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	4a81      	ldr	r2, [pc, #516]	; (80015dc <HAL_I2C_Init+0x274>)
 80013d8:	4293      	cmp	r3, r2
 80013da:	d807      	bhi.n	80013ec <HAL_I2C_Init+0x84>
 80013dc:	68fb      	ldr	r3, [r7, #12]
 80013de:	4a80      	ldr	r2, [pc, #512]	; (80015e0 <HAL_I2C_Init+0x278>)
 80013e0:	4293      	cmp	r3, r2
 80013e2:	bf94      	ite	ls
 80013e4:	2301      	movls	r3, #1
 80013e6:	2300      	movhi	r3, #0
 80013e8:	b2db      	uxtb	r3, r3
 80013ea:	e006      	b.n	80013fa <HAL_I2C_Init+0x92>
 80013ec:	68fb      	ldr	r3, [r7, #12]
 80013ee:	4a7d      	ldr	r2, [pc, #500]	; (80015e4 <HAL_I2C_Init+0x27c>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	bf94      	ite	ls
 80013f4:	2301      	movls	r3, #1
 80013f6:	2300      	movhi	r3, #0
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80013fe:	2301      	movs	r3, #1
 8001400:	e0e7      	b.n	80015d2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001402:	68fb      	ldr	r3, [r7, #12]
 8001404:	4a78      	ldr	r2, [pc, #480]	; (80015e8 <HAL_I2C_Init+0x280>)
 8001406:	fba2 2303 	umull	r2, r3, r2, r3
 800140a:	0c9b      	lsrs	r3, r3, #18
 800140c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	685b      	ldr	r3, [r3, #4]
 8001414:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	68ba      	ldr	r2, [r7, #8]
 800141e:	430a      	orrs	r2, r1
 8001420:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	6a1b      	ldr	r3, [r3, #32]
 8001428:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	4a6a      	ldr	r2, [pc, #424]	; (80015dc <HAL_I2C_Init+0x274>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d802      	bhi.n	800143c <HAL_I2C_Init+0xd4>
 8001436:	68bb      	ldr	r3, [r7, #8]
 8001438:	3301      	adds	r3, #1
 800143a:	e009      	b.n	8001450 <HAL_I2C_Init+0xe8>
 800143c:	68bb      	ldr	r3, [r7, #8]
 800143e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001442:	fb02 f303 	mul.w	r3, r2, r3
 8001446:	4a69      	ldr	r2, [pc, #420]	; (80015ec <HAL_I2C_Init+0x284>)
 8001448:	fba2 2303 	umull	r2, r3, r2, r3
 800144c:	099b      	lsrs	r3, r3, #6
 800144e:	3301      	adds	r3, #1
 8001450:	687a      	ldr	r2, [r7, #4]
 8001452:	6812      	ldr	r2, [r2, #0]
 8001454:	430b      	orrs	r3, r1
 8001456:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	69db      	ldr	r3, [r3, #28]
 800145e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001462:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	495c      	ldr	r1, [pc, #368]	; (80015dc <HAL_I2C_Init+0x274>)
 800146c:	428b      	cmp	r3, r1
 800146e:	d819      	bhi.n	80014a4 <HAL_I2C_Init+0x13c>
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	1e59      	subs	r1, r3, #1
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	685b      	ldr	r3, [r3, #4]
 8001478:	005b      	lsls	r3, r3, #1
 800147a:	fbb1 f3f3 	udiv	r3, r1, r3
 800147e:	1c59      	adds	r1, r3, #1
 8001480:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001484:	400b      	ands	r3, r1
 8001486:	2b00      	cmp	r3, #0
 8001488:	d00a      	beq.n	80014a0 <HAL_I2C_Init+0x138>
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1e59      	subs	r1, r3, #1
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	005b      	lsls	r3, r3, #1
 8001494:	fbb1 f3f3 	udiv	r3, r1, r3
 8001498:	3301      	adds	r3, #1
 800149a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800149e:	e051      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014a0:	2304      	movs	r3, #4
 80014a2:	e04f      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	689b      	ldr	r3, [r3, #8]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d111      	bne.n	80014d0 <HAL_I2C_Init+0x168>
 80014ac:	68fb      	ldr	r3, [r7, #12]
 80014ae:	1e58      	subs	r0, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6859      	ldr	r1, [r3, #4]
 80014b4:	460b      	mov	r3, r1
 80014b6:	005b      	lsls	r3, r3, #1
 80014b8:	440b      	add	r3, r1
 80014ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	bf0c      	ite	eq
 80014c8:	2301      	moveq	r3, #1
 80014ca:	2300      	movne	r3, #0
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	e012      	b.n	80014f6 <HAL_I2C_Init+0x18e>
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	1e58      	subs	r0, r3, #1
 80014d4:	687b      	ldr	r3, [r7, #4]
 80014d6:	6859      	ldr	r1, [r3, #4]
 80014d8:	460b      	mov	r3, r1
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	440b      	add	r3, r1
 80014de:	0099      	lsls	r1, r3, #2
 80014e0:	440b      	add	r3, r1
 80014e2:	fbb0 f3f3 	udiv	r3, r0, r3
 80014e6:	3301      	adds	r3, #1
 80014e8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	bf0c      	ite	eq
 80014f0:	2301      	moveq	r3, #1
 80014f2:	2300      	movne	r3, #0
 80014f4:	b2db      	uxtb	r3, r3
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <HAL_I2C_Init+0x196>
 80014fa:	2301      	movs	r3, #1
 80014fc:	e022      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	689b      	ldr	r3, [r3, #8]
 8001502:	2b00      	cmp	r3, #0
 8001504:	d10e      	bne.n	8001524 <HAL_I2C_Init+0x1bc>
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	1e58      	subs	r0, r3, #1
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	6859      	ldr	r1, [r3, #4]
 800150e:	460b      	mov	r3, r1
 8001510:	005b      	lsls	r3, r3, #1
 8001512:	440b      	add	r3, r1
 8001514:	fbb0 f3f3 	udiv	r3, r0, r3
 8001518:	3301      	adds	r3, #1
 800151a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800151e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001522:	e00f      	b.n	8001544 <HAL_I2C_Init+0x1dc>
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	1e58      	subs	r0, r3, #1
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	6859      	ldr	r1, [r3, #4]
 800152c:	460b      	mov	r3, r1
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	440b      	add	r3, r1
 8001532:	0099      	lsls	r1, r3, #2
 8001534:	440b      	add	r3, r1
 8001536:	fbb0 f3f3 	udiv	r3, r0, r3
 800153a:	3301      	adds	r3, #1
 800153c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001540:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001544:	6879      	ldr	r1, [r7, #4]
 8001546:	6809      	ldr	r1, [r1, #0]
 8001548:	4313      	orrs	r3, r2
 800154a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	69da      	ldr	r2, [r3, #28]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	6a1b      	ldr	r3, [r3, #32]
 800155e:	431a      	orrs	r2, r3
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	430a      	orrs	r2, r1
 8001566:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001572:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001576:	687a      	ldr	r2, [r7, #4]
 8001578:	6911      	ldr	r1, [r2, #16]
 800157a:	687a      	ldr	r2, [r7, #4]
 800157c:	68d2      	ldr	r2, [r2, #12]
 800157e:	4311      	orrs	r1, r2
 8001580:	687a      	ldr	r2, [r7, #4]
 8001582:	6812      	ldr	r2, [r2, #0]
 8001584:	430b      	orrs	r3, r1
 8001586:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	68db      	ldr	r3, [r3, #12]
 800158e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	695a      	ldr	r2, [r3, #20]
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	431a      	orrs	r2, r3
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	430a      	orrs	r2, r1
 80015a2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	681a      	ldr	r2, [r3, #0]
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f042 0201 	orr.w	r2, r2, #1
 80015b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	2200      	movs	r2, #0
 80015b8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	2220      	movs	r2, #32
 80015be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	2200      	movs	r2, #0
 80015c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	2200      	movs	r2, #0
 80015cc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	4618      	mov	r0, r3
 80015d4:	3710      	adds	r7, #16
 80015d6:	46bd      	mov	sp, r7
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	000186a0 	.word	0x000186a0
 80015e0:	001e847f 	.word	0x001e847f
 80015e4:	003d08ff 	.word	0x003d08ff
 80015e8:	431bde83 	.word	0x431bde83
 80015ec:	10624dd3 	.word	0x10624dd3

080015f0 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80015f8:	bf00      	nop
 80015fa:	370c      	adds	r7, #12
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr

08001604 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001604:	b580      	push	{r7, lr}
 8001606:	b088      	sub	sp, #32
 8001608:	af02      	add	r7, sp, #8
 800160a:	60f8      	str	r0, [r7, #12]
 800160c:	607a      	str	r2, [r7, #4]
 800160e:	461a      	mov	r2, r3
 8001610:	460b      	mov	r3, r1
 8001612:	817b      	strh	r3, [r7, #10]
 8001614:	4613      	mov	r3, r2
 8001616:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001618:	f7ff fbca 	bl	8000db0 <HAL_GetTick>
 800161c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001624:	b2db      	uxtb	r3, r3
 8001626:	2b20      	cmp	r3, #32
 8001628:	f040 80e0 	bne.w	80017ec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800162c:	697b      	ldr	r3, [r7, #20]
 800162e:	9300      	str	r3, [sp, #0]
 8001630:	2319      	movs	r3, #25
 8001632:	2201      	movs	r2, #1
 8001634:	4970      	ldr	r1, [pc, #448]	; (80017f8 <HAL_I2C_Master_Transmit+0x1f4>)
 8001636:	68f8      	ldr	r0, [r7, #12]
 8001638:	f000 fc58 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 800163c:	4603      	mov	r3, r0
 800163e:	2b00      	cmp	r3, #0
 8001640:	d001      	beq.n	8001646 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001642:	2302      	movs	r3, #2
 8001644:	e0d3      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001646:	68fb      	ldr	r3, [r7, #12]
 8001648:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800164c:	2b01      	cmp	r3, #1
 800164e:	d101      	bne.n	8001654 <HAL_I2C_Master_Transmit+0x50>
 8001650:	2302      	movs	r3, #2
 8001652:	e0cc      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1ea>
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	2201      	movs	r2, #1
 8001658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800165c:	68fb      	ldr	r3, [r7, #12]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	2b01      	cmp	r3, #1
 8001668:	d007      	beq.n	800167a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	681a      	ldr	r2, [r3, #0]
 8001670:	68fb      	ldr	r3, [r7, #12]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	f042 0201 	orr.w	r2, r2, #1
 8001678:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	681a      	ldr	r2, [r3, #0]
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001688:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	2221      	movs	r2, #33	; 0x21
 800168e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001692:	68fb      	ldr	r3, [r7, #12]
 8001694:	2210      	movs	r2, #16
 8001696:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	2200      	movs	r2, #0
 800169e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80016a0:	68fb      	ldr	r3, [r7, #12]
 80016a2:	687a      	ldr	r2, [r7, #4]
 80016a4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	893a      	ldrh	r2, [r7, #8]
 80016aa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80016b0:	b29a      	uxth	r2, r3
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80016b6:	68fb      	ldr	r3, [r7, #12]
 80016b8:	4a50      	ldr	r2, [pc, #320]	; (80017fc <HAL_I2C_Master_Transmit+0x1f8>)
 80016ba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80016bc:	8979      	ldrh	r1, [r7, #10]
 80016be:	697b      	ldr	r3, [r7, #20]
 80016c0:	6a3a      	ldr	r2, [r7, #32]
 80016c2:	68f8      	ldr	r0, [r7, #12]
 80016c4:	f000 fac2 	bl	8001c4c <I2C_MasterRequestWrite>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80016ce:	2301      	movs	r3, #1
 80016d0:	e08d      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80016d2:	2300      	movs	r3, #0
 80016d4:	613b      	str	r3, [r7, #16]
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	695b      	ldr	r3, [r3, #20]
 80016dc:	613b      	str	r3, [r7, #16]
 80016de:	68fb      	ldr	r3, [r7, #12]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	699b      	ldr	r3, [r3, #24]
 80016e4:	613b      	str	r3, [r7, #16]
 80016e6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80016e8:	e066      	b.n	80017b8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80016ea:	697a      	ldr	r2, [r7, #20]
 80016ec:	6a39      	ldr	r1, [r7, #32]
 80016ee:	68f8      	ldr	r0, [r7, #12]
 80016f0:	f000 fcd2 	bl	8002098 <I2C_WaitOnTXEFlagUntilTimeout>
 80016f4:	4603      	mov	r3, r0
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d00d      	beq.n	8001716 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	2b04      	cmp	r3, #4
 8001700:	d107      	bne.n	8001712 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001702:	68fb      	ldr	r3, [r7, #12]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001710:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001712:	2301      	movs	r3, #1
 8001714:	e06b      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001716:	68fb      	ldr	r3, [r7, #12]
 8001718:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800171a:	781a      	ldrb	r2, [r3, #0]
 800171c:	68fb      	ldr	r3, [r7, #12]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001722:	68fb      	ldr	r3, [r7, #12]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	1c5a      	adds	r2, r3, #1
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800172c:	68fb      	ldr	r3, [r7, #12]
 800172e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001730:	b29b      	uxth	r3, r3
 8001732:	3b01      	subs	r3, #1
 8001734:	b29a      	uxth	r2, r3
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800173a:	68fb      	ldr	r3, [r7, #12]
 800173c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800173e:	3b01      	subs	r3, #1
 8001740:	b29a      	uxth	r2, r3
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	695b      	ldr	r3, [r3, #20]
 800174c:	f003 0304 	and.w	r3, r3, #4
 8001750:	2b04      	cmp	r3, #4
 8001752:	d11b      	bne.n	800178c <HAL_I2C_Master_Transmit+0x188>
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001758:	2b00      	cmp	r3, #0
 800175a:	d017      	beq.n	800178c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001760:	781a      	ldrb	r2, [r3, #0]
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800176c:	1c5a      	adds	r2, r3, #1
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001772:	68fb      	ldr	r3, [r7, #12]
 8001774:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001776:	b29b      	uxth	r3, r3
 8001778:	3b01      	subs	r3, #1
 800177a:	b29a      	uxth	r2, r3
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001784:	3b01      	subs	r3, #1
 8001786:	b29a      	uxth	r2, r3
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800178c:	697a      	ldr	r2, [r7, #20]
 800178e:	6a39      	ldr	r1, [r7, #32]
 8001790:	68f8      	ldr	r0, [r7, #12]
 8001792:	f000 fcc2 	bl	800211a <I2C_WaitOnBTFFlagUntilTimeout>
 8001796:	4603      	mov	r3, r0
 8001798:	2b00      	cmp	r3, #0
 800179a:	d00d      	beq.n	80017b8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017a0:	2b04      	cmp	r3, #4
 80017a2:	d107      	bne.n	80017b4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017a4:	68fb      	ldr	r3, [r7, #12]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017b2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80017b4:	2301      	movs	r3, #1
 80017b6:	e01a      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80017b8:	68fb      	ldr	r3, [r7, #12]
 80017ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d194      	bne.n	80016ea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	681a      	ldr	r2, [r3, #0]
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80017ce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2220      	movs	r2, #32
 80017d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	2200      	movs	r2, #0
 80017dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	2200      	movs	r2, #0
 80017e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80017e8:	2300      	movs	r3, #0
 80017ea:	e000      	b.n	80017ee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80017ec:	2302      	movs	r3, #2
  }
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3718      	adds	r7, #24
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	00100002 	.word	0x00100002
 80017fc:	ffff0000 	.word	0xffff0000

08001800 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b08c      	sub	sp, #48	; 0x30
 8001804:	af02      	add	r7, sp, #8
 8001806:	60f8      	str	r0, [r7, #12]
 8001808:	607a      	str	r2, [r7, #4]
 800180a:	461a      	mov	r2, r3
 800180c:	460b      	mov	r3, r1
 800180e:	817b      	strh	r3, [r7, #10]
 8001810:	4613      	mov	r3, r2
 8001812:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001814:	f7ff facc 	bl	8000db0 <HAL_GetTick>
 8001818:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800181a:	68fb      	ldr	r3, [r7, #12]
 800181c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001820:	b2db      	uxtb	r3, r3
 8001822:	2b20      	cmp	r3, #32
 8001824:	f040 820b 	bne.w	8001c3e <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001828:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	2319      	movs	r3, #25
 800182e:	2201      	movs	r2, #1
 8001830:	497c      	ldr	r1, [pc, #496]	; (8001a24 <HAL_I2C_Master_Receive+0x224>)
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f000 fb5a 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001838:	4603      	mov	r3, r0
 800183a:	2b00      	cmp	r3, #0
 800183c:	d001      	beq.n	8001842 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800183e:	2302      	movs	r3, #2
 8001840:	e1fe      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001848:	2b01      	cmp	r3, #1
 800184a:	d101      	bne.n	8001850 <HAL_I2C_Master_Receive+0x50>
 800184c:	2302      	movs	r3, #2
 800184e:	e1f7      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	2201      	movs	r2, #1
 8001854:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	f003 0301 	and.w	r3, r3, #1
 8001862:	2b01      	cmp	r3, #1
 8001864:	d007      	beq.n	8001876 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001866:	68fb      	ldr	r3, [r7, #12]
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	681a      	ldr	r2, [r3, #0]
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	f042 0201 	orr.w	r2, r2, #1
 8001874:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	681a      	ldr	r2, [r3, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001884:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	2222      	movs	r2, #34	; 0x22
 800188a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	2210      	movs	r2, #16
 8001892:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001896:	68fb      	ldr	r3, [r7, #12]
 8001898:	2200      	movs	r2, #0
 800189a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	687a      	ldr	r2, [r7, #4]
 80018a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80018a2:	68fb      	ldr	r3, [r7, #12]
 80018a4:	893a      	ldrh	r2, [r7, #8]
 80018a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80018a8:	68fb      	ldr	r3, [r7, #12]
 80018aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018ac:	b29a      	uxth	r2, r3
 80018ae:	68fb      	ldr	r3, [r7, #12]
 80018b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	4a5c      	ldr	r2, [pc, #368]	; (8001a28 <HAL_I2C_Master_Receive+0x228>)
 80018b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80018b8:	8979      	ldrh	r1, [r7, #10]
 80018ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018bc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f000 fa46 	bl	8001d50 <I2C_MasterRequestRead>
 80018c4:	4603      	mov	r3, r0
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d001      	beq.n	80018ce <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80018ca:	2301      	movs	r3, #1
 80018cc:	e1b8      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d113      	bne.n	80018fe <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80018d6:	2300      	movs	r3, #0
 80018d8:	623b      	str	r3, [r7, #32]
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	695b      	ldr	r3, [r3, #20]
 80018e0:	623b      	str	r3, [r7, #32]
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	699b      	ldr	r3, [r3, #24]
 80018e8:	623b      	str	r3, [r7, #32]
 80018ea:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	681a      	ldr	r2, [r3, #0]
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	681b      	ldr	r3, [r3, #0]
 80018f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018fa:	601a      	str	r2, [r3, #0]
 80018fc:	e18c      	b.n	8001c18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80018fe:	68fb      	ldr	r3, [r7, #12]
 8001900:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001902:	2b01      	cmp	r3, #1
 8001904:	d11b      	bne.n	800193e <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	681a      	ldr	r2, [r3, #0]
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001914:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001916:	2300      	movs	r3, #0
 8001918:	61fb      	str	r3, [r7, #28]
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	695b      	ldr	r3, [r3, #20]
 8001920:	61fb      	str	r3, [r7, #28]
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	681a      	ldr	r2, [r3, #0]
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800193a:	601a      	str	r2, [r3, #0]
 800193c:	e16c      	b.n	8001c18 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800193e:	68fb      	ldr	r3, [r7, #12]
 8001940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001942:	2b02      	cmp	r3, #2
 8001944:	d11b      	bne.n	800197e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681a      	ldr	r2, [r3, #0]
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001954:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001956:	68fb      	ldr	r3, [r7, #12]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	681a      	ldr	r2, [r3, #0]
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001964:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001966:	2300      	movs	r3, #0
 8001968:	61bb      	str	r3, [r7, #24]
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	695b      	ldr	r3, [r3, #20]
 8001970:	61bb      	str	r3, [r7, #24]
 8001972:	68fb      	ldr	r3, [r7, #12]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	699b      	ldr	r3, [r3, #24]
 8001978:	61bb      	str	r3, [r7, #24]
 800197a:	69bb      	ldr	r3, [r7, #24]
 800197c:	e14c      	b.n	8001c18 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	681a      	ldr	r2, [r3, #0]
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800198c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800198e:	2300      	movs	r3, #0
 8001990:	617b      	str	r3, [r7, #20]
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	695b      	ldr	r3, [r3, #20]
 8001998:	617b      	str	r3, [r7, #20]
 800199a:	68fb      	ldr	r3, [r7, #12]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	617b      	str	r3, [r7, #20]
 80019a2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80019a4:	e138      	b.n	8001c18 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019aa:	2b03      	cmp	r3, #3
 80019ac:	f200 80f1 	bhi.w	8001b92 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019b4:	2b01      	cmp	r3, #1
 80019b6:	d123      	bne.n	8001a00 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80019b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019ba:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80019bc:	68f8      	ldr	r0, [r7, #12]
 80019be:	f000 fbed 	bl	800219c <I2C_WaitOnRXNEFlagUntilTimeout>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d001      	beq.n	80019cc <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80019c8:	2301      	movs	r3, #1
 80019ca:	e139      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	681b      	ldr	r3, [r3, #0]
 80019d0:	691a      	ldr	r2, [r3, #16]
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019de:	1c5a      	adds	r2, r3, #1
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80019e8:	3b01      	subs	r3, #1
 80019ea:	b29a      	uxth	r2, r3
 80019ec:	68fb      	ldr	r3, [r7, #12]
 80019ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80019f4:	b29b      	uxth	r3, r3
 80019f6:	3b01      	subs	r3, #1
 80019f8:	b29a      	uxth	r2, r3
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	855a      	strh	r2, [r3, #42]	; 0x2a
 80019fe:	e10b      	b.n	8001c18 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a04:	2b02      	cmp	r3, #2
 8001a06:	d14e      	bne.n	8001aa6 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001a08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001a0a:	9300      	str	r3, [sp, #0]
 8001a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001a0e:	2200      	movs	r2, #0
 8001a10:	4906      	ldr	r1, [pc, #24]	; (8001a2c <HAL_I2C_Master_Receive+0x22c>)
 8001a12:	68f8      	ldr	r0, [r7, #12]
 8001a14:	f000 fa6a 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001a18:	4603      	mov	r3, r0
 8001a1a:	2b00      	cmp	r3, #0
 8001a1c:	d008      	beq.n	8001a30 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8001a1e:	2301      	movs	r3, #1
 8001a20:	e10e      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
 8001a22:	bf00      	nop
 8001a24:	00100002 	.word	0x00100002
 8001a28:	ffff0000 	.word	0xffff0000
 8001a2c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	681a      	ldr	r2, [r3, #0]
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001a3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	691a      	ldr	r2, [r3, #16]
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a4a:	b2d2      	uxtb	r2, r2
 8001a4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a52:	1c5a      	adds	r2, r3, #1
 8001a54:	68fb      	ldr	r3, [r7, #12]
 8001a56:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a5c:	3b01      	subs	r3, #1
 8001a5e:	b29a      	uxth	r2, r3
 8001a60:	68fb      	ldr	r3, [r7, #12]
 8001a62:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a64:	68fb      	ldr	r3, [r7, #12]
 8001a66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	b29a      	uxth	r2, r3
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	68fb      	ldr	r3, [r7, #12]
 8001a7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a7c:	b2d2      	uxtb	r2, r2
 8001a7e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a84:	1c5a      	adds	r2, r3, #1
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001a8e:	3b01      	subs	r3, #1
 8001a90:	b29a      	uxth	r2, r3
 8001a92:	68fb      	ldr	r3, [r7, #12]
 8001a94:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001a9a:	b29b      	uxth	r3, r3
 8001a9c:	3b01      	subs	r3, #1
 8001a9e:	b29a      	uxth	r2, r3
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001aa4:	e0b8      	b.n	8001c18 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001aa8:	9300      	str	r3, [sp, #0]
 8001aaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001aac:	2200      	movs	r2, #0
 8001aae:	4966      	ldr	r1, [pc, #408]	; (8001c48 <HAL_I2C_Master_Receive+0x448>)
 8001ab0:	68f8      	ldr	r0, [r7, #12]
 8001ab2:	f000 fa1b 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d001      	beq.n	8001ac0 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8001abc:	2301      	movs	r3, #1
 8001abe:	e0bf      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ace:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	691a      	ldr	r2, [r3, #16]
 8001ad6:	68fb      	ldr	r3, [r7, #12]
 8001ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ada:	b2d2      	uxtb	r2, r2
 8001adc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	1c5a      	adds	r2, r3, #1
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001aec:	3b01      	subs	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001af8:	b29b      	uxth	r3, r3
 8001afa:	3b01      	subs	r3, #1
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8001b02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b04:	9300      	str	r3, [sp, #0]
 8001b06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001b08:	2200      	movs	r2, #0
 8001b0a:	494f      	ldr	r1, [pc, #316]	; (8001c48 <HAL_I2C_Master_Receive+0x448>)
 8001b0c:	68f8      	ldr	r0, [r7, #12]
 8001b0e:	f000 f9ed 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001b12:	4603      	mov	r3, r0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d001      	beq.n	8001b1c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e091      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001b1c:	68fb      	ldr	r3, [r7, #12]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	68fb      	ldr	r3, [r7, #12]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001b2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	691a      	ldr	r2, [r3, #16]
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b36:	b2d2      	uxtb	r2, r2
 8001b38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b3e:	1c5a      	adds	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b48:	3b01      	subs	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b54:	b29b      	uxth	r3, r3
 8001b56:	3b01      	subs	r3, #1
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001b5e:	68fb      	ldr	r3, [r7, #12]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	691a      	ldr	r2, [r3, #16]
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b70:	1c5a      	adds	r2, r3, #1
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001b76:	68fb      	ldr	r3, [r7, #12]
 8001b78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001b7a:	3b01      	subs	r3, #1
 8001b7c:	b29a      	uxth	r2, r3
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	68fb      	ldr	r3, [r7, #12]
 8001b8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8001b90:	e042      	b.n	8001c18 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001b96:	68f8      	ldr	r0, [r7, #12]
 8001b98:	f000 fb00 	bl	800219c <I2C_WaitOnRXNEFlagUntilTimeout>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d001      	beq.n	8001ba6 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e04c      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	691a      	ldr	r2, [r3, #16]
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	b2d2      	uxtb	r2, r2
 8001bb2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb8:	1c5a      	adds	r2, r3, #1
 8001bba:	68fb      	ldr	r3, [r7, #12]
 8001bbc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001bc2:	3b01      	subs	r3, #1
 8001bc4:	b29a      	uxth	r2, r3
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8001bca:	68fb      	ldr	r3, [r7, #12]
 8001bcc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001bce:	b29b      	uxth	r3, r3
 8001bd0:	3b01      	subs	r3, #1
 8001bd2:	b29a      	uxth	r2, r3
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	695b      	ldr	r3, [r3, #20]
 8001bde:	f003 0304 	and.w	r3, r3, #4
 8001be2:	2b04      	cmp	r3, #4
 8001be4:	d118      	bne.n	8001c18 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	691a      	ldr	r2, [r3, #16]
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf0:	b2d2      	uxtb	r2, r2
 8001bf2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bf8:	1c5a      	adds	r2, r3, #1
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c02:	3b01      	subs	r3, #1
 8001c04:	b29a      	uxth	r2, r3
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001c0e:	b29b      	uxth	r3, r3
 8001c10:	3b01      	subs	r3, #1
 8001c12:	b29a      	uxth	r2, r3
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8001c18:	68fb      	ldr	r3, [r7, #12]
 8001c1a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	f47f aec2 	bne.w	80019a6 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	2220      	movs	r2, #32
 8001c26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c2a:	68fb      	ldr	r3, [r7, #12]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001c32:	68fb      	ldr	r3, [r7, #12]
 8001c34:	2200      	movs	r2, #0
 8001c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001c3a:	2300      	movs	r3, #0
 8001c3c:	e000      	b.n	8001c40 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8001c3e:	2302      	movs	r3, #2
  }
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3728      	adds	r7, #40	; 0x28
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	00010004 	.word	0x00010004

08001c4c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b088      	sub	sp, #32
 8001c50:	af02      	add	r7, sp, #8
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	607a      	str	r2, [r7, #4]
 8001c56:	603b      	str	r3, [r7, #0]
 8001c58:	460b      	mov	r3, r1
 8001c5a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c60:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001c62:	697b      	ldr	r3, [r7, #20]
 8001c64:	2b08      	cmp	r3, #8
 8001c66:	d006      	beq.n	8001c76 <I2C_MasterRequestWrite+0x2a>
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d003      	beq.n	8001c76 <I2C_MasterRequestWrite+0x2a>
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001c74:	d108      	bne.n	8001c88 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	68fb      	ldr	r3, [r7, #12]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c84:	601a      	str	r2, [r3, #0]
 8001c86:	e00b      	b.n	8001ca0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c8c:	2b12      	cmp	r3, #18
 8001c8e:	d107      	bne.n	8001ca0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	681a      	ldr	r2, [r3, #0]
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	681b      	ldr	r3, [r3, #0]
 8001c9a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001c9e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	2200      	movs	r2, #0
 8001ca8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f91d 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d00d      	beq.n	8001cd4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001cc6:	d103      	bne.n	8001cd0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cce:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001cd0:	2303      	movs	r3, #3
 8001cd2:	e035      	b.n	8001d40 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001cdc:	d108      	bne.n	8001cf0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001cde:	897b      	ldrh	r3, [r7, #10]
 8001ce0:	b2db      	uxtb	r3, r3
 8001ce2:	461a      	mov	r2, r3
 8001ce4:	68fb      	ldr	r3, [r7, #12]
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001cec:	611a      	str	r2, [r3, #16]
 8001cee:	e01b      	b.n	8001d28 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	11db      	asrs	r3, r3, #7
 8001cf4:	b2db      	uxtb	r3, r3
 8001cf6:	f003 0306 	and.w	r3, r3, #6
 8001cfa:	b2db      	uxtb	r3, r3
 8001cfc:	f063 030f 	orn	r3, r3, #15
 8001d00:	b2da      	uxtb	r2, r3
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	490e      	ldr	r1, [pc, #56]	; (8001d48 <I2C_MasterRequestWrite+0xfc>)
 8001d0e:	68f8      	ldr	r0, [r7, #12]
 8001d10:	f000 f943 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d14:	4603      	mov	r3, r0
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	d001      	beq.n	8001d1e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001d1a:	2301      	movs	r3, #1
 8001d1c:	e010      	b.n	8001d40 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001d1e:	897b      	ldrh	r3, [r7, #10]
 8001d20:	b2da      	uxtb	r2, r3
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	4907      	ldr	r1, [pc, #28]	; (8001d4c <I2C_MasterRequestWrite+0x100>)
 8001d2e:	68f8      	ldr	r0, [r7, #12]
 8001d30:	f000 f933 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001d34:	4603      	mov	r3, r0
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d001      	beq.n	8001d3e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	3718      	adds	r7, #24
 8001d44:	46bd      	mov	sp, r7
 8001d46:	bd80      	pop	{r7, pc}
 8001d48:	00010008 	.word	0x00010008
 8001d4c:	00010002 	.word	0x00010002

08001d50 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b088      	sub	sp, #32
 8001d54:	af02      	add	r7, sp, #8
 8001d56:	60f8      	str	r0, [r7, #12]
 8001d58:	607a      	str	r2, [r7, #4]
 8001d5a:	603b      	str	r3, [r7, #0]
 8001d5c:	460b      	mov	r3, r1
 8001d5e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8001d74:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	2b08      	cmp	r3, #8
 8001d7a:	d006      	beq.n	8001d8a <I2C_MasterRequestRead+0x3a>
 8001d7c:	697b      	ldr	r3, [r7, #20]
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d003      	beq.n	8001d8a <I2C_MasterRequestRead+0x3a>
 8001d82:	697b      	ldr	r3, [r7, #20]
 8001d84:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001d88:	d108      	bne.n	8001d9c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001d8a:	68fb      	ldr	r3, [r7, #12]
 8001d8c:	681b      	ldr	r3, [r3, #0]
 8001d8e:	681a      	ldr	r2, [r3, #0]
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001d98:	601a      	str	r2, [r3, #0]
 8001d9a:	e00b      	b.n	8001db4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da0:	2b11      	cmp	r3, #17
 8001da2:	d107      	bne.n	8001db4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	681a      	ldr	r2, [r3, #0]
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001db2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	9300      	str	r3, [sp, #0]
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2200      	movs	r2, #0
 8001dbc:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001dc0:	68f8      	ldr	r0, [r7, #12]
 8001dc2:	f000 f893 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001dc6:	4603      	mov	r3, r0
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	d00d      	beq.n	8001de8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001dd6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001dda:	d103      	bne.n	8001de4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001de2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e079      	b.n	8001edc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	691b      	ldr	r3, [r3, #16]
 8001dec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001df0:	d108      	bne.n	8001e04 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8001df2:	897b      	ldrh	r3, [r7, #10]
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	f043 0301 	orr.w	r3, r3, #1
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	611a      	str	r2, [r3, #16]
 8001e02:	e05f      	b.n	8001ec4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001e04:	897b      	ldrh	r3, [r7, #10]
 8001e06:	11db      	asrs	r3, r3, #7
 8001e08:	b2db      	uxtb	r3, r3
 8001e0a:	f003 0306 	and.w	r3, r3, #6
 8001e0e:	b2db      	uxtb	r3, r3
 8001e10:	f063 030f 	orn	r3, r3, #15
 8001e14:	b2da      	uxtb	r2, r3
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	687a      	ldr	r2, [r7, #4]
 8001e20:	4930      	ldr	r1, [pc, #192]	; (8001ee4 <I2C_MasterRequestRead+0x194>)
 8001e22:	68f8      	ldr	r0, [r7, #12]
 8001e24:	f000 f8b9 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e28:	4603      	mov	r3, r0
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d001      	beq.n	8001e32 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8001e2e:	2301      	movs	r3, #1
 8001e30:	e054      	b.n	8001edc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001e32:	897b      	ldrh	r3, [r7, #10]
 8001e34:	b2da      	uxtb	r2, r3
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001e3c:	683b      	ldr	r3, [r7, #0]
 8001e3e:	687a      	ldr	r2, [r7, #4]
 8001e40:	4929      	ldr	r1, [pc, #164]	; (8001ee8 <I2C_MasterRequestRead+0x198>)
 8001e42:	68f8      	ldr	r0, [r7, #12]
 8001e44:	f000 f8a9 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e044      	b.n	8001edc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001e52:	2300      	movs	r3, #0
 8001e54:	613b      	str	r3, [r7, #16]
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	695b      	ldr	r3, [r3, #20]
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	699b      	ldr	r3, [r3, #24]
 8001e64:	613b      	str	r3, [r7, #16]
 8001e66:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	681a      	ldr	r2, [r3, #0]
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e76:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e78:	683b      	ldr	r3, [r7, #0]
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2200      	movs	r2, #0
 8001e80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e84:	68f8      	ldr	r0, [r7, #12]
 8001e86:	f000 f831 	bl	8001eec <I2C_WaitOnFlagUntilTimeout>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d00d      	beq.n	8001eac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001e9e:	d103      	bne.n	8001ea8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ea6:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8001ea8:	2303      	movs	r3, #3
 8001eaa:	e017      	b.n	8001edc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8001eac:	897b      	ldrh	r3, [r7, #10]
 8001eae:	11db      	asrs	r3, r3, #7
 8001eb0:	b2db      	uxtb	r3, r3
 8001eb2:	f003 0306 	and.w	r3, r3, #6
 8001eb6:	b2db      	uxtb	r3, r3
 8001eb8:	f063 030e 	orn	r3, r3, #14
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001ec4:	683b      	ldr	r3, [r7, #0]
 8001ec6:	687a      	ldr	r2, [r7, #4]
 8001ec8:	4907      	ldr	r1, [pc, #28]	; (8001ee8 <I2C_MasterRequestRead+0x198>)
 8001eca:	68f8      	ldr	r0, [r7, #12]
 8001ecc:	f000 f865 	bl	8001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e000      	b.n	8001edc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8001eda:	2300      	movs	r3, #0
}
 8001edc:	4618      	mov	r0, r3
 8001ede:	3718      	adds	r7, #24
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	00010008 	.word	0x00010008
 8001ee8:	00010002 	.word	0x00010002

08001eec <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b084      	sub	sp, #16
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	603b      	str	r3, [r7, #0]
 8001ef8:	4613      	mov	r3, r2
 8001efa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001efc:	e025      	b.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001efe:	683b      	ldr	r3, [r7, #0]
 8001f00:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f04:	d021      	beq.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f06:	f7fe ff53 	bl	8000db0 <HAL_GetTick>
 8001f0a:	4602      	mov	r2, r0
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	1ad3      	subs	r3, r2, r3
 8001f10:	683a      	ldr	r2, [r7, #0]
 8001f12:	429a      	cmp	r2, r3
 8001f14:	d302      	bcc.n	8001f1c <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d116      	bne.n	8001f4a <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	2200      	movs	r2, #0
 8001f20:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	2220      	movs	r2, #32
 8001f26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f2a:	68fb      	ldr	r3, [r7, #12]
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f043 0220 	orr.w	r2, r3, #32
 8001f3a:	68fb      	ldr	r3, [r7, #12]
 8001f3c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	2200      	movs	r2, #0
 8001f42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e023      	b.n	8001f92 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	0c1b      	lsrs	r3, r3, #16
 8001f4e:	b2db      	uxtb	r3, r3
 8001f50:	2b01      	cmp	r3, #1
 8001f52:	d10d      	bne.n	8001f70 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	43da      	mvns	r2, r3
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	b29b      	uxth	r3, r3
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	bf0c      	ite	eq
 8001f66:	2301      	moveq	r3, #1
 8001f68:	2300      	movne	r3, #0
 8001f6a:	b2db      	uxtb	r3, r3
 8001f6c:	461a      	mov	r2, r3
 8001f6e:	e00c      	b.n	8001f8a <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	699b      	ldr	r3, [r3, #24]
 8001f76:	43da      	mvns	r2, r3
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	4013      	ands	r3, r2
 8001f7c:	b29b      	uxth	r3, r3
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	bf0c      	ite	eq
 8001f82:	2301      	moveq	r3, #1
 8001f84:	2300      	movne	r3, #0
 8001f86:	b2db      	uxtb	r3, r3
 8001f88:	461a      	mov	r2, r3
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	429a      	cmp	r2, r3
 8001f8e:	d0b6      	beq.n	8001efe <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3710      	adds	r7, #16
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}

08001f9a <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001f9a:	b580      	push	{r7, lr}
 8001f9c:	b084      	sub	sp, #16
 8001f9e:	af00      	add	r7, sp, #0
 8001fa0:	60f8      	str	r0, [r7, #12]
 8001fa2:	60b9      	str	r1, [r7, #8]
 8001fa4:	607a      	str	r2, [r7, #4]
 8001fa6:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001fa8:	e051      	b.n	800204e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001faa:	68fb      	ldr	r3, [r7, #12]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	695b      	ldr	r3, [r3, #20]
 8001fb0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001fb4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001fb8:	d123      	bne.n	8002002 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001fc8:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001fd2:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	2200      	movs	r2, #0
 8001fd8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2220      	movs	r2, #32
 8001fde:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f043 0204 	orr.w	r2, r3, #4
 8001ff2:	68fb      	ldr	r3, [r7, #12]
 8001ff4:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	2200      	movs	r2, #0
 8001ffa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e046      	b.n	8002090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002008:	d021      	beq.n	800204e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800200a:	f7fe fed1 	bl	8000db0 <HAL_GetTick>
 800200e:	4602      	mov	r2, r0
 8002010:	683b      	ldr	r3, [r7, #0]
 8002012:	1ad3      	subs	r3, r2, r3
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	429a      	cmp	r2, r3
 8002018:	d302      	bcc.n	8002020 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	2b00      	cmp	r3, #0
 800201e:	d116      	bne.n	800204e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002020:	68fb      	ldr	r3, [r7, #12]
 8002022:	2200      	movs	r2, #0
 8002024:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	2220      	movs	r2, #32
 800202a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800203a:	f043 0220 	orr.w	r2, r3, #32
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2200      	movs	r2, #0
 8002046:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800204a:	2301      	movs	r3, #1
 800204c:	e020      	b.n	8002090 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800204e:	68bb      	ldr	r3, [r7, #8]
 8002050:	0c1b      	lsrs	r3, r3, #16
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b01      	cmp	r3, #1
 8002056:	d10c      	bne.n	8002072 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	695b      	ldr	r3, [r3, #20]
 800205e:	43da      	mvns	r2, r3
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	4013      	ands	r3, r2
 8002064:	b29b      	uxth	r3, r3
 8002066:	2b00      	cmp	r3, #0
 8002068:	bf14      	ite	ne
 800206a:	2301      	movne	r3, #1
 800206c:	2300      	moveq	r3, #0
 800206e:	b2db      	uxtb	r3, r3
 8002070:	e00b      	b.n	800208a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	699b      	ldr	r3, [r3, #24]
 8002078:	43da      	mvns	r2, r3
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	4013      	ands	r3, r2
 800207e:	b29b      	uxth	r3, r3
 8002080:	2b00      	cmp	r3, #0
 8002082:	bf14      	ite	ne
 8002084:	2301      	movne	r3, #1
 8002086:	2300      	moveq	r3, #0
 8002088:	b2db      	uxtb	r3, r3
 800208a:	2b00      	cmp	r3, #0
 800208c:	d18d      	bne.n	8001faa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	3710      	adds	r7, #16
 8002094:	46bd      	mov	sp, r7
 8002096:	bd80      	pop	{r7, pc}

08002098 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002098:	b580      	push	{r7, lr}
 800209a:	b084      	sub	sp, #16
 800209c:	af00      	add	r7, sp, #0
 800209e:	60f8      	str	r0, [r7, #12]
 80020a0:	60b9      	str	r1, [r7, #8]
 80020a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020a4:	e02d      	b.n	8002102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020a6:	68f8      	ldr	r0, [r7, #12]
 80020a8:	f000 f8ce 	bl	8002248 <I2C_IsAcknowledgeFailed>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e02d      	b.n	8002112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80020bc:	d021      	beq.n	8002102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80020be:	f7fe fe77 	bl	8000db0 <HAL_GetTick>
 80020c2:	4602      	mov	r2, r0
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	1ad3      	subs	r3, r2, r3
 80020c8:	68ba      	ldr	r2, [r7, #8]
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d302      	bcc.n	80020d4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d116      	bne.n	8002102 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	2200      	movs	r2, #0
 80020d8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	2220      	movs	r2, #32
 80020de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	2200      	movs	r2, #0
 80020e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f043 0220 	orr.w	r2, r3, #32
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	2200      	movs	r2, #0
 80020fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80020fe:	2301      	movs	r3, #1
 8002100:	e007      	b.n	8002112 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002102:	68fb      	ldr	r3, [r7, #12]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	695b      	ldr	r3, [r3, #20]
 8002108:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800210c:	2b80      	cmp	r3, #128	; 0x80
 800210e:	d1ca      	bne.n	80020a6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002110:	2300      	movs	r3, #0
}
 8002112:	4618      	mov	r0, r3
 8002114:	3710      	adds	r7, #16
 8002116:	46bd      	mov	sp, r7
 8002118:	bd80      	pop	{r7, pc}

0800211a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800211a:	b580      	push	{r7, lr}
 800211c:	b084      	sub	sp, #16
 800211e:	af00      	add	r7, sp, #0
 8002120:	60f8      	str	r0, [r7, #12]
 8002122:	60b9      	str	r1, [r7, #8]
 8002124:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002126:	e02d      	b.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002128:	68f8      	ldr	r0, [r7, #12]
 800212a:	f000 f88d 	bl	8002248 <I2C_IsAcknowledgeFailed>
 800212e:	4603      	mov	r3, r0
 8002130:	2b00      	cmp	r3, #0
 8002132:	d001      	beq.n	8002138 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002134:	2301      	movs	r3, #1
 8002136:	e02d      	b.n	8002194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002138:	68bb      	ldr	r3, [r7, #8]
 800213a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800213e:	d021      	beq.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002140:	f7fe fe36 	bl	8000db0 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	68ba      	ldr	r2, [r7, #8]
 800214c:	429a      	cmp	r2, r3
 800214e:	d302      	bcc.n	8002156 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002150:	68bb      	ldr	r3, [r7, #8]
 8002152:	2b00      	cmp	r3, #0
 8002154:	d116      	bne.n	8002184 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800215c:	68fb      	ldr	r3, [r7, #12]
 800215e:	2220      	movs	r2, #32
 8002160:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	2200      	movs	r2, #0
 8002168:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002170:	f043 0220 	orr.w	r2, r3, #32
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	2200      	movs	r2, #0
 800217c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002180:	2301      	movs	r3, #1
 8002182:	e007      	b.n	8002194 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	681b      	ldr	r3, [r3, #0]
 8002188:	695b      	ldr	r3, [r3, #20]
 800218a:	f003 0304 	and.w	r3, r3, #4
 800218e:	2b04      	cmp	r3, #4
 8002190:	d1ca      	bne.n	8002128 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002192:	2300      	movs	r3, #0
}
 8002194:	4618      	mov	r0, r3
 8002196:	3710      	adds	r7, #16
 8002198:	46bd      	mov	sp, r7
 800219a:	bd80      	pop	{r7, pc}

0800219c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	60f8      	str	r0, [r7, #12]
 80021a4:	60b9      	str	r1, [r7, #8]
 80021a6:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80021a8:	e042      	b.n	8002230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	695b      	ldr	r3, [r3, #20]
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b10      	cmp	r3, #16
 80021b6:	d119      	bne.n	80021ec <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	f06f 0210 	mvn.w	r2, #16
 80021c0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80021c2:	68fb      	ldr	r3, [r7, #12]
 80021c4:	2200      	movs	r2, #0
 80021c6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	2220      	movs	r2, #32
 80021cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	2200      	movs	r2, #0
 80021d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	2200      	movs	r2, #0
 80021e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e029      	b.n	8002240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80021ec:	f7fe fde0 	bl	8000db0 <HAL_GetTick>
 80021f0:	4602      	mov	r2, r0
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	1ad3      	subs	r3, r2, r3
 80021f6:	68ba      	ldr	r2, [r7, #8]
 80021f8:	429a      	cmp	r2, r3
 80021fa:	d302      	bcc.n	8002202 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d116      	bne.n	8002230 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	2220      	movs	r2, #32
 800220c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	2200      	movs	r2, #0
 8002214:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800221c:	f043 0220 	orr.w	r2, r3, #32
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	2200      	movs	r2, #0
 8002228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800222c:	2301      	movs	r3, #1
 800222e:	e007      	b.n	8002240 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	695b      	ldr	r3, [r3, #20]
 8002236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800223a:	2b40      	cmp	r3, #64	; 0x40
 800223c:	d1b5      	bne.n	80021aa <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800223e:	2300      	movs	r3, #0
}
 8002240:	4618      	mov	r0, r3
 8002242:	3710      	adds	r7, #16
 8002244:	46bd      	mov	sp, r7
 8002246:	bd80      	pop	{r7, pc}

08002248 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	695b      	ldr	r3, [r3, #20]
 8002256:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800225a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800225e:	d11b      	bne.n	8002298 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002268:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2200      	movs	r2, #0
 800226e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	2220      	movs	r2, #32
 8002274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	2200      	movs	r2, #0
 800227c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002284:	f043 0204 	orr.w	r2, r3, #4
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	2200      	movs	r2, #0
 8002290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	e000      	b.n	800229a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002298:	2300      	movs	r3, #0
}
 800229a:	4618      	mov	r0, r3
 800229c:	370c      	adds	r7, #12
 800229e:	46bd      	mov	sp, r7
 80022a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a4:	4770      	bx	lr
	...

080022a8 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	b08a      	sub	sp, #40	; 0x28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 80022b0:	2300      	movs	r3, #0
 80022b2:	613b      	str	r3, [r7, #16]
 80022b4:	4b23      	ldr	r3, [pc, #140]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b8:	4a22      	ldr	r2, [pc, #136]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022ba:	f043 0308 	orr.w	r3, r3, #8
 80022be:	6313      	str	r3, [r2, #48]	; 0x30
 80022c0:	4b20      	ldr	r3, [pc, #128]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	613b      	str	r3, [r7, #16]
 80022ca:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 80022cc:	2300      	movs	r3, #0
 80022ce:	60fb      	str	r3, [r7, #12]
 80022d0:	4b1c      	ldr	r3, [pc, #112]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d4:	4a1b      	ldr	r2, [pc, #108]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022d6:	f043 0308 	orr.w	r3, r3, #8
 80022da:	6313      	str	r3, [r2, #48]	; 0x30
 80022dc:	4b19      	ldr	r3, [pc, #100]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022e0:	f003 0308 	and.w	r3, r3, #8
 80022e4:	60fb      	str	r3, [r7, #12]
 80022e6:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	60bb      	str	r3, [r7, #8]
 80022ec:	4b15      	ldr	r3, [pc, #84]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f0:	4a14      	ldr	r2, [pc, #80]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f6:	6413      	str	r3, [r2, #64]	; 0x40
 80022f8:	4b12      	ldr	r3, [pc, #72]	; (8002344 <HAL_UART_MspInit+0x9c>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002300:	60bb      	str	r3, [r7, #8]
 8002302:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002304:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002308:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 800230a:	2302      	movs	r3, #2
 800230c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 800230e:	2301      	movs	r3, #1
 8002310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002312:	2303      	movs	r3, #3
 8002314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002316:	2307      	movs	r3, #7
 8002318:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 800231a:	f107 0314 	add.w	r3, r7, #20
 800231e:	4619      	mov	r1, r3
 8002320:	4809      	ldr	r0, [pc, #36]	; (8002348 <HAL_UART_MspInit+0xa0>)
 8002322:	f7fe fe5b 	bl	8000fdc <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002326:	f44f 7300 	mov.w	r3, #512	; 0x200
 800232a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 800232c:	2307      	movs	r3, #7
 800232e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002330:	f107 0314 	add.w	r3, r7, #20
 8002334:	4619      	mov	r1, r3
 8002336:	4804      	ldr	r0, [pc, #16]	; (8002348 <HAL_UART_MspInit+0xa0>)
 8002338:	f7fe fe50 	bl	8000fdc <HAL_GPIO_Init>
}
 800233c:	bf00      	nop
 800233e:	3728      	adds	r7, #40	; 0x28
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	40023800 	.word	0x40023800
 8002348:	40020c00 	.word	0x40020c00

0800234c <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0

}
 8002350:	bf00      	nop
 8002352:	46bd      	mov	sp, r7
 8002354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002358:	4770      	bx	lr
	...

0800235c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b082      	sub	sp, #8
 8002360:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002362:	2300      	movs	r3, #0
 8002364:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002366:	2300      	movs	r3, #0
 8002368:	603b      	str	r3, [r7, #0]
 800236a:	4b20      	ldr	r3, [pc, #128]	; (80023ec <HAL_PWREx_EnableOverDrive+0x90>)
 800236c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800236e:	4a1f      	ldr	r2, [pc, #124]	; (80023ec <HAL_PWREx_EnableOverDrive+0x90>)
 8002370:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002374:	6413      	str	r3, [r2, #64]	; 0x40
 8002376:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <HAL_PWREx_EnableOverDrive+0x90>)
 8002378:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800237a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800237e:	603b      	str	r3, [r7, #0]
 8002380:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <HAL_PWREx_EnableOverDrive+0x94>)
 8002384:	2201      	movs	r2, #1
 8002386:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002388:	f7fe fd12 	bl	8000db0 <HAL_GetTick>
 800238c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800238e:	e009      	b.n	80023a4 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002390:	f7fe fd0e 	bl	8000db0 <HAL_GetTick>
 8002394:	4602      	mov	r2, r0
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800239e:	d901      	bls.n	80023a4 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80023a0:	2303      	movs	r3, #3
 80023a2:	e01f      	b.n	80023e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80023a6:	685b      	ldr	r3, [r3, #4]
 80023a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023ac:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80023b0:	d1ee      	bne.n	8002390 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023b2:	4b11      	ldr	r3, [pc, #68]	; (80023f8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b4:	2201      	movs	r2, #1
 80023b6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b8:	f7fe fcfa 	bl	8000db0 <HAL_GetTick>
 80023bc:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023be:	e009      	b.n	80023d4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023c0:	f7fe fcf6 	bl	8000db0 <HAL_GetTick>
 80023c4:	4602      	mov	r2, r0
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	1ad3      	subs	r3, r2, r3
 80023ca:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80023ce:	d901      	bls.n	80023d4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023d0:	2303      	movs	r3, #3
 80023d2:	e007      	b.n	80023e4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d4:	4b07      	ldr	r3, [pc, #28]	; (80023f4 <HAL_PWREx_EnableOverDrive+0x98>)
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023dc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80023e0:	d1ee      	bne.n	80023c0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023e2:	2300      	movs	r3, #0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	3708      	adds	r7, #8
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd80      	pop	{r7, pc}
 80023ec:	40023800 	.word	0x40023800
 80023f0:	420e0040 	.word	0x420e0040
 80023f4:	40007000 	.word	0x40007000
 80023f8:	420e0044 	.word	0x420e0044

080023fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b086      	sub	sp, #24
 8002400:	af00      	add	r7, sp, #0
 8002402:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	2b00      	cmp	r3, #0
 8002408:	d101      	bne.n	800240e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	e267      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	2b00      	cmp	r3, #0
 8002418:	d075      	beq.n	8002506 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800241a:	4b88      	ldr	r3, [pc, #544]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800241c:	689b      	ldr	r3, [r3, #8]
 800241e:	f003 030c 	and.w	r3, r3, #12
 8002422:	2b04      	cmp	r3, #4
 8002424:	d00c      	beq.n	8002440 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002426:	4b85      	ldr	r3, [pc, #532]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800242e:	2b08      	cmp	r3, #8
 8002430:	d112      	bne.n	8002458 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002432:	4b82      	ldr	r3, [pc, #520]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800243a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800243e:	d10b      	bne.n	8002458 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002440:	4b7e      	ldr	r3, [pc, #504]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d05b      	beq.n	8002504 <HAL_RCC_OscConfig+0x108>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d157      	bne.n	8002504 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e242      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	685b      	ldr	r3, [r3, #4]
 800245c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002460:	d106      	bne.n	8002470 <HAL_RCC_OscConfig+0x74>
 8002462:	4b76      	ldr	r3, [pc, #472]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002464:	681b      	ldr	r3, [r3, #0]
 8002466:	4a75      	ldr	r2, [pc, #468]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002468:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800246c:	6013      	str	r3, [r2, #0]
 800246e:	e01d      	b.n	80024ac <HAL_RCC_OscConfig+0xb0>
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002478:	d10c      	bne.n	8002494 <HAL_RCC_OscConfig+0x98>
 800247a:	4b70      	ldr	r3, [pc, #448]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4a6f      	ldr	r2, [pc, #444]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002480:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002484:	6013      	str	r3, [r2, #0]
 8002486:	4b6d      	ldr	r3, [pc, #436]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a6c      	ldr	r2, [pc, #432]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800248c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002490:	6013      	str	r3, [r2, #0]
 8002492:	e00b      	b.n	80024ac <HAL_RCC_OscConfig+0xb0>
 8002494:	4b69      	ldr	r3, [pc, #420]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a68      	ldr	r2, [pc, #416]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800249a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800249e:	6013      	str	r3, [r2, #0]
 80024a0:	4b66      	ldr	r3, [pc, #408]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a65      	ldr	r2, [pc, #404]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80024a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80024aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	685b      	ldr	r3, [r3, #4]
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	d013      	beq.n	80024dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b4:	f7fe fc7c 	bl	8000db0 <HAL_GetTick>
 80024b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ba:	e008      	b.n	80024ce <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024bc:	f7fe fc78 	bl	8000db0 <HAL_GetTick>
 80024c0:	4602      	mov	r2, r0
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	1ad3      	subs	r3, r2, r3
 80024c6:	2b64      	cmp	r3, #100	; 0x64
 80024c8:	d901      	bls.n	80024ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024ca:	2303      	movs	r3, #3
 80024cc:	e207      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ce:	4b5b      	ldr	r3, [pc, #364]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d0f0      	beq.n	80024bc <HAL_RCC_OscConfig+0xc0>
 80024da:	e014      	b.n	8002506 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024dc:	f7fe fc68 	bl	8000db0 <HAL_GetTick>
 80024e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024e2:	e008      	b.n	80024f6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80024e4:	f7fe fc64 	bl	8000db0 <HAL_GetTick>
 80024e8:	4602      	mov	r2, r0
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	1ad3      	subs	r3, r2, r3
 80024ee:	2b64      	cmp	r3, #100	; 0x64
 80024f0:	d901      	bls.n	80024f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024f2:	2303      	movs	r3, #3
 80024f4:	e1f3      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f6:	4b51      	ldr	r3, [pc, #324]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d1f0      	bne.n	80024e4 <HAL_RCC_OscConfig+0xe8>
 8002502:	e000      	b.n	8002506 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002504:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	f003 0302 	and.w	r3, r3, #2
 800250e:	2b00      	cmp	r3, #0
 8002510:	d063      	beq.n	80025da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002512:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	f003 030c 	and.w	r3, r3, #12
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00b      	beq.n	8002536 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251e:	4b47      	ldr	r3, [pc, #284]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002520:	689b      	ldr	r3, [r3, #8]
 8002522:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002526:	2b08      	cmp	r3, #8
 8002528:	d11c      	bne.n	8002564 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800252a:	4b44      	ldr	r3, [pc, #272]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d116      	bne.n	8002564 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002536:	4b41      	ldr	r3, [pc, #260]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f003 0302 	and.w	r3, r3, #2
 800253e:	2b00      	cmp	r3, #0
 8002540:	d005      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	68db      	ldr	r3, [r3, #12]
 8002546:	2b01      	cmp	r3, #1
 8002548:	d001      	beq.n	800254e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800254a:	2301      	movs	r3, #1
 800254c:	e1c7      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254e:	4b3b      	ldr	r3, [pc, #236]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	691b      	ldr	r3, [r3, #16]
 800255a:	00db      	lsls	r3, r3, #3
 800255c:	4937      	ldr	r1, [pc, #220]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800255e:	4313      	orrs	r3, r2
 8002560:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002562:	e03a      	b.n	80025da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	68db      	ldr	r3, [r3, #12]
 8002568:	2b00      	cmp	r3, #0
 800256a:	d020      	beq.n	80025ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800256c:	4b34      	ldr	r3, [pc, #208]	; (8002640 <HAL_RCC_OscConfig+0x244>)
 800256e:	2201      	movs	r2, #1
 8002570:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002572:	f7fe fc1d 	bl	8000db0 <HAL_GetTick>
 8002576:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002578:	e008      	b.n	800258c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800257a:	f7fe fc19 	bl	8000db0 <HAL_GetTick>
 800257e:	4602      	mov	r2, r0
 8002580:	693b      	ldr	r3, [r7, #16]
 8002582:	1ad3      	subs	r3, r2, r3
 8002584:	2b02      	cmp	r3, #2
 8002586:	d901      	bls.n	800258c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002588:	2303      	movs	r3, #3
 800258a:	e1a8      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800258c:	4b2b      	ldr	r3, [pc, #172]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	f003 0302 	and.w	r3, r3, #2
 8002594:	2b00      	cmp	r3, #0
 8002596:	d0f0      	beq.n	800257a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002598:	4b28      	ldr	r3, [pc, #160]	; (800263c <HAL_RCC_OscConfig+0x240>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	691b      	ldr	r3, [r3, #16]
 80025a4:	00db      	lsls	r3, r3, #3
 80025a6:	4925      	ldr	r1, [pc, #148]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80025a8:	4313      	orrs	r3, r2
 80025aa:	600b      	str	r3, [r1, #0]
 80025ac:	e015      	b.n	80025da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025ae:	4b24      	ldr	r3, [pc, #144]	; (8002640 <HAL_RCC_OscConfig+0x244>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b4:	f7fe fbfc 	bl	8000db0 <HAL_GetTick>
 80025b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ba:	e008      	b.n	80025ce <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80025bc:	f7fe fbf8 	bl	8000db0 <HAL_GetTick>
 80025c0:	4602      	mov	r2, r0
 80025c2:	693b      	ldr	r3, [r7, #16]
 80025c4:	1ad3      	subs	r3, r2, r3
 80025c6:	2b02      	cmp	r3, #2
 80025c8:	d901      	bls.n	80025ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025ca:	2303      	movs	r3, #3
 80025cc:	e187      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ce:	4b1b      	ldr	r3, [pc, #108]	; (800263c <HAL_RCC_OscConfig+0x240>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f003 0302 	and.w	r3, r3, #2
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d1f0      	bne.n	80025bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 0308 	and.w	r3, r3, #8
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d036      	beq.n	8002654 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	695b      	ldr	r3, [r3, #20]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d016      	beq.n	800261c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <HAL_RCC_OscConfig+0x248>)
 80025f0:	2201      	movs	r2, #1
 80025f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f4:	f7fe fbdc 	bl	8000db0 <HAL_GetTick>
 80025f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025fa:	e008      	b.n	800260e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80025fc:	f7fe fbd8 	bl	8000db0 <HAL_GetTick>
 8002600:	4602      	mov	r2, r0
 8002602:	693b      	ldr	r3, [r7, #16]
 8002604:	1ad3      	subs	r3, r2, r3
 8002606:	2b02      	cmp	r3, #2
 8002608:	d901      	bls.n	800260e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800260a:	2303      	movs	r3, #3
 800260c:	e167      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <HAL_RCC_OscConfig+0x240>)
 8002610:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002612:	f003 0302 	and.w	r3, r3, #2
 8002616:	2b00      	cmp	r3, #0
 8002618:	d0f0      	beq.n	80025fc <HAL_RCC_OscConfig+0x200>
 800261a:	e01b      	b.n	8002654 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800261c:	4b09      	ldr	r3, [pc, #36]	; (8002644 <HAL_RCC_OscConfig+0x248>)
 800261e:	2200      	movs	r2, #0
 8002620:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002622:	f7fe fbc5 	bl	8000db0 <HAL_GetTick>
 8002626:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002628:	e00e      	b.n	8002648 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800262a:	f7fe fbc1 	bl	8000db0 <HAL_GetTick>
 800262e:	4602      	mov	r2, r0
 8002630:	693b      	ldr	r3, [r7, #16]
 8002632:	1ad3      	subs	r3, r2, r3
 8002634:	2b02      	cmp	r3, #2
 8002636:	d907      	bls.n	8002648 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002638:	2303      	movs	r3, #3
 800263a:	e150      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
 800263c:	40023800 	.word	0x40023800
 8002640:	42470000 	.word	0x42470000
 8002644:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002648:	4b88      	ldr	r3, [pc, #544]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800264a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800264c:	f003 0302 	and.w	r3, r3, #2
 8002650:	2b00      	cmp	r3, #0
 8002652:	d1ea      	bne.n	800262a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	f003 0304 	and.w	r3, r3, #4
 800265c:	2b00      	cmp	r3, #0
 800265e:	f000 8097 	beq.w	8002790 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002662:	2300      	movs	r3, #0
 8002664:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002666:	4b81      	ldr	r3, [pc, #516]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002668:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800266a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d10f      	bne.n	8002692 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002672:	2300      	movs	r3, #0
 8002674:	60bb      	str	r3, [r7, #8]
 8002676:	4b7d      	ldr	r3, [pc, #500]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267a:	4a7c      	ldr	r2, [pc, #496]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800267c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002680:	6413      	str	r3, [r2, #64]	; 0x40
 8002682:	4b7a      	ldr	r3, [pc, #488]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002686:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800268a:	60bb      	str	r3, [r7, #8]
 800268c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268e:	2301      	movs	r3, #1
 8002690:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002692:	4b77      	ldr	r3, [pc, #476]	; (8002870 <HAL_RCC_OscConfig+0x474>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800269a:	2b00      	cmp	r3, #0
 800269c:	d118      	bne.n	80026d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269e:	4b74      	ldr	r3, [pc, #464]	; (8002870 <HAL_RCC_OscConfig+0x474>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4a73      	ldr	r2, [pc, #460]	; (8002870 <HAL_RCC_OscConfig+0x474>)
 80026a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026aa:	f7fe fb81 	bl	8000db0 <HAL_GetTick>
 80026ae:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026b0:	e008      	b.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026b2:	f7fe fb7d 	bl	8000db0 <HAL_GetTick>
 80026b6:	4602      	mov	r2, r0
 80026b8:	693b      	ldr	r3, [r7, #16]
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	2b02      	cmp	r3, #2
 80026be:	d901      	bls.n	80026c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e10c      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c4:	4b6a      	ldr	r3, [pc, #424]	; (8002870 <HAL_RCC_OscConfig+0x474>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0f0      	beq.n	80026b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	689b      	ldr	r3, [r3, #8]
 80026d4:	2b01      	cmp	r3, #1
 80026d6:	d106      	bne.n	80026e6 <HAL_RCC_OscConfig+0x2ea>
 80026d8:	4b64      	ldr	r3, [pc, #400]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026dc:	4a63      	ldr	r2, [pc, #396]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026de:	f043 0301 	orr.w	r3, r3, #1
 80026e2:	6713      	str	r3, [r2, #112]	; 0x70
 80026e4:	e01c      	b.n	8002720 <HAL_RCC_OscConfig+0x324>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	2b05      	cmp	r3, #5
 80026ec:	d10c      	bne.n	8002708 <HAL_RCC_OscConfig+0x30c>
 80026ee:	4b5f      	ldr	r3, [pc, #380]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f2:	4a5e      	ldr	r2, [pc, #376]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026f4:	f043 0304 	orr.w	r3, r3, #4
 80026f8:	6713      	str	r3, [r2, #112]	; 0x70
 80026fa:	4b5c      	ldr	r3, [pc, #368]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80026fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026fe:	4a5b      	ldr	r2, [pc, #364]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002700:	f043 0301 	orr.w	r3, r3, #1
 8002704:	6713      	str	r3, [r2, #112]	; 0x70
 8002706:	e00b      	b.n	8002720 <HAL_RCC_OscConfig+0x324>
 8002708:	4b58      	ldr	r3, [pc, #352]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800270a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800270c:	4a57      	ldr	r2, [pc, #348]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800270e:	f023 0301 	bic.w	r3, r3, #1
 8002712:	6713      	str	r3, [r2, #112]	; 0x70
 8002714:	4b55      	ldr	r3, [pc, #340]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002718:	4a54      	ldr	r2, [pc, #336]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800271a:	f023 0304 	bic.w	r3, r3, #4
 800271e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	689b      	ldr	r3, [r3, #8]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d015      	beq.n	8002754 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002728:	f7fe fb42 	bl	8000db0 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272e:	e00a      	b.n	8002746 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002730:	f7fe fb3e 	bl	8000db0 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	f241 3288 	movw	r2, #5000	; 0x1388
 800273e:	4293      	cmp	r3, r2
 8002740:	d901      	bls.n	8002746 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002742:	2303      	movs	r3, #3
 8002744:	e0cb      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002746:	4b49      	ldr	r3, [pc, #292]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002748:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800274a:	f003 0302 	and.w	r3, r3, #2
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ee      	beq.n	8002730 <HAL_RCC_OscConfig+0x334>
 8002752:	e014      	b.n	800277e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002754:	f7fe fb2c 	bl	8000db0 <HAL_GetTick>
 8002758:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800275a:	e00a      	b.n	8002772 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800275c:	f7fe fb28 	bl	8000db0 <HAL_GetTick>
 8002760:	4602      	mov	r2, r0
 8002762:	693b      	ldr	r3, [r7, #16]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	f241 3288 	movw	r2, #5000	; 0x1388
 800276a:	4293      	cmp	r3, r2
 800276c:	d901      	bls.n	8002772 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276e:	2303      	movs	r3, #3
 8002770:	e0b5      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002772:	4b3e      	ldr	r3, [pc, #248]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002776:	f003 0302 	and.w	r3, r3, #2
 800277a:	2b00      	cmp	r3, #0
 800277c:	d1ee      	bne.n	800275c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800277e:	7dfb      	ldrb	r3, [r7, #23]
 8002780:	2b01      	cmp	r3, #1
 8002782:	d105      	bne.n	8002790 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002784:	4b39      	ldr	r3, [pc, #228]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002786:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002788:	4a38      	ldr	r2, [pc, #224]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800278a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800278e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	699b      	ldr	r3, [r3, #24]
 8002794:	2b00      	cmp	r3, #0
 8002796:	f000 80a1 	beq.w	80028dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800279a:	4b34      	ldr	r3, [pc, #208]	; (800286c <HAL_RCC_OscConfig+0x470>)
 800279c:	689b      	ldr	r3, [r3, #8]
 800279e:	f003 030c 	and.w	r3, r3, #12
 80027a2:	2b08      	cmp	r3, #8
 80027a4:	d05c      	beq.n	8002860 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	699b      	ldr	r3, [r3, #24]
 80027aa:	2b02      	cmp	r3, #2
 80027ac:	d141      	bne.n	8002832 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027ae:	4b31      	ldr	r3, [pc, #196]	; (8002874 <HAL_RCC_OscConfig+0x478>)
 80027b0:	2200      	movs	r2, #0
 80027b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b4:	f7fe fafc 	bl	8000db0 <HAL_GetTick>
 80027b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ba:	e008      	b.n	80027ce <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80027bc:	f7fe faf8 	bl	8000db0 <HAL_GetTick>
 80027c0:	4602      	mov	r2, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1ad3      	subs	r3, r2, r3
 80027c6:	2b02      	cmp	r3, #2
 80027c8:	d901      	bls.n	80027ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027ca:	2303      	movs	r3, #3
 80027cc:	e087      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ce:	4b27      	ldr	r3, [pc, #156]	; (800286c <HAL_RCC_OscConfig+0x470>)
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d1f0      	bne.n	80027bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027e8:	019b      	lsls	r3, r3, #6
 80027ea:	431a      	orrs	r2, r3
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027f0:	085b      	lsrs	r3, r3, #1
 80027f2:	3b01      	subs	r3, #1
 80027f4:	041b      	lsls	r3, r3, #16
 80027f6:	431a      	orrs	r2, r3
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80027fc:	061b      	lsls	r3, r3, #24
 80027fe:	491b      	ldr	r1, [pc, #108]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002800:	4313      	orrs	r3, r2
 8002802:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002804:	4b1b      	ldr	r3, [pc, #108]	; (8002874 <HAL_RCC_OscConfig+0x478>)
 8002806:	2201      	movs	r2, #1
 8002808:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800280a:	f7fe fad1 	bl	8000db0 <HAL_GetTick>
 800280e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002810:	e008      	b.n	8002824 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002812:	f7fe facd 	bl	8000db0 <HAL_GetTick>
 8002816:	4602      	mov	r2, r0
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	1ad3      	subs	r3, r2, r3
 800281c:	2b02      	cmp	r3, #2
 800281e:	d901      	bls.n	8002824 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002820:	2303      	movs	r3, #3
 8002822:	e05c      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002824:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d0f0      	beq.n	8002812 <HAL_RCC_OscConfig+0x416>
 8002830:	e054      	b.n	80028dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002832:	4b10      	ldr	r3, [pc, #64]	; (8002874 <HAL_RCC_OscConfig+0x478>)
 8002834:	2200      	movs	r2, #0
 8002836:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002838:	f7fe faba 	bl	8000db0 <HAL_GetTick>
 800283c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283e:	e008      	b.n	8002852 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002840:	f7fe fab6 	bl	8000db0 <HAL_GetTick>
 8002844:	4602      	mov	r2, r0
 8002846:	693b      	ldr	r3, [r7, #16]
 8002848:	1ad3      	subs	r3, r2, r3
 800284a:	2b02      	cmp	r3, #2
 800284c:	d901      	bls.n	8002852 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800284e:	2303      	movs	r3, #3
 8002850:	e045      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002852:	4b06      	ldr	r3, [pc, #24]	; (800286c <HAL_RCC_OscConfig+0x470>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800285a:	2b00      	cmp	r3, #0
 800285c:	d1f0      	bne.n	8002840 <HAL_RCC_OscConfig+0x444>
 800285e:	e03d      	b.n	80028dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	699b      	ldr	r3, [r3, #24]
 8002864:	2b01      	cmp	r3, #1
 8002866:	d107      	bne.n	8002878 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002868:	2301      	movs	r3, #1
 800286a:	e038      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
 800286c:	40023800 	.word	0x40023800
 8002870:	40007000 	.word	0x40007000
 8002874:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002878:	4b1b      	ldr	r3, [pc, #108]	; (80028e8 <HAL_RCC_OscConfig+0x4ec>)
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	699b      	ldr	r3, [r3, #24]
 8002882:	2b01      	cmp	r3, #1
 8002884:	d028      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002890:	429a      	cmp	r2, r3
 8002892:	d121      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800289a:	687b      	ldr	r3, [r7, #4]
 800289c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289e:	429a      	cmp	r2, r3
 80028a0:	d11a      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028a2:	68fa      	ldr	r2, [r7, #12]
 80028a4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80028a8:	4013      	ands	r3, r2
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80028ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028b0:	4293      	cmp	r3, r2
 80028b2:	d111      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80028be:	085b      	lsrs	r3, r3, #1
 80028c0:	3b01      	subs	r3, #1
 80028c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d107      	bne.n	80028d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d4:	429a      	cmp	r2, r3
 80028d6:	d001      	beq.n	80028dc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80028d8:	2301      	movs	r3, #1
 80028da:	e000      	b.n	80028de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	3718      	adds	r7, #24
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800

080028ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	b084      	sub	sp, #16
 80028f0:	af00      	add	r7, sp, #0
 80028f2:	6078      	str	r0, [r7, #4]
 80028f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	d101      	bne.n	8002900 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028fc:	2301      	movs	r3, #1
 80028fe:	e0cc      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002900:	4b68      	ldr	r3, [pc, #416]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 030f 	and.w	r3, r3, #15
 8002908:	683a      	ldr	r2, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	d90c      	bls.n	8002928 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290e:	4b65      	ldr	r3, [pc, #404]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002910:	683a      	ldr	r2, [r7, #0]
 8002912:	b2d2      	uxtb	r2, r2
 8002914:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002916:	4b63      	ldr	r3, [pc, #396]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 030f 	and.w	r3, r3, #15
 800291e:	683a      	ldr	r2, [r7, #0]
 8002920:	429a      	cmp	r2, r3
 8002922:	d001      	beq.n	8002928 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e0b8      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d020      	beq.n	8002976 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	d005      	beq.n	800294c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002940:	4b59      	ldr	r3, [pc, #356]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	4a58      	ldr	r2, [pc, #352]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002946:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800294a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	f003 0308 	and.w	r3, r3, #8
 8002954:	2b00      	cmp	r3, #0
 8002956:	d005      	beq.n	8002964 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002958:	4b53      	ldr	r3, [pc, #332]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	689b      	ldr	r3, [r3, #8]
 800295c:	4a52      	ldr	r2, [pc, #328]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002962:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002964:	4b50      	ldr	r3, [pc, #320]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002966:	689b      	ldr	r3, [r3, #8]
 8002968:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	689b      	ldr	r3, [r3, #8]
 8002970:	494d      	ldr	r1, [pc, #308]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002972:	4313      	orrs	r3, r2
 8002974:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	2b00      	cmp	r3, #0
 8002980:	d044      	beq.n	8002a0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b01      	cmp	r3, #1
 8002988:	d107      	bne.n	800299a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	4b47      	ldr	r3, [pc, #284]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d119      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002996:	2301      	movs	r3, #1
 8002998:	e07f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	2b02      	cmp	r3, #2
 80029a0:	d003      	beq.n	80029aa <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d107      	bne.n	80029ba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029aa:	4b3f      	ldr	r3, [pc, #252]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d109      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b6:	2301      	movs	r3, #1
 80029b8:	e06f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029ba:	4b3b      	ldr	r3, [pc, #236]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f003 0302 	and.w	r3, r3, #2
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d101      	bne.n	80029ca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c6:	2301      	movs	r3, #1
 80029c8:	e067      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029ca:	4b37      	ldr	r3, [pc, #220]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f023 0203 	bic.w	r2, r3, #3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	685b      	ldr	r3, [r3, #4]
 80029d6:	4934      	ldr	r1, [pc, #208]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029dc:	f7fe f9e8 	bl	8000db0 <HAL_GetTick>
 80029e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029e2:	e00a      	b.n	80029fa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e4:	f7fe f9e4 	bl	8000db0 <HAL_GetTick>
 80029e8:	4602      	mov	r2, r0
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	1ad3      	subs	r3, r2, r3
 80029ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d901      	bls.n	80029fa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f6:	2303      	movs	r3, #3
 80029f8:	e04f      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029fa:	4b2b      	ldr	r3, [pc, #172]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 80029fc:	689b      	ldr	r3, [r3, #8]
 80029fe:	f003 020c 	and.w	r2, r3, #12
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	685b      	ldr	r3, [r3, #4]
 8002a06:	009b      	lsls	r3, r3, #2
 8002a08:	429a      	cmp	r2, r3
 8002a0a:	d1eb      	bne.n	80029e4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002a0c:	4b25      	ldr	r3, [pc, #148]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0e:	681b      	ldr	r3, [r3, #0]
 8002a10:	f003 030f 	and.w	r3, r3, #15
 8002a14:	683a      	ldr	r2, [r7, #0]
 8002a16:	429a      	cmp	r2, r3
 8002a18:	d20c      	bcs.n	8002a34 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a1a:	4b22      	ldr	r3, [pc, #136]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a1c:	683a      	ldr	r2, [r7, #0]
 8002a1e:	b2d2      	uxtb	r2, r2
 8002a20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a22:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_RCC_ClockConfig+0x1b8>)
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	f003 030f 	and.w	r3, r3, #15
 8002a2a:	683a      	ldr	r2, [r7, #0]
 8002a2c:	429a      	cmp	r2, r3
 8002a2e:	d001      	beq.n	8002a34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a30:	2301      	movs	r3, #1
 8002a32:	e032      	b.n	8002a9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0304 	and.w	r3, r3, #4
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d008      	beq.n	8002a52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a40:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a42:	689b      	ldr	r3, [r3, #8]
 8002a44:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	4916      	ldr	r1, [pc, #88]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4e:	4313      	orrs	r3, r2
 8002a50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	f003 0308 	and.w	r3, r3, #8
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d009      	beq.n	8002a72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5e:	4b12      	ldr	r3, [pc, #72]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a60:	689b      	ldr	r3, [r3, #8]
 8002a62:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	00db      	lsls	r3, r3, #3
 8002a6c:	490e      	ldr	r1, [pc, #56]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6e:	4313      	orrs	r3, r2
 8002a70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002a72:	f000 f821 	bl	8002ab8 <HAL_RCC_GetSysClockFreq>
 8002a76:	4602      	mov	r2, r0
 8002a78:	4b0b      	ldr	r3, [pc, #44]	; (8002aa8 <HAL_RCC_ClockConfig+0x1bc>)
 8002a7a:	689b      	ldr	r3, [r3, #8]
 8002a7c:	091b      	lsrs	r3, r3, #4
 8002a7e:	f003 030f 	and.w	r3, r3, #15
 8002a82:	490a      	ldr	r1, [pc, #40]	; (8002aac <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	5ccb      	ldrb	r3, [r1, r3]
 8002a86:	fa22 f303 	lsr.w	r3, r2, r3
 8002a8a:	4a09      	ldr	r2, [pc, #36]	; (8002ab0 <HAL_RCC_ClockConfig+0x1c4>)
 8002a8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002a8e:	4b09      	ldr	r3, [pc, #36]	; (8002ab4 <HAL_RCC_ClockConfig+0x1c8>)
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7fe f948 	bl	8000d28 <HAL_InitTick>

  return HAL_OK;
 8002a98:	2300      	movs	r3, #0
}
 8002a9a:	4618      	mov	r0, r3
 8002a9c:	3710      	adds	r7, #16
 8002a9e:	46bd      	mov	sp, r7
 8002aa0:	bd80      	pop	{r7, pc}
 8002aa2:	bf00      	nop
 8002aa4:	40023c00 	.word	0x40023c00
 8002aa8:	40023800 	.word	0x40023800
 8002aac:	08003c78 	.word	0x08003c78
 8002ab0:	20000048 	.word	0x20000048
 8002ab4:	2000004c 	.word	0x2000004c

08002ab8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002abc:	b094      	sub	sp, #80	; 0x50
 8002abe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	647b      	str	r3, [r7, #68]	; 0x44
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ac8:	2300      	movs	r3, #0
 8002aca:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002acc:	2300      	movs	r3, #0
 8002ace:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002ad0:	4b79      	ldr	r3, [pc, #484]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ad2:	689b      	ldr	r3, [r3, #8]
 8002ad4:	f003 030c 	and.w	r3, r3, #12
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	d00d      	beq.n	8002af8 <HAL_RCC_GetSysClockFreq+0x40>
 8002adc:	2b08      	cmp	r3, #8
 8002ade:	f200 80e1 	bhi.w	8002ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	d002      	beq.n	8002aec <HAL_RCC_GetSysClockFreq+0x34>
 8002ae6:	2b04      	cmp	r3, #4
 8002ae8:	d003      	beq.n	8002af2 <HAL_RCC_GetSysClockFreq+0x3a>
 8002aea:	e0db      	b.n	8002ca4 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002aec:	4b73      	ldr	r3, [pc, #460]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002aee:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002af0:	e0db      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af2:	4b73      	ldr	r3, [pc, #460]	; (8002cc0 <HAL_RCC_GetSysClockFreq+0x208>)
 8002af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af6:	e0d8      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af8:	4b6f      	ldr	r3, [pc, #444]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002b00:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b02:	4b6d      	ldr	r3, [pc, #436]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b04:	685b      	ldr	r3, [r3, #4]
 8002b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002b0a:	2b00      	cmp	r3, #0
 8002b0c:	d063      	beq.n	8002bd6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0e:	4b6a      	ldr	r3, [pc, #424]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	099b      	lsrs	r3, r3, #6
 8002b14:	2200      	movs	r2, #0
 8002b16:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b18:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002b1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b20:	633b      	str	r3, [r7, #48]	; 0x30
 8002b22:	2300      	movs	r3, #0
 8002b24:	637b      	str	r3, [r7, #52]	; 0x34
 8002b26:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002b2a:	4622      	mov	r2, r4
 8002b2c:	462b      	mov	r3, r5
 8002b2e:	f04f 0000 	mov.w	r0, #0
 8002b32:	f04f 0100 	mov.w	r1, #0
 8002b36:	0159      	lsls	r1, r3, #5
 8002b38:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b3c:	0150      	lsls	r0, r2, #5
 8002b3e:	4602      	mov	r2, r0
 8002b40:	460b      	mov	r3, r1
 8002b42:	4621      	mov	r1, r4
 8002b44:	1a51      	subs	r1, r2, r1
 8002b46:	6139      	str	r1, [r7, #16]
 8002b48:	4629      	mov	r1, r5
 8002b4a:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4e:	617b      	str	r3, [r7, #20]
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b5c:	4659      	mov	r1, fp
 8002b5e:	018b      	lsls	r3, r1, #6
 8002b60:	4651      	mov	r1, sl
 8002b62:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b66:	4651      	mov	r1, sl
 8002b68:	018a      	lsls	r2, r1, #6
 8002b6a:	4651      	mov	r1, sl
 8002b6c:	ebb2 0801 	subs.w	r8, r2, r1
 8002b70:	4659      	mov	r1, fp
 8002b72:	eb63 0901 	sbc.w	r9, r3, r1
 8002b76:	f04f 0200 	mov.w	r2, #0
 8002b7a:	f04f 0300 	mov.w	r3, #0
 8002b7e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b82:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b86:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b8a:	4690      	mov	r8, r2
 8002b8c:	4699      	mov	r9, r3
 8002b8e:	4623      	mov	r3, r4
 8002b90:	eb18 0303 	adds.w	r3, r8, r3
 8002b94:	60bb      	str	r3, [r7, #8]
 8002b96:	462b      	mov	r3, r5
 8002b98:	eb49 0303 	adc.w	r3, r9, r3
 8002b9c:	60fb      	str	r3, [r7, #12]
 8002b9e:	f04f 0200 	mov.w	r2, #0
 8002ba2:	f04f 0300 	mov.w	r3, #0
 8002ba6:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002baa:	4629      	mov	r1, r5
 8002bac:	024b      	lsls	r3, r1, #9
 8002bae:	4621      	mov	r1, r4
 8002bb0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb4:	4621      	mov	r1, r4
 8002bb6:	024a      	lsls	r2, r1, #9
 8002bb8:	4610      	mov	r0, r2
 8002bba:	4619      	mov	r1, r3
 8002bbc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002bbe:	2200      	movs	r2, #0
 8002bc0:	62bb      	str	r3, [r7, #40]	; 0x28
 8002bc2:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002bc4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002bc8:	f7fd fb10 	bl	80001ec <__aeabi_uldivmod>
 8002bcc:	4602      	mov	r2, r0
 8002bce:	460b      	mov	r3, r1
 8002bd0:	4613      	mov	r3, r2
 8002bd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002bd4:	e058      	b.n	8002c88 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd6:	4b38      	ldr	r3, [pc, #224]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd8:	685b      	ldr	r3, [r3, #4]
 8002bda:	099b      	lsrs	r3, r3, #6
 8002bdc:	2200      	movs	r2, #0
 8002bde:	4618      	mov	r0, r3
 8002be0:	4611      	mov	r1, r2
 8002be2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002be6:	623b      	str	r3, [r7, #32]
 8002be8:	2300      	movs	r3, #0
 8002bea:	627b      	str	r3, [r7, #36]	; 0x24
 8002bec:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bf0:	4642      	mov	r2, r8
 8002bf2:	464b      	mov	r3, r9
 8002bf4:	f04f 0000 	mov.w	r0, #0
 8002bf8:	f04f 0100 	mov.w	r1, #0
 8002bfc:	0159      	lsls	r1, r3, #5
 8002bfe:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c02:	0150      	lsls	r0, r2, #5
 8002c04:	4602      	mov	r2, r0
 8002c06:	460b      	mov	r3, r1
 8002c08:	4641      	mov	r1, r8
 8002c0a:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c0e:	4649      	mov	r1, r9
 8002c10:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c14:	f04f 0200 	mov.w	r2, #0
 8002c18:	f04f 0300 	mov.w	r3, #0
 8002c1c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c20:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c24:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c28:	ebb2 040a 	subs.w	r4, r2, sl
 8002c2c:	eb63 050b 	sbc.w	r5, r3, fp
 8002c30:	f04f 0200 	mov.w	r2, #0
 8002c34:	f04f 0300 	mov.w	r3, #0
 8002c38:	00eb      	lsls	r3, r5, #3
 8002c3a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3e:	00e2      	lsls	r2, r4, #3
 8002c40:	4614      	mov	r4, r2
 8002c42:	461d      	mov	r5, r3
 8002c44:	4643      	mov	r3, r8
 8002c46:	18e3      	adds	r3, r4, r3
 8002c48:	603b      	str	r3, [r7, #0]
 8002c4a:	464b      	mov	r3, r9
 8002c4c:	eb45 0303 	adc.w	r3, r5, r3
 8002c50:	607b      	str	r3, [r7, #4]
 8002c52:	f04f 0200 	mov.w	r2, #0
 8002c56:	f04f 0300 	mov.w	r3, #0
 8002c5a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5e:	4629      	mov	r1, r5
 8002c60:	028b      	lsls	r3, r1, #10
 8002c62:	4621      	mov	r1, r4
 8002c64:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c68:	4621      	mov	r1, r4
 8002c6a:	028a      	lsls	r2, r1, #10
 8002c6c:	4610      	mov	r0, r2
 8002c6e:	4619      	mov	r1, r3
 8002c70:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002c72:	2200      	movs	r2, #0
 8002c74:	61bb      	str	r3, [r7, #24]
 8002c76:	61fa      	str	r2, [r7, #28]
 8002c78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c7c:	f7fd fab6 	bl	80001ec <__aeabi_uldivmod>
 8002c80:	4602      	mov	r2, r0
 8002c82:	460b      	mov	r3, r1
 8002c84:	4613      	mov	r3, r2
 8002c86:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002c88:	4b0b      	ldr	r3, [pc, #44]	; (8002cb8 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c8a:	685b      	ldr	r3, [r3, #4]
 8002c8c:	0c1b      	lsrs	r3, r3, #16
 8002c8e:	f003 0303 	and.w	r3, r3, #3
 8002c92:	3301      	adds	r3, #1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002c98:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002c9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002c9c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ca0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca2:	e002      	b.n	8002caa <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca4:	4b05      	ldr	r3, [pc, #20]	; (8002cbc <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ca8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002caa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002cac:	4618      	mov	r0, r3
 8002cae:	3750      	adds	r7, #80	; 0x50
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb6:	bf00      	nop
 8002cb8:	40023800 	.word	0x40023800
 8002cbc:	00f42400 	.word	0x00f42400
 8002cc0:	007a1200 	.word	0x007a1200

08002cc4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002cc8:	4b03      	ldr	r3, [pc, #12]	; (8002cd8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002cca:	681b      	ldr	r3, [r3, #0]
}
 8002ccc:	4618      	mov	r0, r3
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
 8002cd6:	bf00      	nop
 8002cd8:	20000048 	.word	0x20000048

08002cdc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002cdc:	b580      	push	{r7, lr}
 8002cde:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002ce0:	f7ff fff0 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002ce4:	4602      	mov	r2, r0
 8002ce6:	4b05      	ldr	r3, [pc, #20]	; (8002cfc <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ce8:	689b      	ldr	r3, [r3, #8]
 8002cea:	0a9b      	lsrs	r3, r3, #10
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	4903      	ldr	r1, [pc, #12]	; (8002d00 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002cf2:	5ccb      	ldrb	r3, [r1, r3]
 8002cf4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	40023800 	.word	0x40023800
 8002d00:	08003c88 	.word	0x08003c88

08002d04 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002d08:	f7ff ffdc 	bl	8002cc4 <HAL_RCC_GetHCLKFreq>
 8002d0c:	4602      	mov	r2, r0
 8002d0e:	4b05      	ldr	r3, [pc, #20]	; (8002d24 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	0b5b      	lsrs	r3, r3, #13
 8002d14:	f003 0307 	and.w	r3, r3, #7
 8002d18:	4903      	ldr	r1, [pc, #12]	; (8002d28 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002d1a:	5ccb      	ldrb	r3, [r1, r3]
 8002d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002d20:	4618      	mov	r0, r3
 8002d22:	bd80      	pop	{r7, pc}
 8002d24:	40023800 	.word	0x40023800
 8002d28:	08003c88 	.word	0x08003c88

08002d2c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002d2c:	b580      	push	{r7, lr}
 8002d2e:	b082      	sub	sp, #8
 8002d30:	af00      	add	r7, sp, #0
 8002d32:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d101      	bne.n	8002d3e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e083      	b.n	8002e46 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d108      	bne.n	8002d58 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002d4e:	d009      	beq.n	8002d64 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2200      	movs	r2, #0
 8002d54:	61da      	str	r2, [r3, #28]
 8002d56:	e005      	b.n	8002d64 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2200      	movs	r2, #0
 8002d5c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	2200      	movs	r2, #0
 8002d62:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d106      	bne.n	8002d7e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2200      	movs	r2, #0
 8002d74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d78:	6878      	ldr	r0, [r7, #4]
 8002d7a:	f7fd fe45 	bl	8000a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	2202      	movs	r2, #2
 8002d82:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d94:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002da6:	431a      	orrs	r2, r3
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002db0:	431a      	orrs	r2, r3
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	691b      	ldr	r3, [r3, #16]
 8002db6:	f003 0302 	and.w	r3, r3, #2
 8002dba:	431a      	orrs	r2, r3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	695b      	ldr	r3, [r3, #20]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	431a      	orrs	r2, r3
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002dce:	431a      	orrs	r2, r3
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	69db      	ldr	r3, [r3, #28]
 8002dd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002dd8:	431a      	orrs	r2, r3
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a1b      	ldr	r3, [r3, #32]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	ea42 0103 	orr.w	r1, r2, r3
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	430a      	orrs	r2, r1
 8002df4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	699b      	ldr	r3, [r3, #24]
 8002dfa:	0c1b      	lsrs	r3, r3, #16
 8002dfc:	f003 0104 	and.w	r1, r3, #4
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e04:	f003 0210 	and.w	r2, r3, #16
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	430a      	orrs	r2, r1
 8002e0e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e18:	d105      	bne.n	8002e26 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b292      	uxth	r2, r2
 8002e24:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	69da      	ldr	r2, [r3, #28]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002e34:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	2200      	movs	r2, #0
 8002e3a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3708      	adds	r7, #8
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	bd80      	pop	{r7, pc}

08002e4e <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002e4e:	b580      	push	{r7, lr}
 8002e50:	b088      	sub	sp, #32
 8002e52:	af00      	add	r7, sp, #0
 8002e54:	60f8      	str	r0, [r7, #12]
 8002e56:	60b9      	str	r1, [r7, #8]
 8002e58:	603b      	str	r3, [r7, #0]
 8002e5a:	4613      	mov	r3, r2
 8002e5c:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e62:	68fb      	ldr	r3, [r7, #12]
 8002e64:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002e68:	2b01      	cmp	r3, #1
 8002e6a:	d101      	bne.n	8002e70 <HAL_SPI_Transmit+0x22>
 8002e6c:	2302      	movs	r3, #2
 8002e6e:	e148      	b.n	8003102 <HAL_SPI_Transmit+0x2b4>
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	2201      	movs	r2, #1
 8002e74:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002e78:	f7fd ff9a 	bl	8000db0 <HAL_GetTick>
 8002e7c:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002e7e:	88fb      	ldrh	r3, [r7, #6]
 8002e80:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002e88:	b2db      	uxtb	r3, r3
 8002e8a:	2b01      	cmp	r3, #1
 8002e8c:	d002      	beq.n	8002e94 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002e8e:	2302      	movs	r3, #2
 8002e90:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002e92:	e12d      	b.n	80030f0 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 8002e94:	68bb      	ldr	r3, [r7, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_SPI_Transmit+0x52>
 8002e9a:	88fb      	ldrh	r3, [r7, #6]
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d102      	bne.n	8002ea6 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ea4:	e124      	b.n	80030f0 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002ea6:	68fb      	ldr	r3, [r7, #12]
 8002ea8:	2203      	movs	r2, #3
 8002eaa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	2200      	movs	r2, #0
 8002eb2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	68ba      	ldr	r2, [r7, #8]
 8002eb8:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	88fa      	ldrh	r2, [r7, #6]
 8002ebe:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	88fa      	ldrh	r2, [r7, #6]
 8002ec4:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	2200      	movs	r2, #0
 8002eca:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	2200      	movs	r2, #0
 8002ed0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	2200      	movs	r2, #0
 8002ed6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2200      	movs	r2, #0
 8002edc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	689b      	ldr	r3, [r3, #8]
 8002ee8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002eec:	d10f      	bne.n	8002f0e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002efc:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	681a      	ldr	r2, [r3, #0]
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002f0c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f12:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f16:	d10f      	bne.n	8002f38 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002f26:	601a      	str	r2, [r3, #0]
 8002f28:	68fb      	ldr	r3, [r7, #12]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	681a      	ldr	r2, [r3, #0]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002f36:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f42:	2b40      	cmp	r3, #64	; 0x40
 8002f44:	d007      	beq.n	8002f56 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	681a      	ldr	r2, [r3, #0]
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002f54:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	68db      	ldr	r3, [r3, #12]
 8002f5a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f5e:	d14b      	bne.n	8002ff8 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d002      	beq.n	8002f6e <HAL_SPI_Transmit+0x120>
 8002f68:	8afb      	ldrh	r3, [r7, #22]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d13e      	bne.n	8002fec <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f72:	881a      	ldrh	r2, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f7e:	1c9a      	adds	r2, r3, #2
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002f88:	b29b      	uxth	r3, r3
 8002f8a:	3b01      	subs	r3, #1
 8002f8c:	b29a      	uxth	r2, r3
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002f92:	e02b      	b.n	8002fec <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	f003 0302 	and.w	r3, r3, #2
 8002f9e:	2b02      	cmp	r3, #2
 8002fa0:	d112      	bne.n	8002fc8 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fa6:	881a      	ldrh	r2, [r3, #0]
 8002fa8:	68fb      	ldr	r3, [r7, #12]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fb2:	1c9a      	adds	r2, r3, #2
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002fb8:	68fb      	ldr	r3, [r7, #12]
 8002fba:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	3b01      	subs	r3, #1
 8002fc0:	b29a      	uxth	r2, r3
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	86da      	strh	r2, [r3, #54]	; 0x36
 8002fc6:	e011      	b.n	8002fec <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc8:	f7fd fef2 	bl	8000db0 <HAL_GetTick>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	1ad3      	subs	r3, r2, r3
 8002fd2:	683a      	ldr	r2, [r7, #0]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d803      	bhi.n	8002fe0 <HAL_SPI_Transmit+0x192>
 8002fd8:	683b      	ldr	r3, [r7, #0]
 8002fda:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002fde:	d102      	bne.n	8002fe6 <HAL_SPI_Transmit+0x198>
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d102      	bne.n	8002fec <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002fea:	e081      	b.n	80030f0 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d1ce      	bne.n	8002f94 <HAL_SPI_Transmit+0x146>
 8002ff6:	e04c      	b.n	8003092 <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d002      	beq.n	8003006 <HAL_SPI_Transmit+0x1b8>
 8003000:	8afb      	ldrh	r3, [r7, #22]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d140      	bne.n	8003088 <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	330c      	adds	r3, #12
 8003010:	7812      	ldrb	r2, [r2, #0]
 8003012:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003014:	68fb      	ldr	r3, [r7, #12]
 8003016:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003018:	1c5a      	adds	r2, r3, #1
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003022:	b29b      	uxth	r3, r3
 8003024:	3b01      	subs	r3, #1
 8003026:	b29a      	uxth	r2, r3
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800302c:	e02c      	b.n	8003088 <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	f003 0302 	and.w	r3, r3, #2
 8003038:	2b02      	cmp	r3, #2
 800303a:	d113      	bne.n	8003064 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	330c      	adds	r3, #12
 8003046:	7812      	ldrb	r2, [r2, #0]
 8003048:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304e:	1c5a      	adds	r2, r3, #1
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003058:	b29b      	uxth	r3, r3
 800305a:	3b01      	subs	r3, #1
 800305c:	b29a      	uxth	r2, r3
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	86da      	strh	r2, [r3, #54]	; 0x36
 8003062:	e011      	b.n	8003088 <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003064:	f7fd fea4 	bl	8000db0 <HAL_GetTick>
 8003068:	4602      	mov	r2, r0
 800306a:	69bb      	ldr	r3, [r7, #24]
 800306c:	1ad3      	subs	r3, r2, r3
 800306e:	683a      	ldr	r2, [r7, #0]
 8003070:	429a      	cmp	r2, r3
 8003072:	d803      	bhi.n	800307c <HAL_SPI_Transmit+0x22e>
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800307a:	d102      	bne.n	8003082 <HAL_SPI_Transmit+0x234>
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	2b00      	cmp	r3, #0
 8003080:	d102      	bne.n	8003088 <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8003082:	2303      	movs	r3, #3
 8003084:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003086:	e033      	b.n	80030f0 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800308c:	b29b      	uxth	r3, r3
 800308e:	2b00      	cmp	r3, #0
 8003090:	d1cd      	bne.n	800302e <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800309a:	d107      	bne.n	80030ac <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	681a      	ldr	r2, [r3, #0]
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80030aa:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	6839      	ldr	r1, [r7, #0]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8c1 	bl	8003238 <SPI_EndRxTxTransaction>
 80030b6:	4603      	mov	r3, r0
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d002      	beq.n	80030c2 <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	2220      	movs	r2, #32
 80030c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80030c2:	68fb      	ldr	r3, [r7, #12]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d10a      	bne.n	80030e0 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80030ca:	2300      	movs	r3, #0
 80030cc:	613b      	str	r3, [r7, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	68db      	ldr	r3, [r3, #12]
 80030d4:	613b      	str	r3, [r7, #16]
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	689b      	ldr	r3, [r3, #8]
 80030dc:	613b      	str	r3, [r7, #16]
 80030de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 80030e8:	2301      	movs	r3, #1
 80030ea:	77fb      	strb	r3, [r7, #31]
 80030ec:	e000      	b.n	80030f0 <HAL_SPI_Transmit+0x2a2>
  }

error:
 80030ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	2200      	movs	r2, #0
 80030fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003100:	7ffb      	ldrb	r3, [r7, #31]
}
 8003102:	4618      	mov	r0, r3
 8003104:	3720      	adds	r7, #32
 8003106:	46bd      	mov	sp, r7
 8003108:	bd80      	pop	{r7, pc}

0800310a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800310a:	b480      	push	{r7}
 800310c:	b083      	sub	sp, #12
 800310e:	af00      	add	r7, sp, #0
 8003110:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003118:	b2db      	uxtb	r3, r3
}
 800311a:	4618      	mov	r0, r3
 800311c:	370c      	adds	r7, #12
 800311e:	46bd      	mov	sp, r7
 8003120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003124:	4770      	bx	lr
	...

08003128 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b088      	sub	sp, #32
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	603b      	str	r3, [r7, #0]
 8003134:	4613      	mov	r3, r2
 8003136:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003138:	f7fd fe3a 	bl	8000db0 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003140:	1a9b      	subs	r3, r3, r2
 8003142:	683a      	ldr	r2, [r7, #0]
 8003144:	4413      	add	r3, r2
 8003146:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003148:	f7fd fe32 	bl	8000db0 <HAL_GetTick>
 800314c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800314e:	4b39      	ldr	r3, [pc, #228]	; (8003234 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	015b      	lsls	r3, r3, #5
 8003154:	0d1b      	lsrs	r3, r3, #20
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	fb02 f303 	mul.w	r3, r2, r3
 800315c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800315e:	e054      	b.n	800320a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003160:	683b      	ldr	r3, [r7, #0]
 8003162:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003166:	d050      	beq.n	800320a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003168:	f7fd fe22 	bl	8000db0 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	69fa      	ldr	r2, [r7, #28]
 8003174:	429a      	cmp	r2, r3
 8003176:	d902      	bls.n	800317e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003178:	69fb      	ldr	r3, [r7, #28]
 800317a:	2b00      	cmp	r3, #0
 800317c:	d13d      	bne.n	80031fa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	685a      	ldr	r2, [r3, #4]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800318c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	685b      	ldr	r3, [r3, #4]
 8003192:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003196:	d111      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x94>
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80031a0:	d004      	beq.n	80031ac <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031aa:	d107      	bne.n	80031bc <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80031ba:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80031c4:	d10f      	bne.n	80031e6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	681a      	ldr	r2, [r3, #0]
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80031d4:	601a      	str	r2, [r3, #0]
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	681a      	ldr	r2, [r3, #0]
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80031e4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80031f6:	2303      	movs	r3, #3
 80031f8:	e017      	b.n	800322a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d101      	bne.n	8003204 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003200:	2300      	movs	r3, #0
 8003202:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	3b01      	subs	r3, #1
 8003208:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	689a      	ldr	r2, [r3, #8]
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4013      	ands	r3, r2
 8003214:	68ba      	ldr	r2, [r7, #8]
 8003216:	429a      	cmp	r2, r3
 8003218:	bf0c      	ite	eq
 800321a:	2301      	moveq	r3, #1
 800321c:	2300      	movne	r3, #0
 800321e:	b2db      	uxtb	r3, r3
 8003220:	461a      	mov	r2, r3
 8003222:	79fb      	ldrb	r3, [r7, #7]
 8003224:	429a      	cmp	r2, r3
 8003226:	d19b      	bne.n	8003160 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003228:	2300      	movs	r3, #0
}
 800322a:	4618      	mov	r0, r3
 800322c:	3720      	adds	r7, #32
 800322e:	46bd      	mov	sp, r7
 8003230:	bd80      	pop	{r7, pc}
 8003232:	bf00      	nop
 8003234:	20000048 	.word	0x20000048

08003238 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af02      	add	r7, sp, #8
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003244:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <SPI_EndRxTxTransaction+0x7c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a1b      	ldr	r2, [pc, #108]	; (80032b8 <SPI_EndRxTxTransaction+0x80>)
 800324a:	fba2 2303 	umull	r2, r3, r2, r3
 800324e:	0d5b      	lsrs	r3, r3, #21
 8003250:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003254:	fb02 f303 	mul.w	r3, r2, r3
 8003258:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	685b      	ldr	r3, [r3, #4]
 800325e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003262:	d112      	bne.n	800328a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	9300      	str	r3, [sp, #0]
 8003268:	68bb      	ldr	r3, [r7, #8]
 800326a:	2200      	movs	r2, #0
 800326c:	2180      	movs	r1, #128	; 0x80
 800326e:	68f8      	ldr	r0, [r7, #12]
 8003270:	f7ff ff5a 	bl	8003128 <SPI_WaitFlagStateUntilTimeout>
 8003274:	4603      	mov	r3, r0
 8003276:	2b00      	cmp	r3, #0
 8003278:	d016      	beq.n	80032a8 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800327e:	f043 0220 	orr.w	r2, r3, #32
 8003282:	68fb      	ldr	r3, [r7, #12]
 8003284:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003286:	2303      	movs	r3, #3
 8003288:	e00f      	b.n	80032aa <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800328a:	697b      	ldr	r3, [r7, #20]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d00a      	beq.n	80032a6 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003290:	697b      	ldr	r3, [r7, #20]
 8003292:	3b01      	subs	r3, #1
 8003294:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	689b      	ldr	r3, [r3, #8]
 800329c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032a0:	2b80      	cmp	r3, #128	; 0x80
 80032a2:	d0f2      	beq.n	800328a <SPI_EndRxTxTransaction+0x52>
 80032a4:	e000      	b.n	80032a8 <SPI_EndRxTxTransaction+0x70>
        break;
 80032a6:	bf00      	nop
  }

  return HAL_OK;
 80032a8:	2300      	movs	r3, #0
}
 80032aa:	4618      	mov	r0, r3
 80032ac:	3718      	adds	r7, #24
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bd80      	pop	{r7, pc}
 80032b2:	bf00      	nop
 80032b4:	20000048 	.word	0x20000048
 80032b8:	165e9f81 	.word	0x165e9f81

080032bc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80032bc:	b580      	push	{r7, lr}
 80032be:	b082      	sub	sp, #8
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d101      	bne.n	80032ce <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e03f      	b.n	800334e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d4:	b2db      	uxtb	r3, r3
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d106      	bne.n	80032e8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2200      	movs	r2, #0
 80032de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80032e2:	6878      	ldr	r0, [r7, #4]
 80032e4:	f7fe ffe0 	bl	80022a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2224      	movs	r2, #36	; 0x24
 80032ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68da      	ldr	r2, [r3, #12]
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80032fe:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003300:	6878      	ldr	r0, [r7, #4]
 8003302:	f000 f929 	bl	8003558 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	691a      	ldr	r2, [r3, #16]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003314:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	695a      	ldr	r2, [r3, #20]
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003324:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	68da      	ldr	r2, [r3, #12]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003334:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	2200      	movs	r2, #0
 800333a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2220      	movs	r2, #32
 8003340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2220      	movs	r2, #32
 8003348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800334c:	2300      	movs	r3, #0
}
 800334e:	4618      	mov	r0, r3
 8003350:	3708      	adds	r7, #8
 8003352:	46bd      	mov	sp, r7
 8003354:	bd80      	pop	{r7, pc}

08003356 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003356:	b580      	push	{r7, lr}
 8003358:	b08a      	sub	sp, #40	; 0x28
 800335a:	af02      	add	r7, sp, #8
 800335c:	60f8      	str	r0, [r7, #12]
 800335e:	60b9      	str	r1, [r7, #8]
 8003360:	603b      	str	r3, [r7, #0]
 8003362:	4613      	mov	r3, r2
 8003364:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003366:	2300      	movs	r3, #0
 8003368:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b20      	cmp	r3, #32
 8003374:	d17c      	bne.n	8003470 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003376:	68bb      	ldr	r3, [r7, #8]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_UART_Transmit+0x2c>
 800337c:	88fb      	ldrh	r3, [r7, #6]
 800337e:	2b00      	cmp	r3, #0
 8003380:	d101      	bne.n	8003386 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e075      	b.n	8003472 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800338c:	2b01      	cmp	r3, #1
 800338e:	d101      	bne.n	8003394 <HAL_UART_Transmit+0x3e>
 8003390:	2302      	movs	r3, #2
 8003392:	e06e      	b.n	8003472 <HAL_UART_Transmit+0x11c>
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	2201      	movs	r2, #1
 8003398:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800339c:	68fb      	ldr	r3, [r7, #12]
 800339e:	2200      	movs	r2, #0
 80033a0:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	2221      	movs	r2, #33	; 0x21
 80033a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80033aa:	f7fd fd01 	bl	8000db0 <HAL_GetTick>
 80033ae:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	88fa      	ldrh	r2, [r7, #6]
 80033b4:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	88fa      	ldrh	r2, [r7, #6]
 80033ba:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	689b      	ldr	r3, [r3, #8]
 80033c0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80033c4:	d108      	bne.n	80033d8 <HAL_UART_Transmit+0x82>
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d104      	bne.n	80033d8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80033ce:	2300      	movs	r3, #0
 80033d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	61bb      	str	r3, [r7, #24]
 80033d6:	e003      	b.n	80033e0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80033d8:	68bb      	ldr	r3, [r7, #8]
 80033da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80033dc:	2300      	movs	r3, #0
 80033de:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	2200      	movs	r2, #0
 80033e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80033e8:	e02a      	b.n	8003440 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	9300      	str	r3, [sp, #0]
 80033ee:	697b      	ldr	r3, [r7, #20]
 80033f0:	2200      	movs	r2, #0
 80033f2:	2180      	movs	r1, #128	; 0x80
 80033f4:	68f8      	ldr	r0, [r7, #12]
 80033f6:	f000 f840 	bl	800347a <UART_WaitOnFlagUntilTimeout>
 80033fa:	4603      	mov	r3, r0
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d001      	beq.n	8003404 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003400:	2303      	movs	r3, #3
 8003402:	e036      	b.n	8003472 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003404:	69fb      	ldr	r3, [r7, #28]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d10b      	bne.n	8003422 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800340a:	69bb      	ldr	r3, [r7, #24]
 800340c:	881b      	ldrh	r3, [r3, #0]
 800340e:	461a      	mov	r2, r3
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003418:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800341a:	69bb      	ldr	r3, [r7, #24]
 800341c:	3302      	adds	r3, #2
 800341e:	61bb      	str	r3, [r7, #24]
 8003420:	e007      	b.n	8003432 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003422:	69fb      	ldr	r3, [r7, #28]
 8003424:	781a      	ldrb	r2, [r3, #0]
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800342c:	69fb      	ldr	r3, [r7, #28]
 800342e:	3301      	adds	r3, #1
 8003430:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003436:	b29b      	uxth	r3, r3
 8003438:	3b01      	subs	r3, #1
 800343a:	b29a      	uxth	r2, r3
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003440:	68fb      	ldr	r3, [r7, #12]
 8003442:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003444:	b29b      	uxth	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d1cf      	bne.n	80033ea <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	9300      	str	r3, [sp, #0]
 800344e:	697b      	ldr	r3, [r7, #20]
 8003450:	2200      	movs	r2, #0
 8003452:	2140      	movs	r1, #64	; 0x40
 8003454:	68f8      	ldr	r0, [r7, #12]
 8003456:	f000 f810 	bl	800347a <UART_WaitOnFlagUntilTimeout>
 800345a:	4603      	mov	r3, r0
 800345c:	2b00      	cmp	r3, #0
 800345e:	d001      	beq.n	8003464 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003460:	2303      	movs	r3, #3
 8003462:	e006      	b.n	8003472 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 800346c:	2300      	movs	r3, #0
 800346e:	e000      	b.n	8003472 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003470:	2302      	movs	r3, #2
  }
}
 8003472:	4618      	mov	r0, r3
 8003474:	3720      	adds	r7, #32
 8003476:	46bd      	mov	sp, r7
 8003478:	bd80      	pop	{r7, pc}

0800347a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800347a:	b580      	push	{r7, lr}
 800347c:	b090      	sub	sp, #64	; 0x40
 800347e:	af00      	add	r7, sp, #0
 8003480:	60f8      	str	r0, [r7, #12]
 8003482:	60b9      	str	r1, [r7, #8]
 8003484:	603b      	str	r3, [r7, #0]
 8003486:	4613      	mov	r3, r2
 8003488:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800348a:	e050      	b.n	800352e <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800348c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800348e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003492:	d04c      	beq.n	800352e <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003494:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003496:	2b00      	cmp	r3, #0
 8003498:	d007      	beq.n	80034aa <UART_WaitOnFlagUntilTimeout+0x30>
 800349a:	f7fd fc89 	bl	8000db0 <HAL_GetTick>
 800349e:	4602      	mov	r2, r0
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	1ad3      	subs	r3, r2, r3
 80034a4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a6:	429a      	cmp	r2, r3
 80034a8:	d241      	bcs.n	800352e <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	330c      	adds	r3, #12
 80034b0:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034b4:	e853 3f00 	ldrex	r3, [r3]
 80034b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80034ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034bc:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80034c0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	330c      	adds	r3, #12
 80034c8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034ca:	637a      	str	r2, [r7, #52]	; 0x34
 80034cc:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034ce:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80034d0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80034d2:	e841 2300 	strex	r3, r2, [r1]
 80034d6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80034d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d1e5      	bne.n	80034aa <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	3314      	adds	r3, #20
 80034e4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034e6:	697b      	ldr	r3, [r7, #20]
 80034e8:	e853 3f00 	ldrex	r3, [r3]
 80034ec:	613b      	str	r3, [r7, #16]
   return(result);
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	f023 0301 	bic.w	r3, r3, #1
 80034f4:	63bb      	str	r3, [r7, #56]	; 0x38
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	3314      	adds	r3, #20
 80034fc:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80034fe:	623a      	str	r2, [r7, #32]
 8003500:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003502:	69f9      	ldr	r1, [r7, #28]
 8003504:	6a3a      	ldr	r2, [r7, #32]
 8003506:	e841 2300 	strex	r3, r2, [r1]
 800350a:	61bb      	str	r3, [r7, #24]
   return(result);
 800350c:	69bb      	ldr	r3, [r7, #24]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d1e5      	bne.n	80034de <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2220      	movs	r2, #32
 8003516:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	2220      	movs	r2, #32
 800351e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003522:	68fb      	ldr	r3, [r7, #12]
 8003524:	2200      	movs	r2, #0
 8003526:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e00f      	b.n	800354e <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	681a      	ldr	r2, [r3, #0]
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	4013      	ands	r3, r2
 8003538:	68ba      	ldr	r2, [r7, #8]
 800353a:	429a      	cmp	r2, r3
 800353c:	bf0c      	ite	eq
 800353e:	2301      	moveq	r3, #1
 8003540:	2300      	movne	r3, #0
 8003542:	b2db      	uxtb	r3, r3
 8003544:	461a      	mov	r2, r3
 8003546:	79fb      	ldrb	r3, [r7, #7]
 8003548:	429a      	cmp	r2, r3
 800354a:	d09f      	beq.n	800348c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800354c:	2300      	movs	r3, #0
}
 800354e:	4618      	mov	r0, r3
 8003550:	3740      	adds	r7, #64	; 0x40
 8003552:	46bd      	mov	sp, r7
 8003554:	bd80      	pop	{r7, pc}
	...

08003558 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003558:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800355c:	b0c0      	sub	sp, #256	; 0x100
 800355e:	af00      	add	r7, sp, #0
 8003560:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	691b      	ldr	r3, [r3, #16]
 800356c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003574:	68d9      	ldr	r1, [r3, #12]
 8003576:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	ea40 0301 	orr.w	r3, r0, r1
 8003580:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003582:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003586:	689a      	ldr	r2, [r3, #8]
 8003588:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	431a      	orrs	r2, r3
 8003590:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003594:	695b      	ldr	r3, [r3, #20]
 8003596:	431a      	orrs	r2, r3
 8003598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800359c:	69db      	ldr	r3, [r3, #28]
 800359e:	4313      	orrs	r3, r2
 80035a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80035a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80035b0:	f021 010c 	bic.w	r1, r1, #12
 80035b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035b8:	681a      	ldr	r2, [r3, #0]
 80035ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80035be:	430b      	orrs	r3, r1
 80035c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80035c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	695b      	ldr	r3, [r3, #20]
 80035ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80035ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d2:	6999      	ldr	r1, [r3, #24]
 80035d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	ea40 0301 	orr.w	r3, r0, r1
 80035de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80035e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035e4:	681a      	ldr	r2, [r3, #0]
 80035e6:	4b8f      	ldr	r3, [pc, #572]	; (8003824 <UART_SetConfig+0x2cc>)
 80035e8:	429a      	cmp	r2, r3
 80035ea:	d005      	beq.n	80035f8 <UART_SetConfig+0xa0>
 80035ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	4b8d      	ldr	r3, [pc, #564]	; (8003828 <UART_SetConfig+0x2d0>)
 80035f4:	429a      	cmp	r2, r3
 80035f6:	d104      	bne.n	8003602 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80035f8:	f7ff fb84 	bl	8002d04 <HAL_RCC_GetPCLK2Freq>
 80035fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003600:	e003      	b.n	800360a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003602:	f7ff fb6b 	bl	8002cdc <HAL_RCC_GetPCLK1Freq>
 8003606:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800360a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800360e:	69db      	ldr	r3, [r3, #28]
 8003610:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003614:	f040 810c 	bne.w	8003830 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003618:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800361c:	2200      	movs	r2, #0
 800361e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003622:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003626:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800362a:	4622      	mov	r2, r4
 800362c:	462b      	mov	r3, r5
 800362e:	1891      	adds	r1, r2, r2
 8003630:	65b9      	str	r1, [r7, #88]	; 0x58
 8003632:	415b      	adcs	r3, r3
 8003634:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003636:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800363a:	4621      	mov	r1, r4
 800363c:	eb12 0801 	adds.w	r8, r2, r1
 8003640:	4629      	mov	r1, r5
 8003642:	eb43 0901 	adc.w	r9, r3, r1
 8003646:	f04f 0200 	mov.w	r2, #0
 800364a:	f04f 0300 	mov.w	r3, #0
 800364e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003652:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003656:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800365a:	4690      	mov	r8, r2
 800365c:	4699      	mov	r9, r3
 800365e:	4623      	mov	r3, r4
 8003660:	eb18 0303 	adds.w	r3, r8, r3
 8003664:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003668:	462b      	mov	r3, r5
 800366a:	eb49 0303 	adc.w	r3, r9, r3
 800366e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003672:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003676:	685b      	ldr	r3, [r3, #4]
 8003678:	2200      	movs	r2, #0
 800367a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800367e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003682:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003686:	460b      	mov	r3, r1
 8003688:	18db      	adds	r3, r3, r3
 800368a:	653b      	str	r3, [r7, #80]	; 0x50
 800368c:	4613      	mov	r3, r2
 800368e:	eb42 0303 	adc.w	r3, r2, r3
 8003692:	657b      	str	r3, [r7, #84]	; 0x54
 8003694:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003698:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800369c:	f7fc fda6 	bl	80001ec <__aeabi_uldivmod>
 80036a0:	4602      	mov	r2, r0
 80036a2:	460b      	mov	r3, r1
 80036a4:	4b61      	ldr	r3, [pc, #388]	; (800382c <UART_SetConfig+0x2d4>)
 80036a6:	fba3 2302 	umull	r2, r3, r3, r2
 80036aa:	095b      	lsrs	r3, r3, #5
 80036ac:	011c      	lsls	r4, r3, #4
 80036ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80036b2:	2200      	movs	r2, #0
 80036b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80036b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80036bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80036c0:	4642      	mov	r2, r8
 80036c2:	464b      	mov	r3, r9
 80036c4:	1891      	adds	r1, r2, r2
 80036c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80036c8:	415b      	adcs	r3, r3
 80036ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80036cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80036d0:	4641      	mov	r1, r8
 80036d2:	eb12 0a01 	adds.w	sl, r2, r1
 80036d6:	4649      	mov	r1, r9
 80036d8:	eb43 0b01 	adc.w	fp, r3, r1
 80036dc:	f04f 0200 	mov.w	r2, #0
 80036e0:	f04f 0300 	mov.w	r3, #0
 80036e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80036e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80036ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80036f0:	4692      	mov	sl, r2
 80036f2:	469b      	mov	fp, r3
 80036f4:	4643      	mov	r3, r8
 80036f6:	eb1a 0303 	adds.w	r3, sl, r3
 80036fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80036fe:	464b      	mov	r3, r9
 8003700:	eb4b 0303 	adc.w	r3, fp, r3
 8003704:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003708:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800370c:	685b      	ldr	r3, [r3, #4]
 800370e:	2200      	movs	r2, #0
 8003710:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003714:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003718:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800371c:	460b      	mov	r3, r1
 800371e:	18db      	adds	r3, r3, r3
 8003720:	643b      	str	r3, [r7, #64]	; 0x40
 8003722:	4613      	mov	r3, r2
 8003724:	eb42 0303 	adc.w	r3, r2, r3
 8003728:	647b      	str	r3, [r7, #68]	; 0x44
 800372a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800372e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003732:	f7fc fd5b 	bl	80001ec <__aeabi_uldivmod>
 8003736:	4602      	mov	r2, r0
 8003738:	460b      	mov	r3, r1
 800373a:	4611      	mov	r1, r2
 800373c:	4b3b      	ldr	r3, [pc, #236]	; (800382c <UART_SetConfig+0x2d4>)
 800373e:	fba3 2301 	umull	r2, r3, r3, r1
 8003742:	095b      	lsrs	r3, r3, #5
 8003744:	2264      	movs	r2, #100	; 0x64
 8003746:	fb02 f303 	mul.w	r3, r2, r3
 800374a:	1acb      	subs	r3, r1, r3
 800374c:	00db      	lsls	r3, r3, #3
 800374e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003752:	4b36      	ldr	r3, [pc, #216]	; (800382c <UART_SetConfig+0x2d4>)
 8003754:	fba3 2302 	umull	r2, r3, r3, r2
 8003758:	095b      	lsrs	r3, r3, #5
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003760:	441c      	add	r4, r3
 8003762:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003766:	2200      	movs	r2, #0
 8003768:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800376c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003770:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003774:	4642      	mov	r2, r8
 8003776:	464b      	mov	r3, r9
 8003778:	1891      	adds	r1, r2, r2
 800377a:	63b9      	str	r1, [r7, #56]	; 0x38
 800377c:	415b      	adcs	r3, r3
 800377e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003780:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003784:	4641      	mov	r1, r8
 8003786:	1851      	adds	r1, r2, r1
 8003788:	6339      	str	r1, [r7, #48]	; 0x30
 800378a:	4649      	mov	r1, r9
 800378c:	414b      	adcs	r3, r1
 800378e:	637b      	str	r3, [r7, #52]	; 0x34
 8003790:	f04f 0200 	mov.w	r2, #0
 8003794:	f04f 0300 	mov.w	r3, #0
 8003798:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800379c:	4659      	mov	r1, fp
 800379e:	00cb      	lsls	r3, r1, #3
 80037a0:	4651      	mov	r1, sl
 80037a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037a6:	4651      	mov	r1, sl
 80037a8:	00ca      	lsls	r2, r1, #3
 80037aa:	4610      	mov	r0, r2
 80037ac:	4619      	mov	r1, r3
 80037ae:	4603      	mov	r3, r0
 80037b0:	4642      	mov	r2, r8
 80037b2:	189b      	adds	r3, r3, r2
 80037b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80037b8:	464b      	mov	r3, r9
 80037ba:	460a      	mov	r2, r1
 80037bc:	eb42 0303 	adc.w	r3, r2, r3
 80037c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80037c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037c8:	685b      	ldr	r3, [r3, #4]
 80037ca:	2200      	movs	r2, #0
 80037cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80037d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80037d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80037d8:	460b      	mov	r3, r1
 80037da:	18db      	adds	r3, r3, r3
 80037dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80037de:	4613      	mov	r3, r2
 80037e0:	eb42 0303 	adc.w	r3, r2, r3
 80037e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80037e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80037ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80037ee:	f7fc fcfd 	bl	80001ec <__aeabi_uldivmod>
 80037f2:	4602      	mov	r2, r0
 80037f4:	460b      	mov	r3, r1
 80037f6:	4b0d      	ldr	r3, [pc, #52]	; (800382c <UART_SetConfig+0x2d4>)
 80037f8:	fba3 1302 	umull	r1, r3, r3, r2
 80037fc:	095b      	lsrs	r3, r3, #5
 80037fe:	2164      	movs	r1, #100	; 0x64
 8003800:	fb01 f303 	mul.w	r3, r1, r3
 8003804:	1ad3      	subs	r3, r2, r3
 8003806:	00db      	lsls	r3, r3, #3
 8003808:	3332      	adds	r3, #50	; 0x32
 800380a:	4a08      	ldr	r2, [pc, #32]	; (800382c <UART_SetConfig+0x2d4>)
 800380c:	fba2 2303 	umull	r2, r3, r2, r3
 8003810:	095b      	lsrs	r3, r3, #5
 8003812:	f003 0207 	and.w	r2, r3, #7
 8003816:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	4422      	add	r2, r4
 800381e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003820:	e106      	b.n	8003a30 <UART_SetConfig+0x4d8>
 8003822:	bf00      	nop
 8003824:	40011000 	.word	0x40011000
 8003828:	40011400 	.word	0x40011400
 800382c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003834:	2200      	movs	r2, #0
 8003836:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800383a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800383e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003842:	4642      	mov	r2, r8
 8003844:	464b      	mov	r3, r9
 8003846:	1891      	adds	r1, r2, r2
 8003848:	6239      	str	r1, [r7, #32]
 800384a:	415b      	adcs	r3, r3
 800384c:	627b      	str	r3, [r7, #36]	; 0x24
 800384e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003852:	4641      	mov	r1, r8
 8003854:	1854      	adds	r4, r2, r1
 8003856:	4649      	mov	r1, r9
 8003858:	eb43 0501 	adc.w	r5, r3, r1
 800385c:	f04f 0200 	mov.w	r2, #0
 8003860:	f04f 0300 	mov.w	r3, #0
 8003864:	00eb      	lsls	r3, r5, #3
 8003866:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800386a:	00e2      	lsls	r2, r4, #3
 800386c:	4614      	mov	r4, r2
 800386e:	461d      	mov	r5, r3
 8003870:	4643      	mov	r3, r8
 8003872:	18e3      	adds	r3, r4, r3
 8003874:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003878:	464b      	mov	r3, r9
 800387a:	eb45 0303 	adc.w	r3, r5, r3
 800387e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800388e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003892:	f04f 0200 	mov.w	r2, #0
 8003896:	f04f 0300 	mov.w	r3, #0
 800389a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800389e:	4629      	mov	r1, r5
 80038a0:	008b      	lsls	r3, r1, #2
 80038a2:	4621      	mov	r1, r4
 80038a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038a8:	4621      	mov	r1, r4
 80038aa:	008a      	lsls	r2, r1, #2
 80038ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80038b0:	f7fc fc9c 	bl	80001ec <__aeabi_uldivmod>
 80038b4:	4602      	mov	r2, r0
 80038b6:	460b      	mov	r3, r1
 80038b8:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <UART_SetConfig+0x4e4>)
 80038ba:	fba3 2302 	umull	r2, r3, r3, r2
 80038be:	095b      	lsrs	r3, r3, #5
 80038c0:	011c      	lsls	r4, r3, #4
 80038c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80038c6:	2200      	movs	r2, #0
 80038c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80038cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80038d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80038d4:	4642      	mov	r2, r8
 80038d6:	464b      	mov	r3, r9
 80038d8:	1891      	adds	r1, r2, r2
 80038da:	61b9      	str	r1, [r7, #24]
 80038dc:	415b      	adcs	r3, r3
 80038de:	61fb      	str	r3, [r7, #28]
 80038e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80038e4:	4641      	mov	r1, r8
 80038e6:	1851      	adds	r1, r2, r1
 80038e8:	6139      	str	r1, [r7, #16]
 80038ea:	4649      	mov	r1, r9
 80038ec:	414b      	adcs	r3, r1
 80038ee:	617b      	str	r3, [r7, #20]
 80038f0:	f04f 0200 	mov.w	r2, #0
 80038f4:	f04f 0300 	mov.w	r3, #0
 80038f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80038fc:	4659      	mov	r1, fp
 80038fe:	00cb      	lsls	r3, r1, #3
 8003900:	4651      	mov	r1, sl
 8003902:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003906:	4651      	mov	r1, sl
 8003908:	00ca      	lsls	r2, r1, #3
 800390a:	4610      	mov	r0, r2
 800390c:	4619      	mov	r1, r3
 800390e:	4603      	mov	r3, r0
 8003910:	4642      	mov	r2, r8
 8003912:	189b      	adds	r3, r3, r2
 8003914:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003918:	464b      	mov	r3, r9
 800391a:	460a      	mov	r2, r1
 800391c:	eb42 0303 	adc.w	r3, r2, r3
 8003920:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	2200      	movs	r2, #0
 800392c:	67bb      	str	r3, [r7, #120]	; 0x78
 800392e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003930:	f04f 0200 	mov.w	r2, #0
 8003934:	f04f 0300 	mov.w	r3, #0
 8003938:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800393c:	4649      	mov	r1, r9
 800393e:	008b      	lsls	r3, r1, #2
 8003940:	4641      	mov	r1, r8
 8003942:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003946:	4641      	mov	r1, r8
 8003948:	008a      	lsls	r2, r1, #2
 800394a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800394e:	f7fc fc4d 	bl	80001ec <__aeabi_uldivmod>
 8003952:	4602      	mov	r2, r0
 8003954:	460b      	mov	r3, r1
 8003956:	4611      	mov	r1, r2
 8003958:	4b38      	ldr	r3, [pc, #224]	; (8003a3c <UART_SetConfig+0x4e4>)
 800395a:	fba3 2301 	umull	r2, r3, r3, r1
 800395e:	095b      	lsrs	r3, r3, #5
 8003960:	2264      	movs	r2, #100	; 0x64
 8003962:	fb02 f303 	mul.w	r3, r2, r3
 8003966:	1acb      	subs	r3, r1, r3
 8003968:	011b      	lsls	r3, r3, #4
 800396a:	3332      	adds	r3, #50	; 0x32
 800396c:	4a33      	ldr	r2, [pc, #204]	; (8003a3c <UART_SetConfig+0x4e4>)
 800396e:	fba2 2303 	umull	r2, r3, r2, r3
 8003972:	095b      	lsrs	r3, r3, #5
 8003974:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003978:	441c      	add	r4, r3
 800397a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800397e:	2200      	movs	r2, #0
 8003980:	673b      	str	r3, [r7, #112]	; 0x70
 8003982:	677a      	str	r2, [r7, #116]	; 0x74
 8003984:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003988:	4642      	mov	r2, r8
 800398a:	464b      	mov	r3, r9
 800398c:	1891      	adds	r1, r2, r2
 800398e:	60b9      	str	r1, [r7, #8]
 8003990:	415b      	adcs	r3, r3
 8003992:	60fb      	str	r3, [r7, #12]
 8003994:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003998:	4641      	mov	r1, r8
 800399a:	1851      	adds	r1, r2, r1
 800399c:	6039      	str	r1, [r7, #0]
 800399e:	4649      	mov	r1, r9
 80039a0:	414b      	adcs	r3, r1
 80039a2:	607b      	str	r3, [r7, #4]
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	f04f 0300 	mov.w	r3, #0
 80039ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80039b0:	4659      	mov	r1, fp
 80039b2:	00cb      	lsls	r3, r1, #3
 80039b4:	4651      	mov	r1, sl
 80039b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80039ba:	4651      	mov	r1, sl
 80039bc:	00ca      	lsls	r2, r1, #3
 80039be:	4610      	mov	r0, r2
 80039c0:	4619      	mov	r1, r3
 80039c2:	4603      	mov	r3, r0
 80039c4:	4642      	mov	r2, r8
 80039c6:	189b      	adds	r3, r3, r2
 80039c8:	66bb      	str	r3, [r7, #104]	; 0x68
 80039ca:	464b      	mov	r3, r9
 80039cc:	460a      	mov	r2, r1
 80039ce:	eb42 0303 	adc.w	r3, r2, r3
 80039d2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80039d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	2200      	movs	r2, #0
 80039dc:	663b      	str	r3, [r7, #96]	; 0x60
 80039de:	667a      	str	r2, [r7, #100]	; 0x64
 80039e0:	f04f 0200 	mov.w	r2, #0
 80039e4:	f04f 0300 	mov.w	r3, #0
 80039e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80039ec:	4649      	mov	r1, r9
 80039ee:	008b      	lsls	r3, r1, #2
 80039f0:	4641      	mov	r1, r8
 80039f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80039f6:	4641      	mov	r1, r8
 80039f8:	008a      	lsls	r2, r1, #2
 80039fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80039fe:	f7fc fbf5 	bl	80001ec <__aeabi_uldivmod>
 8003a02:	4602      	mov	r2, r0
 8003a04:	460b      	mov	r3, r1
 8003a06:	4b0d      	ldr	r3, [pc, #52]	; (8003a3c <UART_SetConfig+0x4e4>)
 8003a08:	fba3 1302 	umull	r1, r3, r3, r2
 8003a0c:	095b      	lsrs	r3, r3, #5
 8003a0e:	2164      	movs	r1, #100	; 0x64
 8003a10:	fb01 f303 	mul.w	r3, r1, r3
 8003a14:	1ad3      	subs	r3, r2, r3
 8003a16:	011b      	lsls	r3, r3, #4
 8003a18:	3332      	adds	r3, #50	; 0x32
 8003a1a:	4a08      	ldr	r2, [pc, #32]	; (8003a3c <UART_SetConfig+0x4e4>)
 8003a1c:	fba2 2303 	umull	r2, r3, r2, r3
 8003a20:	095b      	lsrs	r3, r3, #5
 8003a22:	f003 020f 	and.w	r2, r3, #15
 8003a26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	4422      	add	r2, r4
 8003a2e:	609a      	str	r2, [r3, #8]
}
 8003a30:	bf00      	nop
 8003a32:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003a36:	46bd      	mov	sp, r7
 8003a38:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a3c:	51eb851f 	.word	0x51eb851f

08003a40 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 8003a44:	f7fd f954 	bl	8000cf0 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 8003a48:	f000 f810 	bl	8003a6c <SystemClock_Config>

	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 8003a4c:	2000      	movs	r0, #0
 8003a4e:	f7fd f881 	bl	8000b54 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 8003a52:	2001      	movs	r0, #1
 8003a54:	f7fd f87e 	bl	8000b54 <BSP_LED_Init>

	coordinates_FSM_init();
 8003a58:	f7fc fe50 	bl	80006fc <coordinates_FSM_init>
	HAL_Delay(1000);
 8003a5c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003a60:	f7fd f9b2 	bl	8000dc8 <HAL_Delay>


	/* Infinite loop */
	while (1) {
		coordinates_FSM_update();
 8003a64:	f7fc fe6a 	bl	800073c <coordinates_FSM_update>
 8003a68:	e7fc      	b.n	8003a64 <main+0x24>
	...

08003a6c <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	b094      	sub	sp, #80	; 0x50
 8003a70:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 8003a72:	2300      	movs	r3, #0
 8003a74:	60bb      	str	r3, [r7, #8]
 8003a76:	4b2c      	ldr	r3, [pc, #176]	; (8003b28 <SystemClock_Config+0xbc>)
 8003a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a7a:	4a2b      	ldr	r2, [pc, #172]	; (8003b28 <SystemClock_Config+0xbc>)
 8003a7c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003a80:	6413      	str	r3, [r2, #64]	; 0x40
 8003a82:	4b29      	ldr	r3, [pc, #164]	; (8003b28 <SystemClock_Config+0xbc>)
 8003a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a86:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003a8a:	60bb      	str	r3, [r7, #8]
 8003a8c:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003a8e:	2300      	movs	r3, #0
 8003a90:	607b      	str	r3, [r7, #4]
 8003a92:	4b26      	ldr	r3, [pc, #152]	; (8003b2c <SystemClock_Config+0xc0>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4a25      	ldr	r2, [pc, #148]	; (8003b2c <SystemClock_Config+0xc0>)
 8003a98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003a9c:	6013      	str	r3, [r2, #0]
 8003a9e:	4b23      	ldr	r3, [pc, #140]	; (8003b2c <SystemClock_Config+0xc0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8003aa6:	607b      	str	r3, [r7, #4]
 8003aa8:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8003aae:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8003ab2:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003ab4:	2302      	movs	r3, #2
 8003ab6:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003ab8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003abc:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8003abe:	2308      	movs	r3, #8
 8003ac0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 8003ac2:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8003ac6:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003ac8:	2302      	movs	r3, #2
 8003aca:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8003acc:	2307      	movs	r3, #7
 8003ace:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003ad0:	f107 030c 	add.w	r3, r7, #12
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	f7fe fc91 	bl	80023fc <HAL_RCC_OscConfig>
 8003ada:	4603      	mov	r3, r0
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d001      	beq.n	8003ae4 <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8003ae0:	f000 f826 	bl	8003b30 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 8003ae4:	f7fe fc3a 	bl	800235c <HAL_PWREx_EnableOverDrive>
 8003ae8:	4603      	mov	r3, r0
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d001      	beq.n	8003af2 <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8003aee:	f000 f81f 	bl	8003b30 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 8003af2:	230f      	movs	r3, #15
 8003af4:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003af6:	2302      	movs	r3, #2
 8003af8:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003afa:	2300      	movs	r3, #0
 8003afc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003afe:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003b04:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003b08:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8003b0e:	2105      	movs	r1, #5
 8003b10:	4618      	mov	r0, r3
 8003b12:	f7fe feeb 	bl	80028ec <HAL_RCC_ClockConfig>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d001      	beq.n	8003b20 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8003b1c:	f000 f808 	bl	8003b30 <Error_Handler>
	}
}
 8003b20:	bf00      	nop
 8003b22:	3750      	adds	r7, #80	; 0x50
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40007000 	.word	0x40007000

08003b30 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8003b30:	b580      	push	{r7, lr}
 8003b32:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 8003b34:	2001      	movs	r0, #1
 8003b36:	f7fd f85d 	bl	8000bf4 <BSP_LED_On>
	while (1)
 8003b3a:	e7fe      	b.n	8003b3a <Error_Handler+0xa>

08003b3c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8003b3c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b74 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8003b40:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8003b42:	e003      	b.n	8003b4c <LoopCopyDataInit>

08003b44 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8003b46:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8003b48:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8003b4a:	3104      	adds	r1, #4

08003b4c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8003b4c:	480b      	ldr	r0, [pc, #44]	; (8003b7c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8003b4e:	4b0c      	ldr	r3, [pc, #48]	; (8003b80 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8003b50:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8003b52:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8003b54:	d3f6      	bcc.n	8003b44 <CopyDataInit>
  ldr  r2, =_sbss
 8003b56:	4a0b      	ldr	r2, [pc, #44]	; (8003b84 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8003b58:	e002      	b.n	8003b60 <LoopFillZerobss>

08003b5a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8003b5a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8003b5c:	f842 3b04 	str.w	r3, [r2], #4

08003b60 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8003b60:	4b09      	ldr	r3, [pc, #36]	; (8003b88 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8003b62:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8003b64:	d3f9      	bcc.n	8003b5a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b66:	f7fd f85f 	bl	8000c28 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b6a:	f000 f811 	bl	8003b90 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b6e:	f7ff ff67 	bl	8003a40 <main>
  bx  lr    
 8003b72:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8003b74:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 8003b78:	08003ca0 	.word	0x08003ca0
  ldr  r0, =_sdata
 8003b7c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8003b80:	20000054 	.word	0x20000054
  ldr  r2, =_sbss
 8003b84:	20000054 	.word	0x20000054
  ldr  r3, = _ebss
 8003b88:	20000178 	.word	0x20000178

08003b8c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b8c:	e7fe      	b.n	8003b8c <ADC_IRQHandler>
	...

08003b90 <__libc_init_array>:
 8003b90:	b570      	push	{r4, r5, r6, lr}
 8003b92:	4d0d      	ldr	r5, [pc, #52]	; (8003bc8 <__libc_init_array+0x38>)
 8003b94:	4c0d      	ldr	r4, [pc, #52]	; (8003bcc <__libc_init_array+0x3c>)
 8003b96:	1b64      	subs	r4, r4, r5
 8003b98:	10a4      	asrs	r4, r4, #2
 8003b9a:	2600      	movs	r6, #0
 8003b9c:	42a6      	cmp	r6, r4
 8003b9e:	d109      	bne.n	8003bb4 <__libc_init_array+0x24>
 8003ba0:	4d0b      	ldr	r5, [pc, #44]	; (8003bd0 <__libc_init_array+0x40>)
 8003ba2:	4c0c      	ldr	r4, [pc, #48]	; (8003bd4 <__libc_init_array+0x44>)
 8003ba4:	f000 f818 	bl	8003bd8 <_init>
 8003ba8:	1b64      	subs	r4, r4, r5
 8003baa:	10a4      	asrs	r4, r4, #2
 8003bac:	2600      	movs	r6, #0
 8003bae:	42a6      	cmp	r6, r4
 8003bb0:	d105      	bne.n	8003bbe <__libc_init_array+0x2e>
 8003bb2:	bd70      	pop	{r4, r5, r6, pc}
 8003bb4:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bb8:	4798      	blx	r3
 8003bba:	3601      	adds	r6, #1
 8003bbc:	e7ee      	b.n	8003b9c <__libc_init_array+0xc>
 8003bbe:	f855 3b04 	ldr.w	r3, [r5], #4
 8003bc2:	4798      	blx	r3
 8003bc4:	3601      	adds	r6, #1
 8003bc6:	e7f2      	b.n	8003bae <__libc_init_array+0x1e>
 8003bc8:	08003c98 	.word	0x08003c98
 8003bcc:	08003c98 	.word	0x08003c98
 8003bd0:	08003c98 	.word	0x08003c98
 8003bd4:	08003c9c 	.word	0x08003c9c

08003bd8 <_init>:
 8003bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003bda:	bf00      	nop
 8003bdc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bde:	bc08      	pop	{r3}
 8003be0:	469e      	mov	lr, r3
 8003be2:	4770      	bx	lr

08003be4 <_fini>:
 8003be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003be6:	bf00      	nop
 8003be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003bea:	bc08      	pop	{r3}
 8003bec:	469e      	mov	lr, r3
 8003bee:	4770      	bx	lr
