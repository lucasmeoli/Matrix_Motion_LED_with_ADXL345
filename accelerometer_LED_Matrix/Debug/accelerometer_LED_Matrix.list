
accelerometer_LED_Matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000226c  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08002418  08002418  00012418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002430  08002430  00020018  2**0
                  CONTENTS
  4 .ARM          00000008  08002430  08002430  00012430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002438  08002438  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002438  08002438  00012438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800243c  0800243c  0001243c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020018  2**0
                  CONTENTS
 10 .bss          00000078  20000018  20000018  00020018  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000090  20000090  00020018  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000702b  00000000  00000000  0002008b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000016a2  00000000  00000000  000270b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000770  00000000  00000000  00028758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000589  00000000  00000000  00028ec8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00002375  00000000  00000000  00029451  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0000a9ba  00000000  00000000  0002b7c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e31f4  00000000  00000000  00036180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00001c84  00000000  00000000  00119374  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  0011aff8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000018 	.word	0x20000018
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002400 	.word	0x08002400

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000001c 	.word	0x2000001c
 80001e8:	08002400 	.word	0x08002400

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000200:	f000 b970 	b.w	80004e4 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9e08      	ldr	r6, [sp, #32]
 8000222:	460d      	mov	r5, r1
 8000224:	4604      	mov	r4, r0
 8000226:	460f      	mov	r7, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4694      	mov	ip, r2
 8000230:	d965      	bls.n	80002fe <__udivmoddi4+0xe2>
 8000232:	fab2 f382 	clz	r3, r2
 8000236:	b143      	cbz	r3, 800024a <__udivmoddi4+0x2e>
 8000238:	fa02 fc03 	lsl.w	ip, r2, r3
 800023c:	f1c3 0220 	rsb	r2, r3, #32
 8000240:	409f      	lsls	r7, r3
 8000242:	fa20 f202 	lsr.w	r2, r0, r2
 8000246:	4317      	orrs	r7, r2
 8000248:	409c      	lsls	r4, r3
 800024a:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 800024e:	fa1f f58c 	uxth.w	r5, ip
 8000252:	fbb7 f1fe 	udiv	r1, r7, lr
 8000256:	0c22      	lsrs	r2, r4, #16
 8000258:	fb0e 7711 	mls	r7, lr, r1, r7
 800025c:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000260:	fb01 f005 	mul.w	r0, r1, r5
 8000264:	4290      	cmp	r0, r2
 8000266:	d90a      	bls.n	800027e <__udivmoddi4+0x62>
 8000268:	eb1c 0202 	adds.w	r2, ip, r2
 800026c:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000270:	f080 811c 	bcs.w	80004ac <__udivmoddi4+0x290>
 8000274:	4290      	cmp	r0, r2
 8000276:	f240 8119 	bls.w	80004ac <__udivmoddi4+0x290>
 800027a:	3902      	subs	r1, #2
 800027c:	4462      	add	r2, ip
 800027e:	1a12      	subs	r2, r2, r0
 8000280:	b2a4      	uxth	r4, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800028e:	fb00 f505 	mul.w	r5, r0, r5
 8000292:	42a5      	cmp	r5, r4
 8000294:	d90a      	bls.n	80002ac <__udivmoddi4+0x90>
 8000296:	eb1c 0404 	adds.w	r4, ip, r4
 800029a:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 800029e:	f080 8107 	bcs.w	80004b0 <__udivmoddi4+0x294>
 80002a2:	42a5      	cmp	r5, r4
 80002a4:	f240 8104 	bls.w	80004b0 <__udivmoddi4+0x294>
 80002a8:	4464      	add	r4, ip
 80002aa:	3802      	subs	r0, #2
 80002ac:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002b0:	1b64      	subs	r4, r4, r5
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11e      	cbz	r6, 80002be <__udivmoddi4+0xa2>
 80002b6:	40dc      	lsrs	r4, r3
 80002b8:	2300      	movs	r3, #0
 80002ba:	e9c6 4300 	strd	r4, r3, [r6]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d908      	bls.n	80002d8 <__udivmoddi4+0xbc>
 80002c6:	2e00      	cmp	r6, #0
 80002c8:	f000 80ed 	beq.w	80004a6 <__udivmoddi4+0x28a>
 80002cc:	2100      	movs	r1, #0
 80002ce:	e9c6 0500 	strd	r0, r5, [r6]
 80002d2:	4608      	mov	r0, r1
 80002d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d8:	fab3 f183 	clz	r1, r3
 80002dc:	2900      	cmp	r1, #0
 80002de:	d149      	bne.n	8000374 <__udivmoddi4+0x158>
 80002e0:	42ab      	cmp	r3, r5
 80002e2:	d302      	bcc.n	80002ea <__udivmoddi4+0xce>
 80002e4:	4282      	cmp	r2, r0
 80002e6:	f200 80f8 	bhi.w	80004da <__udivmoddi4+0x2be>
 80002ea:	1a84      	subs	r4, r0, r2
 80002ec:	eb65 0203 	sbc.w	r2, r5, r3
 80002f0:	2001      	movs	r0, #1
 80002f2:	4617      	mov	r7, r2
 80002f4:	2e00      	cmp	r6, #0
 80002f6:	d0e2      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f8:	e9c6 4700 	strd	r4, r7, [r6]
 80002fc:	e7df      	b.n	80002be <__udivmoddi4+0xa2>
 80002fe:	b902      	cbnz	r2, 8000302 <__udivmoddi4+0xe6>
 8000300:	deff      	udf	#255	; 0xff
 8000302:	fab2 f382 	clz	r3, r2
 8000306:	2b00      	cmp	r3, #0
 8000308:	f040 8090 	bne.w	800042c <__udivmoddi4+0x210>
 800030c:	1a8a      	subs	r2, r1, r2
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2101      	movs	r1, #1
 8000318:	fbb2 f5f7 	udiv	r5, r2, r7
 800031c:	fb07 2015 	mls	r0, r7, r5, r2
 8000320:	0c22      	lsrs	r2, r4, #16
 8000322:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000326:	fb0e f005 	mul.w	r0, lr, r5
 800032a:	4290      	cmp	r0, r2
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x124>
 800032e:	eb1c 0202 	adds.w	r2, ip, r2
 8000332:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x122>
 8000338:	4290      	cmp	r0, r2
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2b8>
 800033e:	4645      	mov	r5, r8
 8000340:	1a12      	subs	r2, r2, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb2 f0f7 	udiv	r0, r2, r7
 8000348:	fb07 2210 	mls	r2, r7, r0, r2
 800034c:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x14e>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x14c>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2c2>
 8000368:	4610      	mov	r0, r2
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000372:	e79f      	b.n	80002b4 <__udivmoddi4+0x98>
 8000374:	f1c1 0720 	rsb	r7, r1, #32
 8000378:	408b      	lsls	r3, r1
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa05 f401 	lsl.w	r4, r5, r1
 8000386:	fa20 f307 	lsr.w	r3, r0, r7
 800038a:	40fd      	lsrs	r5, r7
 800038c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000390:	4323      	orrs	r3, r4
 8000392:	fbb5 f8f9 	udiv	r8, r5, r9
 8000396:	fa1f fe8c 	uxth.w	lr, ip
 800039a:	fb09 5518 	mls	r5, r9, r8, r5
 800039e:	0c1c      	lsrs	r4, r3, #16
 80003a0:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80003a4:	fb08 f50e 	mul.w	r5, r8, lr
 80003a8:	42a5      	cmp	r5, r4
 80003aa:	fa02 f201 	lsl.w	r2, r2, r1
 80003ae:	fa00 f001 	lsl.w	r0, r0, r1
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b0>
 80003b4:	eb1c 0404 	adds.w	r4, ip, r4
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2b4>
 80003c0:	42a5      	cmp	r5, r4
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2b4>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4464      	add	r4, ip
 80003cc:	1b64      	subs	r4, r4, r5
 80003ce:	b29d      	uxth	r5, r3
 80003d0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003d4:	fb09 4413 	mls	r4, r9, r3, r4
 80003d8:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003dc:	fb03 fe0e 	mul.w	lr, r3, lr
 80003e0:	45a6      	cmp	lr, r4
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1da>
 80003e4:	eb1c 0404 	adds.w	r4, ip, r4
 80003e8:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2ac>
 80003ee:	45a6      	cmp	lr, r4
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2ac>
 80003f2:	3b02      	subs	r3, #2
 80003f4:	4464      	add	r4, ip
 80003f6:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003fa:	fba3 9502 	umull	r9, r5, r3, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	42ac      	cmp	r4, r5
 8000404:	46c8      	mov	r8, r9
 8000406:	46ae      	mov	lr, r5
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x29c>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x298>
 800040c:	b156      	cbz	r6, 8000424 <__udivmoddi4+0x208>
 800040e:	ebb0 0208 	subs.w	r2, r0, r8
 8000412:	eb64 040e 	sbc.w	r4, r4, lr
 8000416:	fa04 f707 	lsl.w	r7, r4, r7
 800041a:	40ca      	lsrs	r2, r1
 800041c:	40cc      	lsrs	r4, r1
 800041e:	4317      	orrs	r7, r2
 8000420:	e9c6 7400 	strd	r7, r4, [r6]
 8000424:	4618      	mov	r0, r3
 8000426:	2100      	movs	r1, #0
 8000428:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042c:	f1c3 0120 	rsb	r1, r3, #32
 8000430:	fa02 fc03 	lsl.w	ip, r2, r3
 8000434:	fa20 f201 	lsr.w	r2, r0, r1
 8000438:	fa25 f101 	lsr.w	r1, r5, r1
 800043c:	409d      	lsls	r5, r3
 800043e:	432a      	orrs	r2, r5
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb1 f0f7 	udiv	r0, r1, r7
 800044c:	fb07 1510 	mls	r5, r7, r0, r1
 8000450:	0c11      	lsrs	r1, r2, #16
 8000452:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000456:	fb00 f50e 	mul.w	r5, r0, lr
 800045a:	428d      	cmp	r5, r1
 800045c:	fa04 f403 	lsl.w	r4, r4, r3
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x258>
 8000462:	eb1c 0101 	adds.w	r1, ip, r1
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b0>
 800046c:	428d      	cmp	r5, r1
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b0>
 8000470:	3802      	subs	r0, #2
 8000472:	4461      	add	r1, ip
 8000474:	1b49      	subs	r1, r1, r5
 8000476:	b292      	uxth	r2, r2
 8000478:	fbb1 f5f7 	udiv	r5, r1, r7
 800047c:	fb07 1115 	mls	r1, r7, r5, r1
 8000480:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000484:	fb05 f10e 	mul.w	r1, r5, lr
 8000488:	4291      	cmp	r1, r2
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x282>
 800048c:	eb1c 0202 	adds.w	r2, ip, r2
 8000490:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000496:	4291      	cmp	r1, r2
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 800049a:	3d02      	subs	r5, #2
 800049c:	4462      	add	r2, ip
 800049e:	1a52      	subs	r2, r2, r1
 80004a0:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0xfc>
 80004a6:	4631      	mov	r1, r6
 80004a8:	4630      	mov	r0, r6
 80004aa:	e708      	b.n	80002be <__udivmoddi4+0xa2>
 80004ac:	4639      	mov	r1, r7
 80004ae:	e6e6      	b.n	800027e <__udivmoddi4+0x62>
 80004b0:	4610      	mov	r0, r2
 80004b2:	e6fb      	b.n	80002ac <__udivmoddi4+0x90>
 80004b4:	4548      	cmp	r0, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f0>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004c0:	3b01      	subs	r3, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f0>
 80004c4:	4645      	mov	r5, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x282>
 80004c8:	462b      	mov	r3, r5
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1da>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x258>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b0>
 80004d4:	3d02      	subs	r5, #2
 80004d6:	4462      	add	r2, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x124>
 80004da:	4608      	mov	r0, r1
 80004dc:	e70a      	b.n	80002f4 <__udivmoddi4+0xd8>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x14e>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <init_max7219>:



/* Public functions ---------------------------------------------------------*/

void init_max7219() {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b088      	sub	sp, #32
 80004ec:	af00      	add	r7, sp, #0

	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80004ee:	2300      	movs	r3, #0
 80004f0:	60bb      	str	r3, [r7, #8]
 80004f2:	4b3d      	ldr	r3, [pc, #244]	; (80005e8 <init_max7219+0x100>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	4a3c      	ldr	r2, [pc, #240]	; (80005e8 <init_max7219+0x100>)
 80004f8:	f043 0301 	orr.w	r3, r3, #1
 80004fc:	6313      	str	r3, [r2, #48]	; 0x30
 80004fe:	4b3a      	ldr	r3, [pc, #232]	; (80005e8 <init_max7219+0x100>)
 8000500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000502:	f003 0301 	and.w	r3, r3, #1
 8000506:	60bb      	str	r3, [r7, #8]
 8000508:	68bb      	ldr	r3, [r7, #8]
	/* Peripheral clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 800050a:	2300      	movs	r3, #0
 800050c:	607b      	str	r3, [r7, #4]
 800050e:	4b36      	ldr	r3, [pc, #216]	; (80005e8 <init_max7219+0x100>)
 8000510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000512:	4a35      	ldr	r2, [pc, #212]	; (80005e8 <init_max7219+0x100>)
 8000514:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000518:	6453      	str	r3, [r2, #68]	; 0x44
 800051a:	4b33      	ldr	r3, [pc, #204]	; (80005e8 <init_max7219+0x100>)
 800051c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800051e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000522:	607b      	str	r3, [r7, #4]
 8000524:	687b      	ldr	r3, [r7, #4]
//
//
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 8000526:	2200      	movs	r2, #0
 8000528:	2120      	movs	r1, #32
 800052a:	4830      	ldr	r0, [pc, #192]	; (80005ec <init_max7219+0x104>)
 800052c:	f000 fe00 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_7, GPIO_PIN_RESET);
 8000530:	2200      	movs	r2, #0
 8000532:	2180      	movs	r1, #128	; 0x80
 8000534:	482d      	ldr	r0, [pc, #180]	; (80005ec <init_max7219+0x104>)
 8000536:	f000 fdfb 	bl	8001130 <HAL_GPIO_WritePin>
    GPIO_InitStruct.Pin 		= GPIO_PIN_5|GPIO_PIN_7;
 800053a:	23a0      	movs	r3, #160	; 0xa0
 800053c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 800053e:	2302      	movs	r3, #2
 8000540:	613b      	str	r3, [r7, #16]
	//GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000542:	2300      	movs	r3, #0
 8000544:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8000546:	2300      	movs	r3, #0
 8000548:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 800054a:	2305      	movs	r3, #5
 800054c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800054e:	f107 030c 	add.w	r3, r7, #12
 8000552:	4619      	mov	r1, r3
 8000554:	4825      	ldr	r0, [pc, #148]	; (80005ec <init_max7219+0x104>)
 8000556:	f000 fc3f 	bl	8000dd8 <HAL_GPIO_Init>


	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 800055a:	2200      	movs	r2, #0
 800055c:	2110      	movs	r1, #16
 800055e:	4823      	ldr	r0, [pc, #140]	; (80005ec <init_max7219+0x104>)
 8000560:	f000 fde6 	bl	8001130 <HAL_GPIO_WritePin>
	/*Configure GPIO pin : PA6 */
	GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000564:	2310      	movs	r3, #16
 8000566:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000568:	2301      	movs	r3, #1
 800056a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056c:	2300      	movs	r3, #0
 800056e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000570:	2300      	movs	r3, #0
 8000572:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000574:	f107 030c 	add.w	r3, r7, #12
 8000578:	4619      	mov	r1, r3
 800057a:	481c      	ldr	r0, [pc, #112]	; (80005ec <init_max7219+0x104>)
 800057c:	f000 fc2c 	bl	8000dd8 <HAL_GPIO_Init>

	/* SPI configuration*/
	hspi1.Instance 					= SPI1;
 8000580:	4b1b      	ldr	r3, [pc, #108]	; (80005f0 <init_max7219+0x108>)
 8000582:	4a1c      	ldr	r2, [pc, #112]	; (80005f4 <init_max7219+0x10c>)
 8000584:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode 				= SPI_MODE_MASTER;
 8000586:	4b1a      	ldr	r3, [pc, #104]	; (80005f0 <init_max7219+0x108>)
 8000588:	f44f 7282 	mov.w	r2, #260	; 0x104
 800058c:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction			= SPI_DIRECTION_1LINE;
 800058e:	4b18      	ldr	r3, [pc, #96]	; (80005f0 <init_max7219+0x108>)
 8000590:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000594:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize				= SPI_DATASIZE_8BIT;
 8000596:	4b16      	ldr	r3, [pc, #88]	; (80005f0 <init_max7219+0x108>)
 8000598:	2200      	movs	r2, #0
 800059a:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity			= SPI_POLARITY_LOW;
 800059c:	4b14      	ldr	r3, [pc, #80]	; (80005f0 <init_max7219+0x108>)
 800059e:	2200      	movs	r2, #0
 80005a0:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase				= SPI_PHASE_1EDGE;
 80005a2:	4b13      	ldr	r3, [pc, #76]	; (80005f0 <init_max7219+0x108>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS 					= SPI_NSS_SOFT;
 80005a8:	4b11      	ldr	r3, [pc, #68]	; (80005f0 <init_max7219+0x108>)
 80005aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80005ae:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_256;
 80005b0:	4b0f      	ldr	r3, [pc, #60]	; (80005f0 <init_max7219+0x108>)
 80005b2:	2238      	movs	r2, #56	; 0x38
 80005b4:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit				= SPI_FIRSTBIT_MSB;
 80005b6:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <init_max7219+0x108>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode				= SPI_TIMODE_DISABLE;
 80005bc:	4b0c      	ldr	r3, [pc, #48]	; (80005f0 <init_max7219+0x108>)
 80005be:	2200      	movs	r2, #0
 80005c0:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 80005c2:	4b0b      	ldr	r3, [pc, #44]	; (80005f0 <init_max7219+0x108>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial 		= 10;
 80005c8:	4b09      	ldr	r3, [pc, #36]	; (80005f0 <init_max7219+0x108>)
 80005ca:	220a      	movs	r2, #10
 80005cc:	62da      	str	r2, [r3, #44]	; 0x2c

	HAL_SPI_Init(&hspi1);
 80005ce:	4808      	ldr	r0, [pc, #32]	; (80005f0 <init_max7219+0x108>)
 80005d0:	f001 fa9c 	bl	8001b0c <HAL_SPI_Init>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, GPIO_PIN_RESET);
 80005d4:	2200      	movs	r2, #0
 80005d6:	2120      	movs	r1, #32
 80005d8:	4804      	ldr	r0, [pc, #16]	; (80005ec <init_max7219+0x104>)
 80005da:	f000 fda9 	bl	8001130 <HAL_GPIO_WritePin>
}
 80005de:	bf00      	nop
 80005e0:	3720      	adds	r7, #32
 80005e2:	46bd      	mov	sp, r7
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	40023800 	.word	0x40023800
 80005ec:	40020000 	.word	0x40020000
 80005f0:	20000034 	.word	0x20000034
 80005f4:	40013000 	.word	0x40013000

080005f8 <send_data_SPI>:

void send_data_SPI(uint8_t reg, uint8_t data) {
 80005f8:	b580      	push	{r7, lr}
 80005fa:	b082      	sub	sp, #8
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	4603      	mov	r3, r0
 8000600:	460a      	mov	r2, r1
 8000602:	71fb      	strb	r3, [r7, #7]
 8000604:	4613      	mov	r3, r2
 8000606:	71bb      	strb	r3, [r7, #6]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // select slave
 8000608:	2200      	movs	r2, #0
 800060a:	2110      	movs	r1, #16
 800060c:	4813      	ldr	r0, [pc, #76]	; (800065c <send_data_SPI+0x64>)
 800060e:	f000 fd8f 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000612:	1df9      	adds	r1, r7, #7
 8000614:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000618:	2201      	movs	r2, #1
 800061a:	4811      	ldr	r0, [pc, #68]	; (8000660 <send_data_SPI+0x68>)
 800061c:	f001 fb11 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000620:	bf00      	nop
 8000622:	480f      	ldr	r0, [pc, #60]	; (8000660 <send_data_SPI+0x68>)
 8000624:	f001 fc6b 	bl	8001efe <HAL_SPI_GetState>
 8000628:	4603      	mov	r3, r0
 800062a:	2b01      	cmp	r3, #1
 800062c:	d1f9      	bne.n	8000622 <send_data_SPI+0x2a>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800062e:	1db9      	adds	r1, r7, #6
 8000630:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000634:	2201      	movs	r2, #1
 8000636:	480a      	ldr	r0, [pc, #40]	; (8000660 <send_data_SPI+0x68>)
 8000638:	f001 fb03 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800063c:	bf00      	nop
 800063e:	4808      	ldr	r0, [pc, #32]	; (8000660 <send_data_SPI+0x68>)
 8000640:	f001 fc5d 	bl	8001efe <HAL_SPI_GetState>
 8000644:	4603      	mov	r3, r0
 8000646:	2b01      	cmp	r3, #1
 8000648:	d1f9      	bne.n	800063e <send_data_SPI+0x46>
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 800064a:	2201      	movs	r2, #1
 800064c:	2110      	movs	r1, #16
 800064e:	4803      	ldr	r0, [pc, #12]	; (800065c <send_data_SPI+0x64>)
 8000650:	f000 fd6e 	bl	8001130 <HAL_GPIO_WritePin>
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
//	HAL_SPI_Transmit(&hspi1, (uint8_t *)aux, 1, HAL_MAX_DELAY);
//	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);


}
 8000654:	bf00      	nop
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}
 800065c:	40020000 	.word	0x40020000
 8000660:	20000034 	.word	0x20000034

08000664 <send_data_SPI2>:

void send_data_SPI2(uint8_t reg, uint8_t data) {
 8000664:	b580      	push	{r7, lr}
 8000666:	b084      	sub	sp, #16
 8000668:	af00      	add	r7, sp, #0
 800066a:	4603      	mov	r3, r0
 800066c:	460a      	mov	r2, r1
 800066e:	71fb      	strb	r3, [r7, #7]
 8000670:	4613      	mov	r3, r2
 8000672:	71bb      	strb	r3, [r7, #6]
	uint8_t no_op = 0x00;
 8000674:	2300      	movs	r3, #0
 8000676:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // select slave
 8000678:	2200      	movs	r2, #0
 800067a:	2110      	movs	r1, #16
 800067c:	4822      	ldr	r0, [pc, #136]	; (8000708 <send_data_SPI2+0xa4>)
 800067e:	f000 fd57 	bl	8001130 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000682:	1df9      	adds	r1, r7, #7
 8000684:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000688:	2201      	movs	r2, #1
 800068a:	4820      	ldr	r0, [pc, #128]	; (800070c <send_data_SPI2+0xa8>)
 800068c:	f001 fad9 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000690:	bf00      	nop
 8000692:	481e      	ldr	r0, [pc, #120]	; (800070c <send_data_SPI2+0xa8>)
 8000694:	f001 fc33 	bl	8001efe <HAL_SPI_GetState>
 8000698:	4603      	mov	r3, r0
 800069a:	2b01      	cmp	r3, #1
 800069c:	d1f9      	bne.n	8000692 <send_data_SPI2+0x2e>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800069e:	1db9      	adds	r1, r7, #6
 80006a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006a4:	2201      	movs	r2, #1
 80006a6:	4819      	ldr	r0, [pc, #100]	; (800070c <send_data_SPI2+0xa8>)
 80006a8:	f001 facb 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80006ac:	bf00      	nop
 80006ae:	4817      	ldr	r0, [pc, #92]	; (800070c <send_data_SPI2+0xa8>)
 80006b0:	f001 fc25 	bl	8001efe <HAL_SPI_GetState>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b01      	cmp	r3, #1
 80006b8:	d1f9      	bne.n	80006ae <send_data_SPI2+0x4a>

	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 80006ba:	f107 010f 	add.w	r1, r7, #15
 80006be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006c2:	2201      	movs	r2, #1
 80006c4:	4811      	ldr	r0, [pc, #68]	; (800070c <send_data_SPI2+0xa8>)
 80006c6:	f001 fabc 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80006ca:	bf00      	nop
 80006cc:	480f      	ldr	r0, [pc, #60]	; (800070c <send_data_SPI2+0xa8>)
 80006ce:	f001 fc16 	bl	8001efe <HAL_SPI_GetState>
 80006d2:	4603      	mov	r3, r0
 80006d4:	2b01      	cmp	r3, #1
 80006d6:	d1f9      	bne.n	80006cc <send_data_SPI2+0x68>
	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 80006d8:	f107 010f 	add.w	r1, r7, #15
 80006dc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006e0:	2201      	movs	r2, #1
 80006e2:	480a      	ldr	r0, [pc, #40]	; (800070c <send_data_SPI2+0xa8>)
 80006e4:	f001 faad 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80006e8:	bf00      	nop
 80006ea:	4808      	ldr	r0, [pc, #32]	; (800070c <send_data_SPI2+0xa8>)
 80006ec:	f001 fc07 	bl	8001efe <HAL_SPI_GetState>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b01      	cmp	r3, #1
 80006f4:	d1f9      	bne.n	80006ea <send_data_SPI2+0x86>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80006f6:	2201      	movs	r2, #1
 80006f8:	2110      	movs	r1, #16
 80006fa:	4803      	ldr	r0, [pc, #12]	; (8000708 <send_data_SPI2+0xa4>)
 80006fc:	f000 fd18 	bl	8001130 <HAL_GPIO_WritePin>

}
 8000700:	bf00      	nop
 8000702:	3710      	adds	r7, #16
 8000704:	46bd      	mov	sp, r7
 8000706:	bd80      	pop	{r7, pc}
 8000708:	40020000 	.word	0x40020000
 800070c:	20000034 	.word	0x20000034

08000710 <send_data_SPI3>:

void send_data_SPI3(uint8_t reg, uint8_t data) {
 8000710:	b580      	push	{r7, lr}
 8000712:	b084      	sub	sp, #16
 8000714:	af00      	add	r7, sp, #0
 8000716:	4603      	mov	r3, r0
 8000718:	460a      	mov	r2, r1
 800071a:	71fb      	strb	r3, [r7, #7]
 800071c:	4613      	mov	r3, r2
 800071e:	71bb      	strb	r3, [r7, #6]
	uint8_t no_op = 0x00;
 8000720:	2300      	movs	r3, #0
 8000722:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // select slave
 8000724:	2200      	movs	r2, #0
 8000726:	2110      	movs	r1, #16
 8000728:	4831      	ldr	r0, [pc, #196]	; (80007f0 <send_data_SPI3+0xe0>)
 800072a:	f000 fd01 	bl	8001130 <HAL_GPIO_WritePin>

	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 800072e:	1df9      	adds	r1, r7, #7
 8000730:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000734:	2201      	movs	r2, #1
 8000736:	482f      	ldr	r0, [pc, #188]	; (80007f4 <send_data_SPI3+0xe4>)
 8000738:	f001 fa83 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800073c:	bf00      	nop
 800073e:	482d      	ldr	r0, [pc, #180]	; (80007f4 <send_data_SPI3+0xe4>)
 8000740:	f001 fbdd 	bl	8001efe <HAL_SPI_GetState>
 8000744:	4603      	mov	r3, r0
 8000746:	2b01      	cmp	r3, #1
 8000748:	d1f9      	bne.n	800073e <send_data_SPI3+0x2e>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 800074a:	1db9      	adds	r1, r7, #6
 800074c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000750:	2201      	movs	r2, #1
 8000752:	4828      	ldr	r0, [pc, #160]	; (80007f4 <send_data_SPI3+0xe4>)
 8000754:	f001 fa75 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000758:	bf00      	nop
 800075a:	4826      	ldr	r0, [pc, #152]	; (80007f4 <send_data_SPI3+0xe4>)
 800075c:	f001 fbcf 	bl	8001efe <HAL_SPI_GetState>
 8000760:	4603      	mov	r3, r0
 8000762:	2b01      	cmp	r3, #1
 8000764:	d1f9      	bne.n	800075a <send_data_SPI3+0x4a>

	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 8000766:	f107 010f 	add.w	r1, r7, #15
 800076a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800076e:	2201      	movs	r2, #1
 8000770:	4820      	ldr	r0, [pc, #128]	; (80007f4 <send_data_SPI3+0xe4>)
 8000772:	f001 fa66 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000776:	bf00      	nop
 8000778:	481e      	ldr	r0, [pc, #120]	; (80007f4 <send_data_SPI3+0xe4>)
 800077a:	f001 fbc0 	bl	8001efe <HAL_SPI_GetState>
 800077e:	4603      	mov	r3, r0
 8000780:	2b01      	cmp	r3, #1
 8000782:	d1f9      	bne.n	8000778 <send_data_SPI3+0x68>
	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 8000784:	f107 010f 	add.w	r1, r7, #15
 8000788:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800078c:	2201      	movs	r2, #1
 800078e:	4819      	ldr	r0, [pc, #100]	; (80007f4 <send_data_SPI3+0xe4>)
 8000790:	f001 fa57 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000794:	bf00      	nop
 8000796:	4817      	ldr	r0, [pc, #92]	; (80007f4 <send_data_SPI3+0xe4>)
 8000798:	f001 fbb1 	bl	8001efe <HAL_SPI_GetState>
 800079c:	4603      	mov	r3, r0
 800079e:	2b01      	cmp	r3, #1
 80007a0:	d1f9      	bne.n	8000796 <send_data_SPI3+0x86>

	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 80007a2:	f107 010f 	add.w	r1, r7, #15
 80007a6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007aa:	2201      	movs	r2, #1
 80007ac:	4811      	ldr	r0, [pc, #68]	; (80007f4 <send_data_SPI3+0xe4>)
 80007ae:	f001 fa48 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80007b2:	bf00      	nop
 80007b4:	480f      	ldr	r0, [pc, #60]	; (80007f4 <send_data_SPI3+0xe4>)
 80007b6:	f001 fba2 	bl	8001efe <HAL_SPI_GetState>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b01      	cmp	r3, #1
 80007be:	d1f9      	bne.n	80007b4 <send_data_SPI3+0xa4>
	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 80007c0:	f107 010f 	add.w	r1, r7, #15
 80007c4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c8:	2201      	movs	r2, #1
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <send_data_SPI3+0xe4>)
 80007cc:	f001 fa39 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80007d0:	bf00      	nop
 80007d2:	4808      	ldr	r0, [pc, #32]	; (80007f4 <send_data_SPI3+0xe4>)
 80007d4:	f001 fb93 	bl	8001efe <HAL_SPI_GetState>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b01      	cmp	r3, #1
 80007dc:	d1f9      	bne.n	80007d2 <send_data_SPI3+0xc2>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 80007de:	2201      	movs	r2, #1
 80007e0:	2110      	movs	r1, #16
 80007e2:	4803      	ldr	r0, [pc, #12]	; (80007f0 <send_data_SPI3+0xe0>)
 80007e4:	f000 fca4 	bl	8001130 <HAL_GPIO_WritePin>

}
 80007e8:	bf00      	nop
 80007ea:	3710      	adds	r7, #16
 80007ec:	46bd      	mov	sp, r7
 80007ee:	bd80      	pop	{r7, pc}
 80007f0:	40020000 	.word	0x40020000
 80007f4:	20000034 	.word	0x20000034

080007f8 <send_data_SPI4>:

void send_data_SPI4(uint8_t reg, uint8_t data) {
 80007f8:	b580      	push	{r7, lr}
 80007fa:	b084      	sub	sp, #16
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	4603      	mov	r3, r0
 8000800:	460a      	mov	r2, r1
 8000802:	71fb      	strb	r3, [r7, #7]
 8000804:	4613      	mov	r3, r2
 8000806:	71bb      	strb	r3, [r7, #6]
	uint8_t no_op = 0x00;
 8000808:	2300      	movs	r3, #0
 800080a:	73fb      	strb	r3, [r7, #15]

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET); // select slave
 800080c:	2200      	movs	r2, #0
 800080e:	2110      	movs	r1, #16
 8000810:	4840      	ldr	r0, [pc, #256]	; (8000914 <send_data_SPI4+0x11c>)
 8000812:	f000 fc8d 	bl	8001130 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi1, &reg, 1, 1000);
 8000816:	1df9      	adds	r1, r7, #7
 8000818:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800081c:	2201      	movs	r2, #1
 800081e:	483e      	ldr	r0, [pc, #248]	; (8000918 <send_data_SPI4+0x120>)
 8000820:	f001 fa0f 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000824:	bf00      	nop
 8000826:	483c      	ldr	r0, [pc, #240]	; (8000918 <send_data_SPI4+0x120>)
 8000828:	f001 fb69 	bl	8001efe <HAL_SPI_GetState>
 800082c:	4603      	mov	r3, r0
 800082e:	2b01      	cmp	r3, #1
 8000830:	d1f9      	bne.n	8000826 <send_data_SPI4+0x2e>
	HAL_SPI_Transmit(&hspi1, &data, 1, 1000);
 8000832:	1db9      	adds	r1, r7, #6
 8000834:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000838:	2201      	movs	r2, #1
 800083a:	4837      	ldr	r0, [pc, #220]	; (8000918 <send_data_SPI4+0x120>)
 800083c:	f001 fa01 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 8000840:	bf00      	nop
 8000842:	4835      	ldr	r0, [pc, #212]	; (8000918 <send_data_SPI4+0x120>)
 8000844:	f001 fb5b 	bl	8001efe <HAL_SPI_GetState>
 8000848:	4603      	mov	r3, r0
 800084a:	2b01      	cmp	r3, #1
 800084c:	d1f9      	bne.n	8000842 <send_data_SPI4+0x4a>

	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 800084e:	f107 010f 	add.w	r1, r7, #15
 8000852:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000856:	2201      	movs	r2, #1
 8000858:	482f      	ldr	r0, [pc, #188]	; (8000918 <send_data_SPI4+0x120>)
 800085a:	f001 f9f2 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800085e:	bf00      	nop
 8000860:	482d      	ldr	r0, [pc, #180]	; (8000918 <send_data_SPI4+0x120>)
 8000862:	f001 fb4c 	bl	8001efe <HAL_SPI_GetState>
 8000866:	4603      	mov	r3, r0
 8000868:	2b01      	cmp	r3, #1
 800086a:	d1f9      	bne.n	8000860 <send_data_SPI4+0x68>
	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 800086c:	f107 010f 	add.w	r1, r7, #15
 8000870:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000874:	2201      	movs	r2, #1
 8000876:	4828      	ldr	r0, [pc, #160]	; (8000918 <send_data_SPI4+0x120>)
 8000878:	f001 f9e3 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800087c:	bf00      	nop
 800087e:	4826      	ldr	r0, [pc, #152]	; (8000918 <send_data_SPI4+0x120>)
 8000880:	f001 fb3d 	bl	8001efe <HAL_SPI_GetState>
 8000884:	4603      	mov	r3, r0
 8000886:	2b01      	cmp	r3, #1
 8000888:	d1f9      	bne.n	800087e <send_data_SPI4+0x86>

	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 800088a:	f107 010f 	add.w	r1, r7, #15
 800088e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000892:	2201      	movs	r2, #1
 8000894:	4820      	ldr	r0, [pc, #128]	; (8000918 <send_data_SPI4+0x120>)
 8000896:	f001 f9d4 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 800089a:	bf00      	nop
 800089c:	481e      	ldr	r0, [pc, #120]	; (8000918 <send_data_SPI4+0x120>)
 800089e:	f001 fb2e 	bl	8001efe <HAL_SPI_GetState>
 80008a2:	4603      	mov	r3, r0
 80008a4:	2b01      	cmp	r3, #1
 80008a6:	d1f9      	bne.n	800089c <send_data_SPI4+0xa4>
	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 80008a8:	f107 010f 	add.w	r1, r7, #15
 80008ac:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008b0:	2201      	movs	r2, #1
 80008b2:	4819      	ldr	r0, [pc, #100]	; (8000918 <send_data_SPI4+0x120>)
 80008b4:	f001 f9c5 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008b8:	bf00      	nop
 80008ba:	4817      	ldr	r0, [pc, #92]	; (8000918 <send_data_SPI4+0x120>)
 80008bc:	f001 fb1f 	bl	8001efe <HAL_SPI_GetState>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b01      	cmp	r3, #1
 80008c4:	d1f9      	bne.n	80008ba <send_data_SPI4+0xc2>

	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 80008c6:	f107 010f 	add.w	r1, r7, #15
 80008ca:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ce:	2201      	movs	r2, #1
 80008d0:	4811      	ldr	r0, [pc, #68]	; (8000918 <send_data_SPI4+0x120>)
 80008d2:	f001 f9b6 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008d6:	bf00      	nop
 80008d8:	480f      	ldr	r0, [pc, #60]	; (8000918 <send_data_SPI4+0x120>)
 80008da:	f001 fb10 	bl	8001efe <HAL_SPI_GetState>
 80008de:	4603      	mov	r3, r0
 80008e0:	2b01      	cmp	r3, #1
 80008e2:	d1f9      	bne.n	80008d8 <send_data_SPI4+0xe0>
	HAL_SPI_Transmit(&hspi1, &no_op, 1, 1000);
 80008e4:	f107 010f 	add.w	r1, r7, #15
 80008e8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80008ec:	2201      	movs	r2, #1
 80008ee:	480a      	ldr	r0, [pc, #40]	; (8000918 <send_data_SPI4+0x120>)
 80008f0:	f001 f9a7 	bl	8001c42 <HAL_SPI_Transmit>
	while(HAL_SPI_GetState(&hspi1) != HAL_SPI_STATE_READY);
 80008f4:	bf00      	nop
 80008f6:	4808      	ldr	r0, [pc, #32]	; (8000918 <send_data_SPI4+0x120>)
 80008f8:	f001 fb01 	bl	8001efe <HAL_SPI_GetState>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b01      	cmp	r3, #1
 8000900:	d1f9      	bne.n	80008f6 <send_data_SPI4+0xfe>

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000902:	2201      	movs	r2, #1
 8000904:	2110      	movs	r1, #16
 8000906:	4803      	ldr	r0, [pc, #12]	; (8000914 <send_data_SPI4+0x11c>)
 8000908:	f000 fc12 	bl	8001130 <HAL_GPIO_WritePin>


}
 800090c:	bf00      	nop
 800090e:	3710      	adds	r7, #16
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	40020000 	.word	0x40020000
 8000918:	20000034 	.word	0x20000034

0800091c <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 800091c:	b580      	push	{r7, lr}
 800091e:	b08a      	sub	sp, #40	; 0x28
 8000920:	af00      	add	r7, sp, #0
 8000922:	4603      	mov	r3, r0
 8000924:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8000926:	79fb      	ldrb	r3, [r7, #7]
 8000928:	2b00      	cmp	r3, #0
 800092a:	d10e      	bne.n	800094a <BSP_LED_Init+0x2e>
 800092c:	2300      	movs	r3, #0
 800092e:	613b      	str	r3, [r7, #16]
 8000930:	4b1f      	ldr	r3, [pc, #124]	; (80009b0 <BSP_LED_Init+0x94>)
 8000932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000934:	4a1e      	ldr	r2, [pc, #120]	; (80009b0 <BSP_LED_Init+0x94>)
 8000936:	f043 0302 	orr.w	r3, r3, #2
 800093a:	6313      	str	r3, [r2, #48]	; 0x30
 800093c:	4b1c      	ldr	r3, [pc, #112]	; (80009b0 <BSP_LED_Init+0x94>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	f003 0302 	and.w	r3, r3, #2
 8000944:	613b      	str	r3, [r7, #16]
 8000946:	693b      	ldr	r3, [r7, #16]
 8000948:	e00d      	b.n	8000966 <BSP_LED_Init+0x4a>
 800094a:	2300      	movs	r3, #0
 800094c:	60fb      	str	r3, [r7, #12]
 800094e:	4b18      	ldr	r3, [pc, #96]	; (80009b0 <BSP_LED_Init+0x94>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a17      	ldr	r2, [pc, #92]	; (80009b0 <BSP_LED_Init+0x94>)
 8000954:	f043 0302 	orr.w	r3, r3, #2
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b15      	ldr	r3, [pc, #84]	; (80009b0 <BSP_LED_Init+0x94>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0302 	and.w	r3, r3, #2
 8000962:	60fb      	str	r3, [r7, #12]
 8000964:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8000966:	79fb      	ldrb	r3, [r7, #7]
 8000968:	4a12      	ldr	r2, [pc, #72]	; (80009b4 <BSP_LED_Init+0x98>)
 800096a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000970:	2301      	movs	r3, #1
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8000978:	2302      	movs	r3, #2
 800097a:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 800097c:	79fb      	ldrb	r3, [r7, #7]
 800097e:	4a0e      	ldr	r2, [pc, #56]	; (80009b8 <BSP_LED_Init+0x9c>)
 8000980:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000984:	f107 0214 	add.w	r2, r7, #20
 8000988:	4611      	mov	r1, r2
 800098a:	4618      	mov	r0, r3
 800098c:	f000 fa24 	bl	8000dd8 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	4a09      	ldr	r2, [pc, #36]	; (80009b8 <BSP_LED_Init+0x9c>)
 8000994:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8000998:	79fb      	ldrb	r3, [r7, #7]
 800099a:	4a06      	ldr	r2, [pc, #24]	; (80009b4 <BSP_LED_Init+0x98>)
 800099c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a0:	2200      	movs	r2, #0
 80009a2:	4619      	mov	r1, r3
 80009a4:	f000 fbc4 	bl	8001130 <HAL_GPIO_WritePin>
}
 80009a8:	bf00      	nop
 80009aa:	3728      	adds	r7, #40	; 0x28
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	40023800 	.word	0x40023800
 80009b4:	08002418 	.word	0x08002418
 80009b8:	20000000 	.word	0x20000000

080009bc <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b082      	sub	sp, #8
 80009c0:	af00      	add	r7, sp, #0
 80009c2:	4603      	mov	r3, r0
 80009c4:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80009c6:	79fb      	ldrb	r3, [r7, #7]
 80009c8:	4a07      	ldr	r2, [pc, #28]	; (80009e8 <BSP_LED_On+0x2c>)
 80009ca:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80009ce:	79fb      	ldrb	r3, [r7, #7]
 80009d0:	4a06      	ldr	r2, [pc, #24]	; (80009ec <BSP_LED_On+0x30>)
 80009d2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009d6:	2201      	movs	r2, #1
 80009d8:	4619      	mov	r1, r3
 80009da:	f000 fba9 	bl	8001130 <HAL_GPIO_WritePin>
}
 80009de:	bf00      	nop
 80009e0:	3708      	adds	r7, #8
 80009e2:	46bd      	mov	sp, r7
 80009e4:	bd80      	pop	{r7, pc}
 80009e6:	bf00      	nop
 80009e8:	20000000 	.word	0x20000000
 80009ec:	08002418 	.word	0x08002418

080009f0 <BSP_LED_Toggle>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3 
  */
void BSP_LED_Toggle(Led_TypeDef Led)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	4603      	mov	r3, r0
 80009f8:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 80009fa:	79fb      	ldrb	r3, [r7, #7]
 80009fc:	4a07      	ldr	r2, [pc, #28]	; (8000a1c <BSP_LED_Toggle+0x2c>)
 80009fe:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000a02:	79fb      	ldrb	r3, [r7, #7]
 8000a04:	4906      	ldr	r1, [pc, #24]	; (8000a20 <BSP_LED_Toggle+0x30>)
 8000a06:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4610      	mov	r0, r2
 8000a0e:	f000 fba8 	bl	8001162 <HAL_GPIO_TogglePin>
}
 8000a12:	bf00      	nop
 8000a14:	3708      	adds	r7, #8
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	20000000 	.word	0x20000000
 8000a20:	08002418 	.word	0x08002418

08000a24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a24:	b480      	push	{r7}
 8000a26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a28:	4b16      	ldr	r3, [pc, #88]	; (8000a84 <SystemInit+0x60>)
 8000a2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a2e:	4a15      	ldr	r2, [pc, #84]	; (8000a84 <SystemInit+0x60>)
 8000a30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000a34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000a38:	4b13      	ldr	r3, [pc, #76]	; (8000a88 <SystemInit+0x64>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a12      	ldr	r2, [pc, #72]	; (8000a88 <SystemInit+0x64>)
 8000a3e:	f043 0301 	orr.w	r3, r3, #1
 8000a42:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000a44:	4b10      	ldr	r3, [pc, #64]	; (8000a88 <SystemInit+0x64>)
 8000a46:	2200      	movs	r2, #0
 8000a48:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8000a4a:	4b0f      	ldr	r3, [pc, #60]	; (8000a88 <SystemInit+0x64>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4a0e      	ldr	r2, [pc, #56]	; (8000a88 <SystemInit+0x64>)
 8000a50:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8000a54:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000a58:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8000a5a:	4b0b      	ldr	r3, [pc, #44]	; (8000a88 <SystemInit+0x64>)
 8000a5c:	4a0b      	ldr	r2, [pc, #44]	; (8000a8c <SystemInit+0x68>)
 8000a5e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8000a60:	4b09      	ldr	r3, [pc, #36]	; (8000a88 <SystemInit+0x64>)
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	4a08      	ldr	r2, [pc, #32]	; (8000a88 <SystemInit+0x64>)
 8000a66:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000a6a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8000a6c:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <SystemInit+0x64>)
 8000a6e:	2200      	movs	r2, #0
 8000a70:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a72:	4b04      	ldr	r3, [pc, #16]	; (8000a84 <SystemInit+0x60>)
 8000a74:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000a78:	609a      	str	r2, [r3, #8]
#endif
}
 8000a7a:	bf00      	nop
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	e000ed00 	.word	0xe000ed00
 8000a88:	40023800 	.word	0x40023800
 8000a8c:	24003010 	.word	0x24003010

08000a90 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
}
 8000a94:	bf00      	nop
 8000a96:	46bd      	mov	sp, r7
 8000a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a9c:	4770      	bx	lr

08000a9e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8000a9e:	b480      	push	{r7}
 8000aa0:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <HardFault_Handler+0x4>

08000aa4 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8000aa4:	b480      	push	{r7}
 8000aa6:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8000aa8:	e7fe      	b.n	8000aa8 <MemManage_Handler+0x4>

08000aaa <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 8000aaa:	b480      	push	{r7}
 8000aac:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 8000aae:	e7fe      	b.n	8000aae <BusFault_Handler+0x4>

08000ab0 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8000ab0:	b480      	push	{r7}
 8000ab2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8000ab4:	e7fe      	b.n	8000ab4 <UsageFault_Handler+0x4>

08000ab6 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8000ab6:	b480      	push	{r7}
 8000ab8:	af00      	add	r7, sp, #0
}
 8000aba:	bf00      	nop
 8000abc:	46bd      	mov	sp, r7
 8000abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac2:	4770      	bx	lr

08000ac4 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	af00      	add	r7, sp, #0
}
 8000ac8:	bf00      	nop
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr

08000ad2 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8000ad2:	b480      	push	{r7}
 8000ad4:	af00      	add	r7, sp, #0
}
 8000ad6:	bf00      	nop
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ade:	4770      	bx	lr

08000ae0 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8000ae4:	f000 f84e 	bl	8000b84 <HAL_IncTick>
}
 8000ae8:	bf00      	nop
 8000aea:	bd80      	pop	{r7, pc}

08000aec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000af0:	4b0b      	ldr	r3, [pc, #44]	; (8000b20 <HAL_Init+0x34>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a0a      	ldr	r2, [pc, #40]	; (8000b20 <HAL_Init+0x34>)
 8000af6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000afa:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000afc:	4b08      	ldr	r3, [pc, #32]	; (8000b20 <HAL_Init+0x34>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	4a07      	ldr	r2, [pc, #28]	; (8000b20 <HAL_Init+0x34>)
 8000b02:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b08:	2003      	movs	r0, #3
 8000b0a:	f000 f931 	bl	8000d70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b0e:	200f      	movs	r0, #15
 8000b10:	f000 f808 	bl	8000b24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b14:	f000 fb3f 	bl	8001196 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b18:	2300      	movs	r3, #0
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40023c00 	.word	0x40023c00

08000b24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b24:	b580      	push	{r7, lr}
 8000b26:	b082      	sub	sp, #8
 8000b28:	af00      	add	r7, sp, #0
 8000b2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b2c:	4b12      	ldr	r3, [pc, #72]	; (8000b78 <HAL_InitTick+0x54>)
 8000b2e:	681a      	ldr	r2, [r3, #0]
 8000b30:	4b12      	ldr	r3, [pc, #72]	; (8000b7c <HAL_InitTick+0x58>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	4619      	mov	r1, r3
 8000b36:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b42:	4618      	mov	r0, r3
 8000b44:	f000 f93b 	bl	8000dbe <HAL_SYSTICK_Config>
 8000b48:	4603      	mov	r3, r0
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d001      	beq.n	8000b52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b4e:	2301      	movs	r3, #1
 8000b50:	e00e      	b.n	8000b70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	2b0f      	cmp	r3, #15
 8000b56:	d80a      	bhi.n	8000b6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	6879      	ldr	r1, [r7, #4]
 8000b5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b60:	f000 f911 	bl	8000d86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b64:	4a06      	ldr	r2, [pc, #24]	; (8000b80 <HAL_InitTick+0x5c>)
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	e000      	b.n	8000b70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b6e:	2301      	movs	r3, #1
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	3708      	adds	r7, #8
 8000b74:	46bd      	mov	sp, r7
 8000b76:	bd80      	pop	{r7, pc}
 8000b78:	2000000c 	.word	0x2000000c
 8000b7c:	20000014 	.word	0x20000014
 8000b80:	20000010 	.word	0x20000010

08000b84 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b84:	b480      	push	{r7}
 8000b86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b88:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HAL_IncTick+0x20>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	461a      	mov	r2, r3
 8000b8e:	4b06      	ldr	r3, [pc, #24]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	4413      	add	r3, r2
 8000b94:	4a04      	ldr	r2, [pc, #16]	; (8000ba8 <HAL_IncTick+0x24>)
 8000b96:	6013      	str	r3, [r2, #0]
}
 8000b98:	bf00      	nop
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000014 	.word	0x20000014
 8000ba8:	2000008c 	.word	0x2000008c

08000bac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  return uwTick;
 8000bb0:	4b03      	ldr	r3, [pc, #12]	; (8000bc0 <HAL_GetTick+0x14>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
}
 8000bb4:	4618      	mov	r0, r3
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	2000008c 	.word	0x2000008c

08000bc4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bcc:	f7ff ffee 	bl	8000bac <HAL_GetTick>
 8000bd0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8000bdc:	d005      	beq.n	8000bea <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bde:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <HAL_Delay+0x44>)
 8000be0:	781b      	ldrb	r3, [r3, #0]
 8000be2:	461a      	mov	r2, r3
 8000be4:	68fb      	ldr	r3, [r7, #12]
 8000be6:	4413      	add	r3, r2
 8000be8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000bea:	bf00      	nop
 8000bec:	f7ff ffde 	bl	8000bac <HAL_GetTick>
 8000bf0:	4602      	mov	r2, r0
 8000bf2:	68bb      	ldr	r3, [r7, #8]
 8000bf4:	1ad3      	subs	r3, r2, r3
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	429a      	cmp	r2, r3
 8000bfa:	d8f7      	bhi.n	8000bec <HAL_Delay+0x28>
  {
  }
}
 8000bfc:	bf00      	nop
 8000bfe:	bf00      	nop
 8000c00:	3710      	adds	r7, #16
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	20000014 	.word	0x20000014

08000c0c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	b085      	sub	sp, #20
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000c14:	687b      	ldr	r3, [r7, #4]
 8000c16:	f003 0307 	and.w	r3, r3, #7
 8000c1a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000c1c:	4b0c      	ldr	r3, [pc, #48]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000c22:	68ba      	ldr	r2, [r7, #8]
 8000c24:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000c28:	4013      	ands	r3, r2
 8000c2a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000c2c:	68fb      	ldr	r3, [r7, #12]
 8000c2e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000c30:	68bb      	ldr	r3, [r7, #8]
 8000c32:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000c34:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000c38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000c3c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000c3e:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <__NVIC_SetPriorityGrouping+0x44>)
 8000c40:	68bb      	ldr	r3, [r7, #8]
 8000c42:	60d3      	str	r3, [r2, #12]
}
 8000c44:	bf00      	nop
 8000c46:	3714      	adds	r7, #20
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4e:	4770      	bx	lr
 8000c50:	e000ed00 	.word	0xe000ed00

08000c54 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c58:	4b04      	ldr	r3, [pc, #16]	; (8000c6c <__NVIC_GetPriorityGrouping+0x18>)
 8000c5a:	68db      	ldr	r3, [r3, #12]
 8000c5c:	0a1b      	lsrs	r3, r3, #8
 8000c5e:	f003 0307 	and.w	r3, r3, #7
}
 8000c62:	4618      	mov	r0, r3
 8000c64:	46bd      	mov	sp, r7
 8000c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6a:	4770      	bx	lr
 8000c6c:	e000ed00 	.word	0xe000ed00

08000c70 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	4603      	mov	r3, r0
 8000c78:	6039      	str	r1, [r7, #0]
 8000c7a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c7c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	db0a      	blt.n	8000c9a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	b2da      	uxtb	r2, r3
 8000c88:	490c      	ldr	r1, [pc, #48]	; (8000cbc <__NVIC_SetPriority+0x4c>)
 8000c8a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c8e:	0112      	lsls	r2, r2, #4
 8000c90:	b2d2      	uxtb	r2, r2
 8000c92:	440b      	add	r3, r1
 8000c94:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c98:	e00a      	b.n	8000cb0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c9a:	683b      	ldr	r3, [r7, #0]
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	4908      	ldr	r1, [pc, #32]	; (8000cc0 <__NVIC_SetPriority+0x50>)
 8000ca0:	79fb      	ldrb	r3, [r7, #7]
 8000ca2:	f003 030f 	and.w	r3, r3, #15
 8000ca6:	3b04      	subs	r3, #4
 8000ca8:	0112      	lsls	r2, r2, #4
 8000caa:	b2d2      	uxtb	r2, r2
 8000cac:	440b      	add	r3, r1
 8000cae:	761a      	strb	r2, [r3, #24]
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr
 8000cbc:	e000e100 	.word	0xe000e100
 8000cc0:	e000ed00 	.word	0xe000ed00

08000cc4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000cc4:	b480      	push	{r7}
 8000cc6:	b089      	sub	sp, #36	; 0x24
 8000cc8:	af00      	add	r7, sp, #0
 8000cca:	60f8      	str	r0, [r7, #12]
 8000ccc:	60b9      	str	r1, [r7, #8]
 8000cce:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f003 0307 	and.w	r3, r3, #7
 8000cd6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000cd8:	69fb      	ldr	r3, [r7, #28]
 8000cda:	f1c3 0307 	rsb	r3, r3, #7
 8000cde:	2b04      	cmp	r3, #4
 8000ce0:	bf28      	it	cs
 8000ce2:	2304      	movcs	r3, #4
 8000ce4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000ce6:	69fb      	ldr	r3, [r7, #28]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	2b06      	cmp	r3, #6
 8000cec:	d902      	bls.n	8000cf4 <NVIC_EncodePriority+0x30>
 8000cee:	69fb      	ldr	r3, [r7, #28]
 8000cf0:	3b03      	subs	r3, #3
 8000cf2:	e000      	b.n	8000cf6 <NVIC_EncodePriority+0x32>
 8000cf4:	2300      	movs	r3, #0
 8000cf6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cf8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8000cfc:	69bb      	ldr	r3, [r7, #24]
 8000cfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000d02:	43da      	mvns	r2, r3
 8000d04:	68bb      	ldr	r3, [r7, #8]
 8000d06:	401a      	ands	r2, r3
 8000d08:	697b      	ldr	r3, [r7, #20]
 8000d0a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	697b      	ldr	r3, [r7, #20]
 8000d12:	fa01 f303 	lsl.w	r3, r1, r3
 8000d16:	43d9      	mvns	r1, r3
 8000d18:	687b      	ldr	r3, [r7, #4]
 8000d1a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000d1c:	4313      	orrs	r3, r2
         );
}
 8000d1e:	4618      	mov	r0, r3
 8000d20:	3724      	adds	r7, #36	; 0x24
 8000d22:	46bd      	mov	sp, r7
 8000d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d28:	4770      	bx	lr
	...

08000d2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000d2c:	b580      	push	{r7, lr}
 8000d2e:	b082      	sub	sp, #8
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3b01      	subs	r3, #1
 8000d38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000d3c:	d301      	bcc.n	8000d42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000d3e:	2301      	movs	r3, #1
 8000d40:	e00f      	b.n	8000d62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000d42:	4a0a      	ldr	r2, [pc, #40]	; (8000d6c <SysTick_Config+0x40>)
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	3b01      	subs	r3, #1
 8000d48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000d4a:	210f      	movs	r1, #15
 8000d4c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000d50:	f7ff ff8e 	bl	8000c70 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <SysTick_Config+0x40>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d5a:	4b04      	ldr	r3, [pc, #16]	; (8000d6c <SysTick_Config+0x40>)
 8000d5c:	2207      	movs	r2, #7
 8000d5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3708      	adds	r7, #8
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	bf00      	nop
 8000d6c:	e000e010 	.word	0xe000e010

08000d70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b082      	sub	sp, #8
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d78:	6878      	ldr	r0, [r7, #4]
 8000d7a:	f7ff ff47 	bl	8000c0c <__NVIC_SetPriorityGrouping>
}
 8000d7e:	bf00      	nop
 8000d80:	3708      	adds	r7, #8
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}

08000d86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d86:	b580      	push	{r7, lr}
 8000d88:	b086      	sub	sp, #24
 8000d8a:	af00      	add	r7, sp, #0
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	60b9      	str	r1, [r7, #8]
 8000d90:	607a      	str	r2, [r7, #4]
 8000d92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d94:	2300      	movs	r3, #0
 8000d96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d98:	f7ff ff5c 	bl	8000c54 <__NVIC_GetPriorityGrouping>
 8000d9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d9e:	687a      	ldr	r2, [r7, #4]
 8000da0:	68b9      	ldr	r1, [r7, #8]
 8000da2:	6978      	ldr	r0, [r7, #20]
 8000da4:	f7ff ff8e 	bl	8000cc4 <NVIC_EncodePriority>
 8000da8:	4602      	mov	r2, r0
 8000daa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000dae:	4611      	mov	r1, r2
 8000db0:	4618      	mov	r0, r3
 8000db2:	f7ff ff5d 	bl	8000c70 <__NVIC_SetPriority>
}
 8000db6:	bf00      	nop
 8000db8:	3718      	adds	r7, #24
 8000dba:	46bd      	mov	sp, r7
 8000dbc:	bd80      	pop	{r7, pc}

08000dbe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000dbe:	b580      	push	{r7, lr}
 8000dc0:	b082      	sub	sp, #8
 8000dc2:	af00      	add	r7, sp, #0
 8000dc4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000dc6:	6878      	ldr	r0, [r7, #4]
 8000dc8:	f7ff ffb0 	bl	8000d2c <SysTick_Config>
 8000dcc:	4603      	mov	r3, r0
}
 8000dce:	4618      	mov	r0, r3
 8000dd0:	3708      	adds	r7, #8
 8000dd2:	46bd      	mov	sp, r7
 8000dd4:	bd80      	pop	{r7, pc}
	...

08000dd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	; 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
 8000de0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000de2:	2300      	movs	r3, #0
 8000de4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000de6:	2300      	movs	r3, #0
 8000de8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000dea:	2300      	movs	r3, #0
 8000dec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000dee:	2300      	movs	r3, #0
 8000df0:	61fb      	str	r3, [r7, #28]
 8000df2:	e177      	b.n	80010e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000df4:	2201      	movs	r2, #1
 8000df6:	69fb      	ldr	r3, [r7, #28]
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000dfe:	683b      	ldr	r3, [r7, #0]
 8000e00:	681b      	ldr	r3, [r3, #0]
 8000e02:	697a      	ldr	r2, [r7, #20]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000e08:	693a      	ldr	r2, [r7, #16]
 8000e0a:	697b      	ldr	r3, [r7, #20]
 8000e0c:	429a      	cmp	r2, r3
 8000e0e:	f040 8166 	bne.w	80010de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e12:	683b      	ldr	r3, [r7, #0]
 8000e14:	685b      	ldr	r3, [r3, #4]
 8000e16:	f003 0303 	and.w	r3, r3, #3
 8000e1a:	2b01      	cmp	r3, #1
 8000e1c:	d005      	beq.n	8000e2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e1e:	683b      	ldr	r3, [r7, #0]
 8000e20:	685b      	ldr	r3, [r3, #4]
 8000e22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000e26:	2b02      	cmp	r3, #2
 8000e28:	d130      	bne.n	8000e8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000e2a:	687b      	ldr	r3, [r7, #4]
 8000e2c:	689b      	ldr	r3, [r3, #8]
 8000e2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000e30:	69fb      	ldr	r3, [r7, #28]
 8000e32:	005b      	lsls	r3, r3, #1
 8000e34:	2203      	movs	r2, #3
 8000e36:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3a:	43db      	mvns	r3, r3
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	4013      	ands	r3, r2
 8000e40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000e42:	683b      	ldr	r3, [r7, #0]
 8000e44:	68da      	ldr	r2, [r3, #12]
 8000e46:	69fb      	ldr	r3, [r7, #28]
 8000e48:	005b      	lsls	r3, r3, #1
 8000e4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000e4e:	69ba      	ldr	r2, [r7, #24]
 8000e50:	4313      	orrs	r3, r2
 8000e52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	69ba      	ldr	r2, [r7, #24]
 8000e58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e5a:	687b      	ldr	r3, [r7, #4]
 8000e5c:	685b      	ldr	r3, [r3, #4]
 8000e5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e60:	2201      	movs	r2, #1
 8000e62:	69fb      	ldr	r3, [r7, #28]
 8000e64:	fa02 f303 	lsl.w	r3, r2, r3
 8000e68:	43db      	mvns	r3, r3
 8000e6a:	69ba      	ldr	r2, [r7, #24]
 8000e6c:	4013      	ands	r3, r2
 8000e6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e70:	683b      	ldr	r3, [r7, #0]
 8000e72:	685b      	ldr	r3, [r3, #4]
 8000e74:	091b      	lsrs	r3, r3, #4
 8000e76:	f003 0201 	and.w	r2, r3, #1
 8000e7a:	69fb      	ldr	r3, [r7, #28]
 8000e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e80:	69ba      	ldr	r2, [r7, #24]
 8000e82:	4313      	orrs	r3, r2
 8000e84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	69ba      	ldr	r2, [r7, #24]
 8000e8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e8c:	683b      	ldr	r3, [r7, #0]
 8000e8e:	685b      	ldr	r3, [r3, #4]
 8000e90:	f003 0303 	and.w	r3, r3, #3
 8000e94:	2b03      	cmp	r3, #3
 8000e96:	d017      	beq.n	8000ec8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	68db      	ldr	r3, [r3, #12]
 8000e9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e9e:	69fb      	ldr	r3, [r7, #28]
 8000ea0:	005b      	lsls	r3, r3, #1
 8000ea2:	2203      	movs	r2, #3
 8000ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea8:	43db      	mvns	r3, r3
 8000eaa:	69ba      	ldr	r2, [r7, #24]
 8000eac:	4013      	ands	r3, r2
 8000eae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000eb0:	683b      	ldr	r3, [r7, #0]
 8000eb2:	689a      	ldr	r2, [r3, #8]
 8000eb4:	69fb      	ldr	r3, [r7, #28]
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	69ba      	ldr	r2, [r7, #24]
 8000ec6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	685b      	ldr	r3, [r3, #4]
 8000ecc:	f003 0303 	and.w	r3, r3, #3
 8000ed0:	2b02      	cmp	r3, #2
 8000ed2:	d123      	bne.n	8000f1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000ed4:	69fb      	ldr	r3, [r7, #28]
 8000ed6:	08da      	lsrs	r2, r3, #3
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	3208      	adds	r2, #8
 8000edc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ee2:	69fb      	ldr	r3, [r7, #28]
 8000ee4:	f003 0307 	and.w	r3, r3, #7
 8000ee8:	009b      	lsls	r3, r3, #2
 8000eea:	220f      	movs	r2, #15
 8000eec:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef0:	43db      	mvns	r3, r3
 8000ef2:	69ba      	ldr	r2, [r7, #24]
 8000ef4:	4013      	ands	r3, r2
 8000ef6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000ef8:	683b      	ldr	r3, [r7, #0]
 8000efa:	691a      	ldr	r2, [r3, #16]
 8000efc:	69fb      	ldr	r3, [r7, #28]
 8000efe:	f003 0307 	and.w	r3, r3, #7
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	fa02 f303 	lsl.w	r3, r2, r3
 8000f08:	69ba      	ldr	r2, [r7, #24]
 8000f0a:	4313      	orrs	r3, r2
 8000f0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000f0e:	69fb      	ldr	r3, [r7, #28]
 8000f10:	08da      	lsrs	r2, r3, #3
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	3208      	adds	r2, #8
 8000f16:	69b9      	ldr	r1, [r7, #24]
 8000f18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	681b      	ldr	r3, [r3, #0]
 8000f20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000f22:	69fb      	ldr	r3, [r7, #28]
 8000f24:	005b      	lsls	r3, r3, #1
 8000f26:	2203      	movs	r2, #3
 8000f28:	fa02 f303 	lsl.w	r3, r2, r3
 8000f2c:	43db      	mvns	r3, r3
 8000f2e:	69ba      	ldr	r2, [r7, #24]
 8000f30:	4013      	ands	r3, r2
 8000f32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	f003 0203 	and.w	r2, r3, #3
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	005b      	lsls	r3, r3, #1
 8000f40:	fa02 f303 	lsl.w	r3, r2, r3
 8000f44:	69ba      	ldr	r2, [r7, #24]
 8000f46:	4313      	orrs	r3, r2
 8000f48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f50:	683b      	ldr	r3, [r7, #0]
 8000f52:	685b      	ldr	r3, [r3, #4]
 8000f54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	f000 80c0 	beq.w	80010de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f5e:	2300      	movs	r3, #0
 8000f60:	60fb      	str	r3, [r7, #12]
 8000f62:	4b66      	ldr	r3, [pc, #408]	; (80010fc <HAL_GPIO_Init+0x324>)
 8000f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f66:	4a65      	ldr	r2, [pc, #404]	; (80010fc <HAL_GPIO_Init+0x324>)
 8000f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8000f6e:	4b63      	ldr	r3, [pc, #396]	; (80010fc <HAL_GPIO_Init+0x324>)
 8000f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f76:	60fb      	str	r3, [r7, #12]
 8000f78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f7a:	4a61      	ldr	r2, [pc, #388]	; (8001100 <HAL_GPIO_Init+0x328>)
 8000f7c:	69fb      	ldr	r3, [r7, #28]
 8000f7e:	089b      	lsrs	r3, r3, #2
 8000f80:	3302      	adds	r3, #2
 8000f82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f88:	69fb      	ldr	r3, [r7, #28]
 8000f8a:	f003 0303 	and.w	r3, r3, #3
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	220f      	movs	r2, #15
 8000f92:	fa02 f303 	lsl.w	r3, r2, r3
 8000f96:	43db      	mvns	r3, r3
 8000f98:	69ba      	ldr	r2, [r7, #24]
 8000f9a:	4013      	ands	r3, r2
 8000f9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	4a58      	ldr	r2, [pc, #352]	; (8001104 <HAL_GPIO_Init+0x32c>)
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	d037      	beq.n	8001016 <HAL_GPIO_Init+0x23e>
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4a57      	ldr	r2, [pc, #348]	; (8001108 <HAL_GPIO_Init+0x330>)
 8000faa:	4293      	cmp	r3, r2
 8000fac:	d031      	beq.n	8001012 <HAL_GPIO_Init+0x23a>
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	4a56      	ldr	r2, [pc, #344]	; (800110c <HAL_GPIO_Init+0x334>)
 8000fb2:	4293      	cmp	r3, r2
 8000fb4:	d02b      	beq.n	800100e <HAL_GPIO_Init+0x236>
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	4a55      	ldr	r2, [pc, #340]	; (8001110 <HAL_GPIO_Init+0x338>)
 8000fba:	4293      	cmp	r3, r2
 8000fbc:	d025      	beq.n	800100a <HAL_GPIO_Init+0x232>
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	4a54      	ldr	r2, [pc, #336]	; (8001114 <HAL_GPIO_Init+0x33c>)
 8000fc2:	4293      	cmp	r3, r2
 8000fc4:	d01f      	beq.n	8001006 <HAL_GPIO_Init+0x22e>
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	4a53      	ldr	r2, [pc, #332]	; (8001118 <HAL_GPIO_Init+0x340>)
 8000fca:	4293      	cmp	r3, r2
 8000fcc:	d019      	beq.n	8001002 <HAL_GPIO_Init+0x22a>
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	4a52      	ldr	r2, [pc, #328]	; (800111c <HAL_GPIO_Init+0x344>)
 8000fd2:	4293      	cmp	r3, r2
 8000fd4:	d013      	beq.n	8000ffe <HAL_GPIO_Init+0x226>
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	4a51      	ldr	r2, [pc, #324]	; (8001120 <HAL_GPIO_Init+0x348>)
 8000fda:	4293      	cmp	r3, r2
 8000fdc:	d00d      	beq.n	8000ffa <HAL_GPIO_Init+0x222>
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	4a50      	ldr	r2, [pc, #320]	; (8001124 <HAL_GPIO_Init+0x34c>)
 8000fe2:	4293      	cmp	r3, r2
 8000fe4:	d007      	beq.n	8000ff6 <HAL_GPIO_Init+0x21e>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	4a4f      	ldr	r2, [pc, #316]	; (8001128 <HAL_GPIO_Init+0x350>)
 8000fea:	4293      	cmp	r3, r2
 8000fec:	d101      	bne.n	8000ff2 <HAL_GPIO_Init+0x21a>
 8000fee:	2309      	movs	r3, #9
 8000ff0:	e012      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8000ff2:	230a      	movs	r3, #10
 8000ff4:	e010      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8000ff6:	2308      	movs	r3, #8
 8000ff8:	e00e      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	e00c      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8000ffe:	2306      	movs	r3, #6
 8001000:	e00a      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8001002:	2305      	movs	r3, #5
 8001004:	e008      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8001006:	2304      	movs	r3, #4
 8001008:	e006      	b.n	8001018 <HAL_GPIO_Init+0x240>
 800100a:	2303      	movs	r3, #3
 800100c:	e004      	b.n	8001018 <HAL_GPIO_Init+0x240>
 800100e:	2302      	movs	r3, #2
 8001010:	e002      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8001012:	2301      	movs	r3, #1
 8001014:	e000      	b.n	8001018 <HAL_GPIO_Init+0x240>
 8001016:	2300      	movs	r3, #0
 8001018:	69fa      	ldr	r2, [r7, #28]
 800101a:	f002 0203 	and.w	r2, r2, #3
 800101e:	0092      	lsls	r2, r2, #2
 8001020:	4093      	lsls	r3, r2
 8001022:	69ba      	ldr	r2, [r7, #24]
 8001024:	4313      	orrs	r3, r2
 8001026:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001028:	4935      	ldr	r1, [pc, #212]	; (8001100 <HAL_GPIO_Init+0x328>)
 800102a:	69fb      	ldr	r3, [r7, #28]
 800102c:	089b      	lsrs	r3, r3, #2
 800102e:	3302      	adds	r3, #2
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001036:	4b3d      	ldr	r3, [pc, #244]	; (800112c <HAL_GPIO_Init+0x354>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800103c:	693b      	ldr	r3, [r7, #16]
 800103e:	43db      	mvns	r3, r3
 8001040:	69ba      	ldr	r2, [r7, #24]
 8001042:	4013      	ands	r3, r2
 8001044:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001046:	683b      	ldr	r3, [r7, #0]
 8001048:	685b      	ldr	r3, [r3, #4]
 800104a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800104e:	2b00      	cmp	r3, #0
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001052:	69ba      	ldr	r2, [r7, #24]
 8001054:	693b      	ldr	r3, [r7, #16]
 8001056:	4313      	orrs	r3, r2
 8001058:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800105a:	4a34      	ldr	r2, [pc, #208]	; (800112c <HAL_GPIO_Init+0x354>)
 800105c:	69bb      	ldr	r3, [r7, #24]
 800105e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001060:	4b32      	ldr	r3, [pc, #200]	; (800112c <HAL_GPIO_Init+0x354>)
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001066:	693b      	ldr	r3, [r7, #16]
 8001068:	43db      	mvns	r3, r3
 800106a:	69ba      	ldr	r2, [r7, #24]
 800106c:	4013      	ands	r3, r2
 800106e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001070:	683b      	ldr	r3, [r7, #0]
 8001072:	685b      	ldr	r3, [r3, #4]
 8001074:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001078:	2b00      	cmp	r3, #0
 800107a:	d003      	beq.n	8001084 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	693b      	ldr	r3, [r7, #16]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001084:	4a29      	ldr	r2, [pc, #164]	; (800112c <HAL_GPIO_Init+0x354>)
 8001086:	69bb      	ldr	r3, [r7, #24]
 8001088:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800108a:	4b28      	ldr	r3, [pc, #160]	; (800112c <HAL_GPIO_Init+0x354>)
 800108c:	689b      	ldr	r3, [r3, #8]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001090:	693b      	ldr	r3, [r7, #16]
 8001092:	43db      	mvns	r3, r3
 8001094:	69ba      	ldr	r2, [r7, #24]
 8001096:	4013      	ands	r3, r2
 8001098:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800109a:	683b      	ldr	r3, [r7, #0]
 800109c:	685b      	ldr	r3, [r3, #4]
 800109e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d003      	beq.n	80010ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80010a6:	69ba      	ldr	r2, [r7, #24]
 80010a8:	693b      	ldr	r3, [r7, #16]
 80010aa:	4313      	orrs	r3, r2
 80010ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80010ae:	4a1f      	ldr	r2, [pc, #124]	; (800112c <HAL_GPIO_Init+0x354>)
 80010b0:	69bb      	ldr	r3, [r7, #24]
 80010b2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80010b4:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_GPIO_Init+0x354>)
 80010b6:	68db      	ldr	r3, [r3, #12]
 80010b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80010ba:	693b      	ldr	r3, [r7, #16]
 80010bc:	43db      	mvns	r3, r3
 80010be:	69ba      	ldr	r2, [r7, #24]
 80010c0:	4013      	ands	r3, r2
 80010c2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80010c4:	683b      	ldr	r3, [r7, #0]
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d003      	beq.n	80010d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80010d0:	69ba      	ldr	r2, [r7, #24]
 80010d2:	693b      	ldr	r3, [r7, #16]
 80010d4:	4313      	orrs	r3, r2
 80010d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80010d8:	4a14      	ldr	r2, [pc, #80]	; (800112c <HAL_GPIO_Init+0x354>)
 80010da:	69bb      	ldr	r3, [r7, #24]
 80010dc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	3301      	adds	r3, #1
 80010e2:	61fb      	str	r3, [r7, #28]
 80010e4:	69fb      	ldr	r3, [r7, #28]
 80010e6:	2b0f      	cmp	r3, #15
 80010e8:	f67f ae84 	bls.w	8000df4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80010ec:	bf00      	nop
 80010ee:	bf00      	nop
 80010f0:	3724      	adds	r7, #36	; 0x24
 80010f2:	46bd      	mov	sp, r7
 80010f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f8:	4770      	bx	lr
 80010fa:	bf00      	nop
 80010fc:	40023800 	.word	0x40023800
 8001100:	40013800 	.word	0x40013800
 8001104:	40020000 	.word	0x40020000
 8001108:	40020400 	.word	0x40020400
 800110c:	40020800 	.word	0x40020800
 8001110:	40020c00 	.word	0x40020c00
 8001114:	40021000 	.word	0x40021000
 8001118:	40021400 	.word	0x40021400
 800111c:	40021800 	.word	0x40021800
 8001120:	40021c00 	.word	0x40021c00
 8001124:	40022000 	.word	0x40022000
 8001128:	40022400 	.word	0x40022400
 800112c:	40013c00 	.word	0x40013c00

08001130 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
 8001138:	460b      	mov	r3, r1
 800113a:	807b      	strh	r3, [r7, #2]
 800113c:	4613      	mov	r3, r2
 800113e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001140:	787b      	ldrb	r3, [r7, #1]
 8001142:	2b00      	cmp	r3, #0
 8001144:	d003      	beq.n	800114e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001146:	887a      	ldrh	r2, [r7, #2]
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800114c:	e003      	b.n	8001156 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800114e:	887b      	ldrh	r3, [r7, #2]
 8001150:	041a      	lsls	r2, r3, #16
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	619a      	str	r2, [r3, #24]
}
 8001156:	bf00      	nop
 8001158:	370c      	adds	r7, #12
 800115a:	46bd      	mov	sp, r7
 800115c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001160:	4770      	bx	lr

08001162 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001162:	b480      	push	{r7}
 8001164:	b085      	sub	sp, #20
 8001166:	af00      	add	r7, sp, #0
 8001168:	6078      	str	r0, [r7, #4]
 800116a:	460b      	mov	r3, r1
 800116c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	695b      	ldr	r3, [r3, #20]
 8001172:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001174:	887a      	ldrh	r2, [r7, #2]
 8001176:	68fb      	ldr	r3, [r7, #12]
 8001178:	4013      	ands	r3, r2
 800117a:	041a      	lsls	r2, r3, #16
 800117c:	68fb      	ldr	r3, [r7, #12]
 800117e:	43d9      	mvns	r1, r3
 8001180:	887b      	ldrh	r3, [r7, #2]
 8001182:	400b      	ands	r3, r1
 8001184:	431a      	orrs	r2, r3
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	619a      	str	r2, [r3, #24]
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr

08001196 <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8001196:	b480      	push	{r7}
 8001198:	af00      	add	r7, sp, #0

}
 800119a:	bf00      	nop
 800119c:	46bd      	mov	sp, r7
 800119e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a2:	4770      	bx	lr

080011a4 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b082      	sub	sp, #8
 80011a8:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 80011aa:	2300      	movs	r3, #0
 80011ac:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
 80011b2:	4b20      	ldr	r3, [pc, #128]	; (8001234 <HAL_PWREx_EnableOverDrive+0x90>)
 80011b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b6:	4a1f      	ldr	r2, [pc, #124]	; (8001234 <HAL_PWREx_EnableOverDrive+0x90>)
 80011b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011bc:	6413      	str	r3, [r2, #64]	; 0x40
 80011be:	4b1d      	ldr	r3, [pc, #116]	; (8001234 <HAL_PWREx_EnableOverDrive+0x90>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c6:	603b      	str	r3, [r7, #0]
 80011c8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 80011ca:	4b1b      	ldr	r3, [pc, #108]	; (8001238 <HAL_PWREx_EnableOverDrive+0x94>)
 80011cc:	2201      	movs	r2, #1
 80011ce:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80011d0:	f7ff fcec 	bl	8000bac <HAL_GetTick>
 80011d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011d6:	e009      	b.n	80011ec <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80011d8:	f7ff fce8 	bl	8000bac <HAL_GetTick>
 80011dc:	4602      	mov	r2, r0
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	1ad3      	subs	r3, r2, r3
 80011e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011e6:	d901      	bls.n	80011ec <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 80011e8:	2303      	movs	r3, #3
 80011ea:	e01f      	b.n	800122c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80011ec:	4b13      	ldr	r3, [pc, #76]	; (800123c <HAL_PWREx_EnableOverDrive+0x98>)
 80011ee:	685b      	ldr	r3, [r3, #4]
 80011f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80011f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80011f8:	d1ee      	bne.n	80011d8 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80011fa:	4b11      	ldr	r3, [pc, #68]	; (8001240 <HAL_PWREx_EnableOverDrive+0x9c>)
 80011fc:	2201      	movs	r2, #1
 80011fe:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001200:	f7ff fcd4 	bl	8000bac <HAL_GetTick>
 8001204:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001206:	e009      	b.n	800121c <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001208:	f7ff fcd0 	bl	8000bac <HAL_GetTick>
 800120c:	4602      	mov	r2, r0
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	1ad3      	subs	r3, r2, r3
 8001212:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001216:	d901      	bls.n	800121c <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001218:	2303      	movs	r3, #3
 800121a:	e007      	b.n	800122c <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800121c:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_PWREx_EnableOverDrive+0x98>)
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001224:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001228:	d1ee      	bne.n	8001208 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 800122a:	2300      	movs	r3, #0
}
 800122c:	4618      	mov	r0, r3
 800122e:	3708      	adds	r7, #8
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	420e0040 	.word	0x420e0040
 800123c:	40007000 	.word	0x40007000
 8001240:	420e0044 	.word	0x420e0044

08001244 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b086      	sub	sp, #24
 8001248:	af00      	add	r7, sp, #0
 800124a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	2b00      	cmp	r3, #0
 8001250:	d101      	bne.n	8001256 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001252:	2301      	movs	r3, #1
 8001254:	e267      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	f003 0301 	and.w	r3, r3, #1
 800125e:	2b00      	cmp	r3, #0
 8001260:	d075      	beq.n	800134e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001262:	4b88      	ldr	r3, [pc, #544]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001264:	689b      	ldr	r3, [r3, #8]
 8001266:	f003 030c 	and.w	r3, r3, #12
 800126a:	2b04      	cmp	r3, #4
 800126c:	d00c      	beq.n	8001288 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800126e:	4b85      	ldr	r3, [pc, #532]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001270:	689b      	ldr	r3, [r3, #8]
 8001272:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001276:	2b08      	cmp	r3, #8
 8001278:	d112      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800127a:	4b82      	ldr	r3, [pc, #520]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800127c:	685b      	ldr	r3, [r3, #4]
 800127e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001282:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001286:	d10b      	bne.n	80012a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001288:	4b7e      	ldr	r3, [pc, #504]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	2b00      	cmp	r3, #0
 8001292:	d05b      	beq.n	800134c <HAL_RCC_OscConfig+0x108>
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	2b00      	cmp	r3, #0
 800129a:	d157      	bne.n	800134c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800129c:	2301      	movs	r3, #1
 800129e:	e242      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	685b      	ldr	r3, [r3, #4]
 80012a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80012a8:	d106      	bne.n	80012b8 <HAL_RCC_OscConfig+0x74>
 80012aa:	4b76      	ldr	r3, [pc, #472]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	4a75      	ldr	r2, [pc, #468]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012b4:	6013      	str	r3, [r2, #0]
 80012b6:	e01d      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80012c0:	d10c      	bne.n	80012dc <HAL_RCC_OscConfig+0x98>
 80012c2:	4b70      	ldr	r3, [pc, #448]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	4a6f      	ldr	r2, [pc, #444]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012cc:	6013      	str	r3, [r2, #0]
 80012ce:	4b6d      	ldr	r3, [pc, #436]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4a6c      	ldr	r2, [pc, #432]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80012d8:	6013      	str	r3, [r2, #0]
 80012da:	e00b      	b.n	80012f4 <HAL_RCC_OscConfig+0xb0>
 80012dc:	4b69      	ldr	r3, [pc, #420]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4a68      	ldr	r2, [pc, #416]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80012e6:	6013      	str	r3, [r2, #0]
 80012e8:	4b66      	ldr	r3, [pc, #408]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a65      	ldr	r2, [pc, #404]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80012ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80012f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d013      	beq.n	8001324 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80012fc:	f7ff fc56 	bl	8000bac <HAL_GetTick>
 8001300:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001302:	e008      	b.n	8001316 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001304:	f7ff fc52 	bl	8000bac <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	693b      	ldr	r3, [r7, #16]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b64      	cmp	r3, #100	; 0x64
 8001310:	d901      	bls.n	8001316 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001312:	2303      	movs	r3, #3
 8001314:	e207      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001316:	4b5b      	ldr	r3, [pc, #364]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800131e:	2b00      	cmp	r3, #0
 8001320:	d0f0      	beq.n	8001304 <HAL_RCC_OscConfig+0xc0>
 8001322:	e014      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001324:	f7ff fc42 	bl	8000bac <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800132a:	e008      	b.n	800133e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800132c:	f7ff fc3e 	bl	8000bac <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	2b64      	cmp	r3, #100	; 0x64
 8001338:	d901      	bls.n	800133e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800133a:	2303      	movs	r3, #3
 800133c:	e1f3      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800133e:	4b51      	ldr	r3, [pc, #324]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001346:	2b00      	cmp	r3, #0
 8001348:	d1f0      	bne.n	800132c <HAL_RCC_OscConfig+0xe8>
 800134a:	e000      	b.n	800134e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800134c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	f003 0302 	and.w	r3, r3, #2
 8001356:	2b00      	cmp	r3, #0
 8001358:	d063      	beq.n	8001422 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800135a:	4b4a      	ldr	r3, [pc, #296]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	f003 030c 	and.w	r3, r3, #12
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001366:	4b47      	ldr	r3, [pc, #284]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001368:	689b      	ldr	r3, [r3, #8]
 800136a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800136e:	2b08      	cmp	r3, #8
 8001370:	d11c      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001372:	4b44      	ldr	r3, [pc, #272]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800137a:	2b00      	cmp	r3, #0
 800137c:	d116      	bne.n	80013ac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800137e:	4b41      	ldr	r3, [pc, #260]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001380:	681b      	ldr	r3, [r3, #0]
 8001382:	f003 0302 	and.w	r3, r3, #2
 8001386:	2b00      	cmp	r3, #0
 8001388:	d005      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68db      	ldr	r3, [r3, #12]
 800138e:	2b01      	cmp	r3, #1
 8001390:	d001      	beq.n	8001396 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
 8001394:	e1c7      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001396:	4b3b      	ldr	r3, [pc, #236]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	691b      	ldr	r3, [r3, #16]
 80013a2:	00db      	lsls	r3, r3, #3
 80013a4:	4937      	ldr	r1, [pc, #220]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013a6:	4313      	orrs	r3, r2
 80013a8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013aa:	e03a      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	68db      	ldr	r3, [r3, #12]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d020      	beq.n	80013f6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80013b4:	4b34      	ldr	r3, [pc, #208]	; (8001488 <HAL_RCC_OscConfig+0x244>)
 80013b6:	2201      	movs	r2, #1
 80013b8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013ba:	f7ff fbf7 	bl	8000bac <HAL_GetTick>
 80013be:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013c0:	e008      	b.n	80013d4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80013c2:	f7ff fbf3 	bl	8000bac <HAL_GetTick>
 80013c6:	4602      	mov	r2, r0
 80013c8:	693b      	ldr	r3, [r7, #16]
 80013ca:	1ad3      	subs	r3, r2, r3
 80013cc:	2b02      	cmp	r3, #2
 80013ce:	d901      	bls.n	80013d4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80013d0:	2303      	movs	r3, #3
 80013d2:	e1a8      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80013d4:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f003 0302 	and.w	r3, r3, #2
 80013dc:	2b00      	cmp	r3, #0
 80013de:	d0f0      	beq.n	80013c2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	00db      	lsls	r3, r3, #3
 80013ee:	4925      	ldr	r1, [pc, #148]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 80013f0:	4313      	orrs	r3, r2
 80013f2:	600b      	str	r3, [r1, #0]
 80013f4:	e015      	b.n	8001422 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80013f6:	4b24      	ldr	r3, [pc, #144]	; (8001488 <HAL_RCC_OscConfig+0x244>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013fc:	f7ff fbd6 	bl	8000bac <HAL_GetTick>
 8001400:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001402:	e008      	b.n	8001416 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001404:	f7ff fbd2 	bl	8000bac <HAL_GetTick>
 8001408:	4602      	mov	r2, r0
 800140a:	693b      	ldr	r3, [r7, #16]
 800140c:	1ad3      	subs	r3, r2, r3
 800140e:	2b02      	cmp	r3, #2
 8001410:	d901      	bls.n	8001416 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001412:	2303      	movs	r3, #3
 8001414:	e187      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001416:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	2b00      	cmp	r3, #0
 8001420:	d1f0      	bne.n	8001404 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0308 	and.w	r3, r3, #8
 800142a:	2b00      	cmp	r3, #0
 800142c:	d036      	beq.n	800149c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b00      	cmp	r3, #0
 8001434:	d016      	beq.n	8001464 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001436:	4b15      	ldr	r3, [pc, #84]	; (800148c <HAL_RCC_OscConfig+0x248>)
 8001438:	2201      	movs	r2, #1
 800143a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800143c:	f7ff fbb6 	bl	8000bac <HAL_GetTick>
 8001440:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001442:	e008      	b.n	8001456 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001444:	f7ff fbb2 	bl	8000bac <HAL_GetTick>
 8001448:	4602      	mov	r2, r0
 800144a:	693b      	ldr	r3, [r7, #16]
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d901      	bls.n	8001456 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	e167      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001456:	4b0b      	ldr	r3, [pc, #44]	; (8001484 <HAL_RCC_OscConfig+0x240>)
 8001458:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800145a:	f003 0302 	and.w	r3, r3, #2
 800145e:	2b00      	cmp	r3, #0
 8001460:	d0f0      	beq.n	8001444 <HAL_RCC_OscConfig+0x200>
 8001462:	e01b      	b.n	800149c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001464:	4b09      	ldr	r3, [pc, #36]	; (800148c <HAL_RCC_OscConfig+0x248>)
 8001466:	2200      	movs	r2, #0
 8001468:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800146a:	f7ff fb9f 	bl	8000bac <HAL_GetTick>
 800146e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001470:	e00e      	b.n	8001490 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001472:	f7ff fb9b 	bl	8000bac <HAL_GetTick>
 8001476:	4602      	mov	r2, r0
 8001478:	693b      	ldr	r3, [r7, #16]
 800147a:	1ad3      	subs	r3, r2, r3
 800147c:	2b02      	cmp	r3, #2
 800147e:	d907      	bls.n	8001490 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001480:	2303      	movs	r3, #3
 8001482:	e150      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 8001484:	40023800 	.word	0x40023800
 8001488:	42470000 	.word	0x42470000
 800148c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001490:	4b88      	ldr	r3, [pc, #544]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001492:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001494:	f003 0302 	and.w	r3, r3, #2
 8001498:	2b00      	cmp	r3, #0
 800149a:	d1ea      	bne.n	8001472 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	f003 0304 	and.w	r3, r3, #4
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	f000 8097 	beq.w	80015d8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80014ae:	4b81      	ldr	r3, [pc, #516]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d10f      	bne.n	80014da <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80014ba:	2300      	movs	r3, #0
 80014bc:	60bb      	str	r3, [r7, #8]
 80014be:	4b7d      	ldr	r3, [pc, #500]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c2:	4a7c      	ldr	r2, [pc, #496]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014c8:	6413      	str	r3, [r2, #64]	; 0x40
 80014ca:	4b7a      	ldr	r3, [pc, #488]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80014cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d2:	60bb      	str	r3, [r7, #8]
 80014d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80014d6:	2301      	movs	r3, #1
 80014d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014da:	4b77      	ldr	r3, [pc, #476]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d118      	bne.n	8001518 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80014e6:	4b74      	ldr	r3, [pc, #464]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4a73      	ldr	r2, [pc, #460]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 80014ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80014f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80014f2:	f7ff fb5b 	bl	8000bac <HAL_GetTick>
 80014f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80014f8:	e008      	b.n	800150c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80014fa:	f7ff fb57 	bl	8000bac <HAL_GetTick>
 80014fe:	4602      	mov	r2, r0
 8001500:	693b      	ldr	r3, [r7, #16]
 8001502:	1ad3      	subs	r3, r2, r3
 8001504:	2b02      	cmp	r3, #2
 8001506:	d901      	bls.n	800150c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001508:	2303      	movs	r3, #3
 800150a:	e10c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800150c:	4b6a      	ldr	r3, [pc, #424]	; (80016b8 <HAL_RCC_OscConfig+0x474>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001514:	2b00      	cmp	r3, #0
 8001516:	d0f0      	beq.n	80014fa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	689b      	ldr	r3, [r3, #8]
 800151c:	2b01      	cmp	r3, #1
 800151e:	d106      	bne.n	800152e <HAL_RCC_OscConfig+0x2ea>
 8001520:	4b64      	ldr	r3, [pc, #400]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001522:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001524:	4a63      	ldr	r2, [pc, #396]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001526:	f043 0301 	orr.w	r3, r3, #1
 800152a:	6713      	str	r3, [r2, #112]	; 0x70
 800152c:	e01c      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	689b      	ldr	r3, [r3, #8]
 8001532:	2b05      	cmp	r3, #5
 8001534:	d10c      	bne.n	8001550 <HAL_RCC_OscConfig+0x30c>
 8001536:	4b5f      	ldr	r3, [pc, #380]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001538:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800153a:	4a5e      	ldr	r2, [pc, #376]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6713      	str	r3, [r2, #112]	; 0x70
 8001542:	4b5c      	ldr	r3, [pc, #368]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001546:	4a5b      	ldr	r2, [pc, #364]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001548:	f043 0301 	orr.w	r3, r3, #1
 800154c:	6713      	str	r3, [r2, #112]	; 0x70
 800154e:	e00b      	b.n	8001568 <HAL_RCC_OscConfig+0x324>
 8001550:	4b58      	ldr	r3, [pc, #352]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001552:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001554:	4a57      	ldr	r2, [pc, #348]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	6713      	str	r3, [r2, #112]	; 0x70
 800155c:	4b55      	ldr	r3, [pc, #340]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800155e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001560:	4a54      	ldr	r2, [pc, #336]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001562:	f023 0304 	bic.w	r3, r3, #4
 8001566:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	689b      	ldr	r3, [r3, #8]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d015      	beq.n	800159c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001570:	f7ff fb1c 	bl	8000bac <HAL_GetTick>
 8001574:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001576:	e00a      	b.n	800158e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001578:	f7ff fb18 	bl	8000bac <HAL_GetTick>
 800157c:	4602      	mov	r2, r0
 800157e:	693b      	ldr	r3, [r7, #16]
 8001580:	1ad3      	subs	r3, r2, r3
 8001582:	f241 3288 	movw	r2, #5000	; 0x1388
 8001586:	4293      	cmp	r3, r2
 8001588:	d901      	bls.n	800158e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800158a:	2303      	movs	r3, #3
 800158c:	e0cb      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800158e:	4b49      	ldr	r3, [pc, #292]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001590:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001592:	f003 0302 	and.w	r3, r3, #2
 8001596:	2b00      	cmp	r3, #0
 8001598:	d0ee      	beq.n	8001578 <HAL_RCC_OscConfig+0x334>
 800159a:	e014      	b.n	80015c6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800159c:	f7ff fb06 	bl	8000bac <HAL_GetTick>
 80015a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015a2:	e00a      	b.n	80015ba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015a4:	f7ff fb02 	bl	8000bac <HAL_GetTick>
 80015a8:	4602      	mov	r2, r0
 80015aa:	693b      	ldr	r3, [r7, #16]
 80015ac:	1ad3      	subs	r3, r2, r3
 80015ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80015b2:	4293      	cmp	r3, r2
 80015b4:	d901      	bls.n	80015ba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80015b6:	2303      	movs	r3, #3
 80015b8:	e0b5      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80015ba:	4b3e      	ldr	r3, [pc, #248]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	f003 0302 	and.w	r3, r3, #2
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d1ee      	bne.n	80015a4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80015c6:	7dfb      	ldrb	r3, [r7, #23]
 80015c8:	2b01      	cmp	r3, #1
 80015ca:	d105      	bne.n	80015d8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80015cc:	4b39      	ldr	r3, [pc, #228]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d0:	4a38      	ldr	r2, [pc, #224]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015d2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80015d6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	699b      	ldr	r3, [r3, #24]
 80015dc:	2b00      	cmp	r3, #0
 80015de:	f000 80a1 	beq.w	8001724 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80015e2:	4b34      	ldr	r3, [pc, #208]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 80015e4:	689b      	ldr	r3, [r3, #8]
 80015e6:	f003 030c 	and.w	r3, r3, #12
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d05c      	beq.n	80016a8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	699b      	ldr	r3, [r3, #24]
 80015f2:	2b02      	cmp	r3, #2
 80015f4:	d141      	bne.n	800167a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80015f6:	4b31      	ldr	r3, [pc, #196]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 80015f8:	2200      	movs	r2, #0
 80015fa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015fc:	f7ff fad6 	bl	8000bac <HAL_GetTick>
 8001600:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001602:	e008      	b.n	8001616 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001604:	f7ff fad2 	bl	8000bac <HAL_GetTick>
 8001608:	4602      	mov	r2, r0
 800160a:	693b      	ldr	r3, [r7, #16]
 800160c:	1ad3      	subs	r3, r2, r3
 800160e:	2b02      	cmp	r3, #2
 8001610:	d901      	bls.n	8001616 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001612:	2303      	movs	r3, #3
 8001614:	e087      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001616:	4b27      	ldr	r3, [pc, #156]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800161e:	2b00      	cmp	r3, #0
 8001620:	d1f0      	bne.n	8001604 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	69da      	ldr	r2, [r3, #28]
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	6a1b      	ldr	r3, [r3, #32]
 800162a:	431a      	orrs	r2, r3
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001630:	019b      	lsls	r3, r3, #6
 8001632:	431a      	orrs	r2, r3
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001638:	085b      	lsrs	r3, r3, #1
 800163a:	3b01      	subs	r3, #1
 800163c:	041b      	lsls	r3, r3, #16
 800163e:	431a      	orrs	r2, r3
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001644:	061b      	lsls	r3, r3, #24
 8001646:	491b      	ldr	r1, [pc, #108]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 8001648:	4313      	orrs	r3, r2
 800164a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800164c:	4b1b      	ldr	r3, [pc, #108]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 800164e:	2201      	movs	r2, #1
 8001650:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001652:	f7ff faab 	bl	8000bac <HAL_GetTick>
 8001656:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001658:	e008      	b.n	800166c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800165a:	f7ff faa7 	bl	8000bac <HAL_GetTick>
 800165e:	4602      	mov	r2, r0
 8001660:	693b      	ldr	r3, [r7, #16]
 8001662:	1ad3      	subs	r3, r2, r3
 8001664:	2b02      	cmp	r3, #2
 8001666:	d901      	bls.n	800166c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001668:	2303      	movs	r3, #3
 800166a:	e05c      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800166c:	4b11      	ldr	r3, [pc, #68]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001674:	2b00      	cmp	r3, #0
 8001676:	d0f0      	beq.n	800165a <HAL_RCC_OscConfig+0x416>
 8001678:	e054      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800167a:	4b10      	ldr	r3, [pc, #64]	; (80016bc <HAL_RCC_OscConfig+0x478>)
 800167c:	2200      	movs	r2, #0
 800167e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001680:	f7ff fa94 	bl	8000bac <HAL_GetTick>
 8001684:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001686:	e008      	b.n	800169a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001688:	f7ff fa90 	bl	8000bac <HAL_GetTick>
 800168c:	4602      	mov	r2, r0
 800168e:	693b      	ldr	r3, [r7, #16]
 8001690:	1ad3      	subs	r3, r2, r3
 8001692:	2b02      	cmp	r3, #2
 8001694:	d901      	bls.n	800169a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001696:	2303      	movs	r3, #3
 8001698:	e045      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800169a:	4b06      	ldr	r3, [pc, #24]	; (80016b4 <HAL_RCC_OscConfig+0x470>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d1f0      	bne.n	8001688 <HAL_RCC_OscConfig+0x444>
 80016a6:	e03d      	b.n	8001724 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	699b      	ldr	r3, [r3, #24]
 80016ac:	2b01      	cmp	r3, #1
 80016ae:	d107      	bne.n	80016c0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80016b0:	2301      	movs	r3, #1
 80016b2:	e038      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
 80016b4:	40023800 	.word	0x40023800
 80016b8:	40007000 	.word	0x40007000
 80016bc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80016c0:	4b1b      	ldr	r3, [pc, #108]	; (8001730 <HAL_RCC_OscConfig+0x4ec>)
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	699b      	ldr	r3, [r3, #24]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d028      	beq.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80016d8:	429a      	cmp	r2, r3
 80016da:	d121      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016dc:	68fb      	ldr	r3, [r7, #12]
 80016de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80016e6:	429a      	cmp	r2, r3
 80016e8:	d11a      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80016ea:	68fa      	ldr	r2, [r7, #12]
 80016ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80016f0:	4013      	ands	r3, r2
 80016f2:	687a      	ldr	r2, [r7, #4]
 80016f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80016f6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d111      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001706:	085b      	lsrs	r3, r3, #1
 8001708:	3b01      	subs	r3, #1
 800170a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800170c:	429a      	cmp	r2, r3
 800170e:	d107      	bne.n	8001720 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001710:	68fb      	ldr	r3, [r7, #12]
 8001712:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800171a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800171c:	429a      	cmp	r2, r3
 800171e:	d001      	beq.n	8001724 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001720:	2301      	movs	r3, #1
 8001722:	e000      	b.n	8001726 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	3718      	adds	r7, #24
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	40023800 	.word	0x40023800

08001734 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b084      	sub	sp, #16
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b00      	cmp	r3, #0
 8001742:	d101      	bne.n	8001748 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001744:	2301      	movs	r3, #1
 8001746:	e0cc      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001748:	4b68      	ldr	r3, [pc, #416]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	f003 030f 	and.w	r3, r3, #15
 8001750:	683a      	ldr	r2, [r7, #0]
 8001752:	429a      	cmp	r2, r3
 8001754:	d90c      	bls.n	8001770 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001756:	4b65      	ldr	r3, [pc, #404]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001758:	683a      	ldr	r2, [r7, #0]
 800175a:	b2d2      	uxtb	r2, r2
 800175c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800175e:	4b63      	ldr	r3, [pc, #396]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	f003 030f 	and.w	r3, r3, #15
 8001766:	683a      	ldr	r2, [r7, #0]
 8001768:	429a      	cmp	r2, r3
 800176a:	d001      	beq.n	8001770 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800176c:	2301      	movs	r3, #1
 800176e:	e0b8      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0302 	and.w	r3, r3, #2
 8001778:	2b00      	cmp	r3, #0
 800177a:	d020      	beq.n	80017be <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0304 	and.w	r3, r3, #4
 8001784:	2b00      	cmp	r3, #0
 8001786:	d005      	beq.n	8001794 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001788:	4b59      	ldr	r3, [pc, #356]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178a:	689b      	ldr	r3, [r3, #8]
 800178c:	4a58      	ldr	r2, [pc, #352]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800178e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001792:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f003 0308 	and.w	r3, r3, #8
 800179c:	2b00      	cmp	r3, #0
 800179e:	d005      	beq.n	80017ac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80017a0:	4b53      	ldr	r3, [pc, #332]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a2:	689b      	ldr	r3, [r3, #8]
 80017a4:	4a52      	ldr	r2, [pc, #328]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017a6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80017aa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80017ac:	4b50      	ldr	r3, [pc, #320]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ae:	689b      	ldr	r3, [r3, #8]
 80017b0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	494d      	ldr	r1, [pc, #308]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017ba:	4313      	orrs	r3, r2
 80017bc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0301 	and.w	r3, r3, #1
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d044      	beq.n	8001854 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	685b      	ldr	r3, [r3, #4]
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d107      	bne.n	80017e2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80017d2:	4b47      	ldr	r3, [pc, #284]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d119      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017de:	2301      	movs	r3, #1
 80017e0:	e07f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	685b      	ldr	r3, [r3, #4]
 80017e6:	2b02      	cmp	r3, #2
 80017e8:	d003      	beq.n	80017f2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	d107      	bne.n	8001802 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017f2:	4b3f      	ldr	r3, [pc, #252]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d109      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80017fe:	2301      	movs	r3, #1
 8001800:	e06f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001802:	4b3b      	ldr	r3, [pc, #236]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001804:	681b      	ldr	r3, [r3, #0]
 8001806:	f003 0302 	and.w	r3, r3, #2
 800180a:	2b00      	cmp	r3, #0
 800180c:	d101      	bne.n	8001812 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e067      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001812:	4b37      	ldr	r3, [pc, #220]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001814:	689b      	ldr	r3, [r3, #8]
 8001816:	f023 0203 	bic.w	r2, r3, #3
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	685b      	ldr	r3, [r3, #4]
 800181e:	4934      	ldr	r1, [pc, #208]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001820:	4313      	orrs	r3, r2
 8001822:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001824:	f7ff f9c2 	bl	8000bac <HAL_GetTick>
 8001828:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800182a:	e00a      	b.n	8001842 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800182c:	f7ff f9be 	bl	8000bac <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	f241 3288 	movw	r2, #5000	; 0x1388
 800183a:	4293      	cmp	r3, r2
 800183c:	d901      	bls.n	8001842 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800183e:	2303      	movs	r3, #3
 8001840:	e04f      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001842:	4b2b      	ldr	r3, [pc, #172]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001844:	689b      	ldr	r3, [r3, #8]
 8001846:	f003 020c 	and.w	r2, r3, #12
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	685b      	ldr	r3, [r3, #4]
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	429a      	cmp	r2, r3
 8001852:	d1eb      	bne.n	800182c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001854:	4b25      	ldr	r3, [pc, #148]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	f003 030f 	and.w	r3, r3, #15
 800185c:	683a      	ldr	r2, [r7, #0]
 800185e:	429a      	cmp	r2, r3
 8001860:	d20c      	bcs.n	800187c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001862:	4b22      	ldr	r3, [pc, #136]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	b2d2      	uxtb	r2, r2
 8001868:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800186a:	4b20      	ldr	r3, [pc, #128]	; (80018ec <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 030f 	and.w	r3, r3, #15
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	429a      	cmp	r2, r3
 8001876:	d001      	beq.n	800187c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001878:	2301      	movs	r3, #1
 800187a:	e032      	b.n	80018e2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	f003 0304 	and.w	r3, r3, #4
 8001884:	2b00      	cmp	r3, #0
 8001886:	d008      	beq.n	800189a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001888:	4b19      	ldr	r3, [pc, #100]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 800188a:	689b      	ldr	r3, [r3, #8]
 800188c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	68db      	ldr	r3, [r3, #12]
 8001894:	4916      	ldr	r1, [pc, #88]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 8001896:	4313      	orrs	r3, r2
 8001898:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	f003 0308 	and.w	r3, r3, #8
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d009      	beq.n	80018ba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80018a6:	4b12      	ldr	r3, [pc, #72]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018a8:	689b      	ldr	r3, [r3, #8]
 80018aa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	691b      	ldr	r3, [r3, #16]
 80018b2:	00db      	lsls	r3, r3, #3
 80018b4:	490e      	ldr	r1, [pc, #56]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	4313      	orrs	r3, r2
 80018b8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80018ba:	f000 f821 	bl	8001900 <HAL_RCC_GetSysClockFreq>
 80018be:	4602      	mov	r2, r0
 80018c0:	4b0b      	ldr	r3, [pc, #44]	; (80018f0 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	091b      	lsrs	r3, r3, #4
 80018c6:	f003 030f 	and.w	r3, r3, #15
 80018ca:	490a      	ldr	r1, [pc, #40]	; (80018f4 <HAL_RCC_ClockConfig+0x1c0>)
 80018cc:	5ccb      	ldrb	r3, [r1, r3]
 80018ce:	fa22 f303 	lsr.w	r3, r2, r3
 80018d2:	4a09      	ldr	r2, [pc, #36]	; (80018f8 <HAL_RCC_ClockConfig+0x1c4>)
 80018d4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80018d6:	4b09      	ldr	r3, [pc, #36]	; (80018fc <HAL_RCC_ClockConfig+0x1c8>)
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4618      	mov	r0, r3
 80018dc:	f7ff f922 	bl	8000b24 <HAL_InitTick>

  return HAL_OK;
 80018e0:	2300      	movs	r3, #0
}
 80018e2:	4618      	mov	r0, r3
 80018e4:	3710      	adds	r7, #16
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}
 80018ea:	bf00      	nop
 80018ec:	40023c00 	.word	0x40023c00
 80018f0:	40023800 	.word	0x40023800
 80018f4:	08002420 	.word	0x08002420
 80018f8:	2000000c 	.word	0x2000000c
 80018fc:	20000010 	.word	0x20000010

08001900 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001904:	b094      	sub	sp, #80	; 0x50
 8001906:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001908:	2300      	movs	r3, #0
 800190a:	647b      	str	r3, [r7, #68]	; 0x44
 800190c:	2300      	movs	r3, #0
 800190e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001910:	2300      	movs	r3, #0
 8001912:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8001914:	2300      	movs	r3, #0
 8001916:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001918:	4b79      	ldr	r3, [pc, #484]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800191a:	689b      	ldr	r3, [r3, #8]
 800191c:	f003 030c 	and.w	r3, r3, #12
 8001920:	2b08      	cmp	r3, #8
 8001922:	d00d      	beq.n	8001940 <HAL_RCC_GetSysClockFreq+0x40>
 8001924:	2b08      	cmp	r3, #8
 8001926:	f200 80e1 	bhi.w	8001aec <HAL_RCC_GetSysClockFreq+0x1ec>
 800192a:	2b00      	cmp	r3, #0
 800192c:	d002      	beq.n	8001934 <HAL_RCC_GetSysClockFreq+0x34>
 800192e:	2b04      	cmp	r3, #4
 8001930:	d003      	beq.n	800193a <HAL_RCC_GetSysClockFreq+0x3a>
 8001932:	e0db      	b.n	8001aec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001934:	4b73      	ldr	r3, [pc, #460]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001936:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8001938:	e0db      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800193a:	4b73      	ldr	r3, [pc, #460]	; (8001b08 <HAL_RCC_GetSysClockFreq+0x208>)
 800193c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800193e:	e0d8      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001940:	4b6f      	ldr	r3, [pc, #444]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001942:	685b      	ldr	r3, [r3, #4]
 8001944:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001948:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800194a:	4b6d      	ldr	r3, [pc, #436]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001952:	2b00      	cmp	r3, #0
 8001954:	d063      	beq.n	8001a1e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001956:	4b6a      	ldr	r3, [pc, #424]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	099b      	lsrs	r3, r3, #6
 800195c:	2200      	movs	r2, #0
 800195e:	63bb      	str	r3, [r7, #56]	; 0x38
 8001960:	63fa      	str	r2, [r7, #60]	; 0x3c
 8001962:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8001964:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001968:	633b      	str	r3, [r7, #48]	; 0x30
 800196a:	2300      	movs	r3, #0
 800196c:	637b      	str	r3, [r7, #52]	; 0x34
 800196e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8001972:	4622      	mov	r2, r4
 8001974:	462b      	mov	r3, r5
 8001976:	f04f 0000 	mov.w	r0, #0
 800197a:	f04f 0100 	mov.w	r1, #0
 800197e:	0159      	lsls	r1, r3, #5
 8001980:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001984:	0150      	lsls	r0, r2, #5
 8001986:	4602      	mov	r2, r0
 8001988:	460b      	mov	r3, r1
 800198a:	4621      	mov	r1, r4
 800198c:	1a51      	subs	r1, r2, r1
 800198e:	6139      	str	r1, [r7, #16]
 8001990:	4629      	mov	r1, r5
 8001992:	eb63 0301 	sbc.w	r3, r3, r1
 8001996:	617b      	str	r3, [r7, #20]
 8001998:	f04f 0200 	mov.w	r2, #0
 800199c:	f04f 0300 	mov.w	r3, #0
 80019a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80019a4:	4659      	mov	r1, fp
 80019a6:	018b      	lsls	r3, r1, #6
 80019a8:	4651      	mov	r1, sl
 80019aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80019ae:	4651      	mov	r1, sl
 80019b0:	018a      	lsls	r2, r1, #6
 80019b2:	4651      	mov	r1, sl
 80019b4:	ebb2 0801 	subs.w	r8, r2, r1
 80019b8:	4659      	mov	r1, fp
 80019ba:	eb63 0901 	sbc.w	r9, r3, r1
 80019be:	f04f 0200 	mov.w	r2, #0
 80019c2:	f04f 0300 	mov.w	r3, #0
 80019c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80019ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80019ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80019d2:	4690      	mov	r8, r2
 80019d4:	4699      	mov	r9, r3
 80019d6:	4623      	mov	r3, r4
 80019d8:	eb18 0303 	adds.w	r3, r8, r3
 80019dc:	60bb      	str	r3, [r7, #8]
 80019de:	462b      	mov	r3, r5
 80019e0:	eb49 0303 	adc.w	r3, r9, r3
 80019e4:	60fb      	str	r3, [r7, #12]
 80019e6:	f04f 0200 	mov.w	r2, #0
 80019ea:	f04f 0300 	mov.w	r3, #0
 80019ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80019f2:	4629      	mov	r1, r5
 80019f4:	024b      	lsls	r3, r1, #9
 80019f6:	4621      	mov	r1, r4
 80019f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80019fc:	4621      	mov	r1, r4
 80019fe:	024a      	lsls	r2, r1, #9
 8001a00:	4610      	mov	r0, r2
 8001a02:	4619      	mov	r1, r3
 8001a04:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001a06:	2200      	movs	r2, #0
 8001a08:	62bb      	str	r3, [r7, #40]	; 0x28
 8001a0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8001a0c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8001a10:	f7fe fbec 	bl	80001ec <__aeabi_uldivmod>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4613      	mov	r3, r2
 8001a1a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001a1c:	e058      	b.n	8001ad0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a1e:	4b38      	ldr	r3, [pc, #224]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	099b      	lsrs	r3, r3, #6
 8001a24:	2200      	movs	r2, #0
 8001a26:	4618      	mov	r0, r3
 8001a28:	4611      	mov	r1, r2
 8001a2a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001a2e:	623b      	str	r3, [r7, #32]
 8001a30:	2300      	movs	r3, #0
 8001a32:	627b      	str	r3, [r7, #36]	; 0x24
 8001a34:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001a38:	4642      	mov	r2, r8
 8001a3a:	464b      	mov	r3, r9
 8001a3c:	f04f 0000 	mov.w	r0, #0
 8001a40:	f04f 0100 	mov.w	r1, #0
 8001a44:	0159      	lsls	r1, r3, #5
 8001a46:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a4a:	0150      	lsls	r0, r2, #5
 8001a4c:	4602      	mov	r2, r0
 8001a4e:	460b      	mov	r3, r1
 8001a50:	4641      	mov	r1, r8
 8001a52:	ebb2 0a01 	subs.w	sl, r2, r1
 8001a56:	4649      	mov	r1, r9
 8001a58:	eb63 0b01 	sbc.w	fp, r3, r1
 8001a5c:	f04f 0200 	mov.w	r2, #0
 8001a60:	f04f 0300 	mov.w	r3, #0
 8001a64:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001a68:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001a6c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001a70:	ebb2 040a 	subs.w	r4, r2, sl
 8001a74:	eb63 050b 	sbc.w	r5, r3, fp
 8001a78:	f04f 0200 	mov.w	r2, #0
 8001a7c:	f04f 0300 	mov.w	r3, #0
 8001a80:	00eb      	lsls	r3, r5, #3
 8001a82:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a86:	00e2      	lsls	r2, r4, #3
 8001a88:	4614      	mov	r4, r2
 8001a8a:	461d      	mov	r5, r3
 8001a8c:	4643      	mov	r3, r8
 8001a8e:	18e3      	adds	r3, r4, r3
 8001a90:	603b      	str	r3, [r7, #0]
 8001a92:	464b      	mov	r3, r9
 8001a94:	eb45 0303 	adc.w	r3, r5, r3
 8001a98:	607b      	str	r3, [r7, #4]
 8001a9a:	f04f 0200 	mov.w	r2, #0
 8001a9e:	f04f 0300 	mov.w	r3, #0
 8001aa2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	028b      	lsls	r3, r1, #10
 8001aaa:	4621      	mov	r1, r4
 8001aac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001ab0:	4621      	mov	r1, r4
 8001ab2:	028a      	lsls	r2, r1, #10
 8001ab4:	4610      	mov	r0, r2
 8001ab6:	4619      	mov	r1, r3
 8001ab8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8001aba:	2200      	movs	r2, #0
 8001abc:	61bb      	str	r3, [r7, #24]
 8001abe:	61fa      	str	r2, [r7, #28]
 8001ac0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001ac4:	f7fe fb92 	bl	80001ec <__aeabi_uldivmod>
 8001ac8:	4602      	mov	r2, r0
 8001aca:	460b      	mov	r3, r1
 8001acc:	4613      	mov	r3, r2
 8001ace:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ad0:	4b0b      	ldr	r3, [pc, #44]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ad2:	685b      	ldr	r3, [r3, #4]
 8001ad4:	0c1b      	lsrs	r3, r3, #16
 8001ad6:	f003 0303 	and.w	r3, r3, #3
 8001ada:	3301      	adds	r3, #1
 8001adc:	005b      	lsls	r3, r3, #1
 8001ade:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8001ae0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8001ae2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001ae4:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001aea:	e002      	b.n	8001af2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001aec:	4b05      	ldr	r3, [pc, #20]	; (8001b04 <HAL_RCC_GetSysClockFreq+0x204>)
 8001aee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8001af0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001af2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8001af4:	4618      	mov	r0, r3
 8001af6:	3750      	adds	r7, #80	; 0x50
 8001af8:	46bd      	mov	sp, r7
 8001afa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001afe:	bf00      	nop
 8001b00:	40023800 	.word	0x40023800
 8001b04:	00f42400 	.word	0x00f42400
 8001b08:	007a1200 	.word	0x007a1200

08001b0c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d101      	bne.n	8001b1e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	e083      	b.n	8001c26 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d108      	bne.n	8001b38 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001b2e:	d009      	beq.n	8001b44 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	2200      	movs	r2, #0
 8001b34:	61da      	str	r2, [r3, #28]
 8001b36:	e005      	b.n	8001b44 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001b3e:	687b      	ldr	r3, [r7, #4]
 8001b40:	2200      	movs	r2, #0
 8001b42:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001b4a:	b2db      	uxtb	r3, r3
 8001b4c:	2b00      	cmp	r3, #0
 8001b4e:	d106      	bne.n	8001b5e <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	2200      	movs	r2, #0
 8001b54:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f000 f868 	bl	8001c2e <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	2202      	movs	r2, #2
 8001b62:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	681a      	ldr	r2, [r3, #0]
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001b74:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	689b      	ldr	r3, [r3, #8]
 8001b82:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8001b86:	431a      	orrs	r2, r3
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001b90:	431a      	orrs	r2, r3
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	691b      	ldr	r3, [r3, #16]
 8001b96:	f003 0302 	and.w	r3, r3, #2
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	695b      	ldr	r3, [r3, #20]
 8001ba0:	f003 0301 	and.w	r3, r3, #1
 8001ba4:	431a      	orrs	r2, r3
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	699b      	ldr	r3, [r3, #24]
 8001baa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	69db      	ldr	r3, [r3, #28]
 8001bb4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001bc2:	ea42 0103 	orr.w	r1, r2, r3
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bca:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	430a      	orrs	r2, r1
 8001bd4:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	699b      	ldr	r3, [r3, #24]
 8001bda:	0c1b      	lsrs	r3, r3, #16
 8001bdc:	f003 0104 	and.w	r1, r3, #4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be4:	f003 0210 	and.w	r2, r3, #16
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	430a      	orrs	r2, r1
 8001bee:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001bf8:	d105      	bne.n	8001c06 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	b292      	uxth	r2, r2
 8001c04:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	69da      	ldr	r2, [r3, #28]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001c14:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	2201      	movs	r2, #1
 8001c20:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3708      	adds	r7, #8
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <HAL_SPI_MspInit>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi)
{
 8001c2e:	b480      	push	{r7}
 8001c30:	b083      	sub	sp, #12
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_MspInit should be implemented in the user file
   */
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr

08001c42 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c42:	b580      	push	{r7, lr}
 8001c44:	b088      	sub	sp, #32
 8001c46:	af00      	add	r7, sp, #0
 8001c48:	60f8      	str	r0, [r7, #12]
 8001c4a:	60b9      	str	r1, [r7, #8]
 8001c4c:	603b      	str	r3, [r7, #0]
 8001c4e:	4613      	mov	r3, r2
 8001c50:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001c5c:	2b01      	cmp	r3, #1
 8001c5e:	d101      	bne.n	8001c64 <HAL_SPI_Transmit+0x22>
 8001c60:	2302      	movs	r3, #2
 8001c62:	e148      	b.n	8001ef6 <HAL_SPI_Transmit+0x2b4>
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2201      	movs	r2, #1
 8001c68:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8001c6c:	f7fe ff9e 	bl	8000bac <HAL_GetTick>
 8001c70:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8001c72:	88fb      	ldrh	r3, [r7, #6]
 8001c74:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b01      	cmp	r3, #1
 8001c80:	d002      	beq.n	8001c88 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8001c82:	2302      	movs	r3, #2
 8001c84:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c86:	e12d      	b.n	8001ee4 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <HAL_SPI_Transmit+0x52>
 8001c8e:	88fb      	ldrh	r3, [r7, #6]
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d102      	bne.n	8001c9a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	77fb      	strb	r3, [r7, #31]
    goto error;
 8001c98:	e124      	b.n	8001ee4 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2203      	movs	r2, #3
 8001c9e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	68ba      	ldr	r2, [r7, #8]
 8001cac:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	88fa      	ldrh	r2, [r7, #6]
 8001cb2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	88fa      	ldrh	r2, [r7, #6]
 8001cb8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8001cba:	68fb      	ldr	r3, [r7, #12]
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	2200      	movs	r2, #0
 8001cc4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2200      	movs	r2, #0
 8001cca:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	2200      	movs	r2, #0
 8001cd0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8001cd2:	68fb      	ldr	r3, [r7, #12]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	689b      	ldr	r3, [r3, #8]
 8001cdc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001ce0:	d10f      	bne.n	8001d02 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	681a      	ldr	r2, [r3, #0]
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001cf0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	681a      	ldr	r2, [r3, #0]
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001d00:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d0a:	d10f      	bne.n	8001d2c <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	681a      	ldr	r2, [r3, #0]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001d1a:	601a      	str	r2, [r3, #0]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	681a      	ldr	r2, [r3, #0]
 8001d22:	68fb      	ldr	r3, [r7, #12]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001d2a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8001d2c:	68fb      	ldr	r3, [r7, #12]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001d36:	2b40      	cmp	r3, #64	; 0x40
 8001d38:	d007      	beq.n	8001d4a <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8001d3a:	68fb      	ldr	r3, [r7, #12]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	68db      	ldr	r3, [r3, #12]
 8001d4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001d52:	d14b      	bne.n	8001dec <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001d54:	68fb      	ldr	r3, [r7, #12]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d002      	beq.n	8001d62 <HAL_SPI_Transmit+0x120>
 8001d5c:	8afb      	ldrh	r3, [r7, #22]
 8001d5e:	2b01      	cmp	r3, #1
 8001d60:	d13e      	bne.n	8001de0 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d62:	68fb      	ldr	r3, [r7, #12]
 8001d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d66:	881a      	ldrh	r2, [r3, #0]
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d72:	1c9a      	adds	r2, r3, #2
 8001d74:	68fb      	ldr	r3, [r7, #12]
 8001d76:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001d7c:	b29b      	uxth	r3, r3
 8001d7e:	3b01      	subs	r3, #1
 8001d80:	b29a      	uxth	r2, r3
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8001d86:	e02b      	b.n	8001de0 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001d88:	68fb      	ldr	r3, [r7, #12]
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	689b      	ldr	r3, [r3, #8]
 8001d8e:	f003 0302 	and.w	r3, r3, #2
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d112      	bne.n	8001dbc <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d9a:	881a      	ldrh	r2, [r3, #0]
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da6:	1c9a      	adds	r2, r3, #2
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001db0:	b29b      	uxth	r3, r3
 8001db2:	3b01      	subs	r3, #1
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	68fb      	ldr	r3, [r7, #12]
 8001db8:	86da      	strh	r2, [r3, #54]	; 0x36
 8001dba:	e011      	b.n	8001de0 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001dbc:	f7fe fef6 	bl	8000bac <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	683a      	ldr	r2, [r7, #0]
 8001dc8:	429a      	cmp	r2, r3
 8001dca:	d803      	bhi.n	8001dd4 <HAL_SPI_Transmit+0x192>
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001dd2:	d102      	bne.n	8001dda <HAL_SPI_Transmit+0x198>
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d102      	bne.n	8001de0 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001dde:	e081      	b.n	8001ee4 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001de4:	b29b      	uxth	r3, r3
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d1ce      	bne.n	8001d88 <HAL_SPI_Transmit+0x146>
 8001dea:	e04c      	b.n	8001e86 <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	d002      	beq.n	8001dfa <HAL_SPI_Transmit+0x1b8>
 8001df4:	8afb      	ldrh	r3, [r7, #22]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d140      	bne.n	8001e7c <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001dfa:	68fb      	ldr	r3, [r7, #12]
 8001dfc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001dfe:	68fb      	ldr	r3, [r7, #12]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	330c      	adds	r3, #12
 8001e04:	7812      	ldrb	r2, [r2, #0]
 8001e06:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e08:	68fb      	ldr	r3, [r7, #12]
 8001e0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e0c:	1c5a      	adds	r2, r3, #1
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e16:	b29b      	uxth	r3, r3
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	b29a      	uxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8001e20:	e02c      	b.n	8001e7c <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8001e22:	68fb      	ldr	r3, [r7, #12]
 8001e24:	681b      	ldr	r3, [r3, #0]
 8001e26:	689b      	ldr	r3, [r3, #8]
 8001e28:	f003 0302 	and.w	r3, r3, #2
 8001e2c:	2b02      	cmp	r3, #2
 8001e2e:	d113      	bne.n	8001e58 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001e34:	68fb      	ldr	r3, [r7, #12]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	330c      	adds	r3, #12
 8001e3a:	7812      	ldrb	r2, [r2, #0]
 8001e3c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e42:	1c5a      	adds	r2, r3, #1
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e4c:	b29b      	uxth	r3, r3
 8001e4e:	3b01      	subs	r3, #1
 8001e50:	b29a      	uxth	r2, r3
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	86da      	strh	r2, [r3, #54]	; 0x36
 8001e56:	e011      	b.n	8001e7c <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8001e58:	f7fe fea8 	bl	8000bac <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	69bb      	ldr	r3, [r7, #24]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	683a      	ldr	r2, [r7, #0]
 8001e64:	429a      	cmp	r2, r3
 8001e66:	d803      	bhi.n	8001e70 <HAL_SPI_Transmit+0x22e>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e6e:	d102      	bne.n	8001e76 <HAL_SPI_Transmit+0x234>
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d102      	bne.n	8001e7c <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 8001e76:	2303      	movs	r3, #3
 8001e78:	77fb      	strb	r3, [r7, #31]
          goto error;
 8001e7a:	e033      	b.n	8001ee4 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8001e80:	b29b      	uxth	r3, r3
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d1cd      	bne.n	8001e22 <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001e8e:	d107      	bne.n	8001ea0 <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 8001e90:	68fb      	ldr	r3, [r7, #12]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681a      	ldr	r2, [r3, #0]
 8001e96:	68fb      	ldr	r3, [r7, #12]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001e9e:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8001ea0:	69ba      	ldr	r2, [r7, #24]
 8001ea2:	6839      	ldr	r1, [r7, #0]
 8001ea4:	68f8      	ldr	r0, [r7, #12]
 8001ea6:	f000 f8c1 	bl	800202c <SPI_EndRxTxTransaction>
 8001eaa:	4603      	mov	r3, r0
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d002      	beq.n	8001eb6 <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8001eb0:	68fb      	ldr	r3, [r7, #12]
 8001eb2:	2220      	movs	r2, #32
 8001eb4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	689b      	ldr	r3, [r3, #8]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d10a      	bne.n	8001ed4 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	613b      	str	r3, [r7, #16]
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	68db      	ldr	r3, [r3, #12]
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	689b      	ldr	r3, [r3, #8]
 8001ed0:	613b      	str	r3, [r7, #16]
 8001ed2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d002      	beq.n	8001ee2 <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8001edc:	2301      	movs	r3, #1
 8001ede:	77fb      	strb	r3, [r7, #31]
 8001ee0:	e000      	b.n	8001ee4 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8001ee2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	2200      	movs	r2, #0
 8001ef0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8001ef4:	7ffb      	ldrb	r3, [r7, #31]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3720      	adds	r7, #32
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8001efe:	b480      	push	{r7}
 8001f00:	b083      	sub	sp, #12
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8001f0c:	b2db      	uxtb	r3, r3
}
 8001f0e:	4618      	mov	r0, r3
 8001f10:	370c      	adds	r7, #12
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
	...

08001f1c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	60f8      	str	r0, [r7, #12]
 8001f24:	60b9      	str	r1, [r7, #8]
 8001f26:	603b      	str	r3, [r7, #0]
 8001f28:	4613      	mov	r3, r2
 8001f2a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8001f2c:	f7fe fe3e 	bl	8000bac <HAL_GetTick>
 8001f30:	4602      	mov	r2, r0
 8001f32:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f34:	1a9b      	subs	r3, r3, r2
 8001f36:	683a      	ldr	r2, [r7, #0]
 8001f38:	4413      	add	r3, r2
 8001f3a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8001f3c:	f7fe fe36 	bl	8000bac <HAL_GetTick>
 8001f40:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8001f42:	4b39      	ldr	r3, [pc, #228]	; (8002028 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	015b      	lsls	r3, r3, #5
 8001f48:	0d1b      	lsrs	r3, r3, #20
 8001f4a:	69fa      	ldr	r2, [r7, #28]
 8001f4c:	fb02 f303 	mul.w	r3, r2, r3
 8001f50:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001f52:	e054      	b.n	8001ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8001f54:	683b      	ldr	r3, [r7, #0]
 8001f56:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f5a:	d050      	beq.n	8001ffe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8001f5c:	f7fe fe26 	bl	8000bac <HAL_GetTick>
 8001f60:	4602      	mov	r2, r0
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	1ad3      	subs	r3, r2, r3
 8001f66:	69fa      	ldr	r2, [r7, #28]
 8001f68:	429a      	cmp	r2, r3
 8001f6a:	d902      	bls.n	8001f72 <SPI_WaitFlagStateUntilTimeout+0x56>
 8001f6c:	69fb      	ldr	r3, [r7, #28]
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d13d      	bne.n	8001fee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	685a      	ldr	r2, [r3, #4]
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8001f80:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	685b      	ldr	r3, [r3, #4]
 8001f86:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8001f8a:	d111      	bne.n	8001fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	689b      	ldr	r3, [r3, #8]
 8001f90:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f94:	d004      	beq.n	8001fa0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	689b      	ldr	r3, [r3, #8]
 8001f9a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001f9e:	d107      	bne.n	8001fb0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681a      	ldr	r2, [r3, #0]
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8001fae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8001fb0:	68fb      	ldr	r3, [r7, #12]
 8001fb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001fb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001fb8:	d10f      	bne.n	8001fda <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	681a      	ldr	r2, [r3, #0]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001fc8:	601a      	str	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	68fb      	ldr	r3, [r7, #12]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001fd8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	2201      	movs	r2, #1
 8001fde:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8001fe2:	68fb      	ldr	r3, [r7, #12]
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8001fea:	2303      	movs	r3, #3
 8001fec:	e017      	b.n	800201e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8001fee:	697b      	ldr	r3, [r7, #20]
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d101      	bne.n	8001ff8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	3b01      	subs	r3, #1
 8001ffc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	689a      	ldr	r2, [r3, #8]
 8002004:	68bb      	ldr	r3, [r7, #8]
 8002006:	4013      	ands	r3, r2
 8002008:	68ba      	ldr	r2, [r7, #8]
 800200a:	429a      	cmp	r2, r3
 800200c:	bf0c      	ite	eq
 800200e:	2301      	moveq	r3, #1
 8002010:	2300      	movne	r3, #0
 8002012:	b2db      	uxtb	r3, r3
 8002014:	461a      	mov	r2, r3
 8002016:	79fb      	ldrb	r3, [r7, #7]
 8002018:	429a      	cmp	r2, r3
 800201a:	d19b      	bne.n	8001f54 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3720      	adds	r7, #32
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}
 8002026:	bf00      	nop
 8002028:	2000000c 	.word	0x2000000c

0800202c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b088      	sub	sp, #32
 8002030:	af02      	add	r7, sp, #8
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002038:	4b1b      	ldr	r3, [pc, #108]	; (80020a8 <SPI_EndRxTxTransaction+0x7c>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4a1b      	ldr	r2, [pc, #108]	; (80020ac <SPI_EndRxTxTransaction+0x80>)
 800203e:	fba2 2303 	umull	r2, r3, r2, r3
 8002042:	0d5b      	lsrs	r3, r3, #21
 8002044:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002048:	fb02 f303 	mul.w	r3, r2, r3
 800204c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002056:	d112      	bne.n	800207e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	9300      	str	r3, [sp, #0]
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2200      	movs	r2, #0
 8002060:	2180      	movs	r1, #128	; 0x80
 8002062:	68f8      	ldr	r0, [r7, #12]
 8002064:	f7ff ff5a 	bl	8001f1c <SPI_WaitFlagStateUntilTimeout>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d016      	beq.n	800209c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002072:	f043 0220 	orr.w	r2, r3, #32
 8002076:	68fb      	ldr	r3, [r7, #12]
 8002078:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800207a:	2303      	movs	r3, #3
 800207c:	e00f      	b.n	800209e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800207e:	697b      	ldr	r3, [r7, #20]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d00a      	beq.n	800209a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8002084:	697b      	ldr	r3, [r7, #20]
 8002086:	3b01      	subs	r3, #1
 8002088:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	689b      	ldr	r3, [r3, #8]
 8002090:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002094:	2b80      	cmp	r3, #128	; 0x80
 8002096:	d0f2      	beq.n	800207e <SPI_EndRxTxTransaction+0x52>
 8002098:	e000      	b.n	800209c <SPI_EndRxTxTransaction+0x70>
        break;
 800209a:	bf00      	nop
  }

  return HAL_OK;
 800209c:	2300      	movs	r3, #0
}
 800209e:	4618      	mov	r0, r3
 80020a0:	3718      	adds	r7, #24
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}
 80020a6:	bf00      	nop
 80020a8:	2000000c 	.word	0x2000000c
 80020ac:	165e9f81 	.word	0x165e9f81

080020b0 <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
	int16_t xcoordinate = 0;
 80020b6:	2300      	movs	r3, #0
 80020b8:	81fb      	strh	r3, [r7, #14]
	int16_t ycoordinate = 0;
 80020ba:	2300      	movs	r3, #0
 80020bc:	81bb      	strh	r3, [r7, #12]
	int16_t zcoordinate = 0;
 80020be:	2300      	movs	r3, #0
 80020c0:	817b      	strh	r3, [r7, #10]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80020c2:	f7fe fd13 	bl	8000aec <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80020c6:	f000 f8e5 	bl	8002294 <SystemClock_Config>

	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 80020ca:	2000      	movs	r0, #0
 80020cc:	f7fe fc26 	bl	800091c <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80020d0:	2001      	movs	r0, #1
 80020d2:	f7fe fc23 	bl	800091c <BSP_LED_Init>

	//uart_init();

	//init_adlx345();

	init_max7219();
 80020d6:	f7fe fa07 	bl	80004e8 <init_max7219>

	HAL_Delay(1000);
 80020da:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80020de:	f7fe fd71 	bl	8000bc4 <HAL_Delay>

	send_data_SPI(REG_DECODE_MODE,0x00);
 80020e2:	2100      	movs	r1, #0
 80020e4:	2009      	movs	r0, #9
 80020e6:	f7fe fa87 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_INTENSITY,0x00);
 80020ea:	2100      	movs	r1, #0
 80020ec:	200a      	movs	r0, #10
 80020ee:	f7fe fa83 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_SCAN_LIMIT,0x07);
 80020f2:	2107      	movs	r1, #7
 80020f4:	200b      	movs	r0, #11
 80020f6:	f7fe fa7f 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_SHUTDOWN,0x01);
 80020fa:	2101      	movs	r1, #1
 80020fc:	200c      	movs	r0, #12
 80020fe:	f7fe fa7b 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_DISPLAY_TEST,0x00);
 8002102:	2100      	movs	r1, #0
 8002104:	200f      	movs	r0, #15
 8002106:	f7fe fa77 	bl	80005f8 <send_data_SPI>

	send_data_SPI2(REG_DECODE_MODE,0x00);
 800210a:	2100      	movs	r1, #0
 800210c:	2009      	movs	r0, #9
 800210e:	f7fe faa9 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_INTENSITY,0x00);
 8002112:	2100      	movs	r1, #0
 8002114:	200a      	movs	r0, #10
 8002116:	f7fe faa5 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_SCAN_LIMIT,0x07);
 800211a:	2107      	movs	r1, #7
 800211c:	200b      	movs	r0, #11
 800211e:	f7fe faa1 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_SHUTDOWN,0x01);
 8002122:	2101      	movs	r1, #1
 8002124:	200c      	movs	r0, #12
 8002126:	f7fe fa9d 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_DISPLAY_TEST,0x00);
 800212a:	2100      	movs	r1, #0
 800212c:	200f      	movs	r0, #15
 800212e:	f7fe fa99 	bl	8000664 <send_data_SPI2>


	send_data_SPI3(REG_DECODE_MODE,0x00);
 8002132:	2100      	movs	r1, #0
 8002134:	2009      	movs	r0, #9
 8002136:	f7fe faeb 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_INTENSITY,0x00);
 800213a:	2100      	movs	r1, #0
 800213c:	200a      	movs	r0, #10
 800213e:	f7fe fae7 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_SCAN_LIMIT,0x07);
 8002142:	2107      	movs	r1, #7
 8002144:	200b      	movs	r0, #11
 8002146:	f7fe fae3 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_SHUTDOWN,0x01);
 800214a:	2101      	movs	r1, #1
 800214c:	200c      	movs	r0, #12
 800214e:	f7fe fadf 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_DISPLAY_TEST,0x00);
 8002152:	2100      	movs	r1, #0
 8002154:	200f      	movs	r0, #15
 8002156:	f7fe fadb 	bl	8000710 <send_data_SPI3>

	send_data_SPI4(REG_DECODE_MODE,0x00);
 800215a:	2100      	movs	r1, #0
 800215c:	2009      	movs	r0, #9
 800215e:	f7fe fb4b 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_INTENSITY,0x00);
 8002162:	2100      	movs	r1, #0
 8002164:	200a      	movs	r0, #10
 8002166:	f7fe fb47 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_SCAN_LIMIT,0x07);
 800216a:	2107      	movs	r1, #7
 800216c:	200b      	movs	r0, #11
 800216e:	f7fe fb43 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_SHUTDOWN,0x01);
 8002172:	2101      	movs	r1, #1
 8002174:	200c      	movs	r0, #12
 8002176:	f7fe fb3f 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_DISPLAY_TEST,0x00);
 800217a:	2100      	movs	r1, #0
 800217c:	200f      	movs	r0, #15
 800217e:	f7fe fb3b 	bl	80007f8 <send_data_SPI4>


	send_data_SPI(REG_DIGIT_0, 0xFF);
 8002182:	21ff      	movs	r1, #255	; 0xff
 8002184:	2001      	movs	r0, #1
 8002186:	f7fe fa37 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_DIGIT_1, 0x81);
 800218a:	2181      	movs	r1, #129	; 0x81
 800218c:	2002      	movs	r0, #2
 800218e:	f7fe fa33 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_DIGIT_2, 0x81);
 8002192:	2181      	movs	r1, #129	; 0x81
 8002194:	2003      	movs	r0, #3
 8002196:	f7fe fa2f 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_DIGIT_3, 0xFF);
 800219a:	21ff      	movs	r1, #255	; 0xff
 800219c:	2004      	movs	r0, #4
 800219e:	f7fe fa2b 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_DIGIT_4, 0xFF);
 80021a2:	21ff      	movs	r1, #255	; 0xff
 80021a4:	2005      	movs	r0, #5
 80021a6:	f7fe fa27 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_DIGIT_5, 0x81);
 80021aa:	2181      	movs	r1, #129	; 0x81
 80021ac:	2006      	movs	r0, #6
 80021ae:	f7fe fa23 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_DIGIT_6, 0x81);
 80021b2:	2181      	movs	r1, #129	; 0x81
 80021b4:	2007      	movs	r0, #7
 80021b6:	f7fe fa1f 	bl	80005f8 <send_data_SPI>
	send_data_SPI(REG_DIGIT_7, 0x81);
 80021ba:	2181      	movs	r1, #129	; 0x81
 80021bc:	2008      	movs	r0, #8
 80021be:	f7fe fa1b 	bl	80005f8 <send_data_SPI>

	send_data_SPI2(REG_DIGIT_0, 0x80);
 80021c2:	2180      	movs	r1, #128	; 0x80
 80021c4:	2001      	movs	r0, #1
 80021c6:	f7fe fa4d 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_DIGIT_1, 0x80);
 80021ca:	2180      	movs	r1, #128	; 0x80
 80021cc:	2002      	movs	r0, #2
 80021ce:	f7fe fa49 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_DIGIT_2, 0x80);
 80021d2:	2180      	movs	r1, #128	; 0x80
 80021d4:	2003      	movs	r0, #3
 80021d6:	f7fe fa45 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_DIGIT_3, 0x80);
 80021da:	2180      	movs	r1, #128	; 0x80
 80021dc:	2004      	movs	r0, #4
 80021de:	f7fe fa41 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_DIGIT_4, 0x80);
 80021e2:	2180      	movs	r1, #128	; 0x80
 80021e4:	2005      	movs	r0, #5
 80021e6:	f7fe fa3d 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_DIGIT_5, 0x80);
 80021ea:	2180      	movs	r1, #128	; 0x80
 80021ec:	2006      	movs	r0, #6
 80021ee:	f7fe fa39 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_DIGIT_6, 0x80);
 80021f2:	2180      	movs	r1, #128	; 0x80
 80021f4:	2007      	movs	r0, #7
 80021f6:	f7fe fa35 	bl	8000664 <send_data_SPI2>
	send_data_SPI2(REG_DIGIT_7, 0xFF);
 80021fa:	21ff      	movs	r1, #255	; 0xff
 80021fc:	2008      	movs	r0, #8
 80021fe:	f7fe fa31 	bl	8000664 <send_data_SPI2>

	send_data_SPI3(REG_DIGIT_0, 0xFF);
 8002202:	21ff      	movs	r1, #255	; 0xff
 8002204:	2001      	movs	r0, #1
 8002206:	f7fe fa83 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_DIGIT_1, 0x81);
 800220a:	2181      	movs	r1, #129	; 0x81
 800220c:	2002      	movs	r0, #2
 800220e:	f7fe fa7f 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_DIGIT_2, 0x81);
 8002212:	2181      	movs	r1, #129	; 0x81
 8002214:	2003      	movs	r0, #3
 8002216:	f7fe fa7b 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_DIGIT_3, 0x81);
 800221a:	2181      	movs	r1, #129	; 0x81
 800221c:	2004      	movs	r0, #4
 800221e:	f7fe fa77 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_DIGIT_4, 0x81);
 8002222:	2181      	movs	r1, #129	; 0x81
 8002224:	2005      	movs	r0, #5
 8002226:	f7fe fa73 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_DIGIT_5, 0x81);
 800222a:	2181      	movs	r1, #129	; 0x81
 800222c:	2006      	movs	r0, #6
 800222e:	f7fe fa6f 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_DIGIT_6, 0x81);
 8002232:	2181      	movs	r1, #129	; 0x81
 8002234:	2007      	movs	r0, #7
 8002236:	f7fe fa6b 	bl	8000710 <send_data_SPI3>
	send_data_SPI3(REG_DIGIT_7, 0xFF);
 800223a:	21ff      	movs	r1, #255	; 0xff
 800223c:	2008      	movs	r0, #8
 800223e:	f7fe fa67 	bl	8000710 <send_data_SPI3>

	send_data_SPI4(REG_DIGIT_0, 0x81);
 8002242:	2181      	movs	r1, #129	; 0x81
 8002244:	2001      	movs	r0, #1
 8002246:	f7fe fad7 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_DIGIT_1, 0x81);
 800224a:	2181      	movs	r1, #129	; 0x81
 800224c:	2002      	movs	r0, #2
 800224e:	f7fe fad3 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_DIGIT_2, 0x81);
 8002252:	2181      	movs	r1, #129	; 0x81
 8002254:	2003      	movs	r0, #3
 8002256:	f7fe facf 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_DIGIT_3, 0xFF);
 800225a:	21ff      	movs	r1, #255	; 0xff
 800225c:	2004      	movs	r0, #4
 800225e:	f7fe facb 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_DIGIT_4, 0xFF);
 8002262:	21ff      	movs	r1, #255	; 0xff
 8002264:	2005      	movs	r0, #5
 8002266:	f7fe fac7 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_DIGIT_5, 0x81);
 800226a:	2181      	movs	r1, #129	; 0x81
 800226c:	2006      	movs	r0, #6
 800226e:	f7fe fac3 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_DIGIT_6, 0x81);
 8002272:	2181      	movs	r1, #129	; 0x81
 8002274:	2007      	movs	r0, #7
 8002276:	f7fe fabf 	bl	80007f8 <send_data_SPI4>
	send_data_SPI4(REG_DIGIT_7, 0x81);
 800227a:	2181      	movs	r1, #129	; 0x81
 800227c:	2008      	movs	r0, #8
 800227e:	f7fe fabb 	bl	80007f8 <send_data_SPI4>
//	send_data_SPI(REG_DIGIT_1, 0xFF);
	/* Infinite loop */
	while (1) {
		//HAL_GPIO_WritePin(GPIOA, GPIO_PIN_6, GPIO_PIN_SET);
		//El chip select ESTA funcionando
		BSP_LED_Toggle(LED1);
 8002282:	2000      	movs	r0, #0
 8002284:	f7fe fbb4 	bl	80009f0 <BSP_LED_Toggle>


		HAL_Delay(1000);
 8002288:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800228c:	f7fe fc9a 	bl	8000bc4 <HAL_Delay>
		BSP_LED_Toggle(LED1);
 8002290:	e7f7      	b.n	8002282 <main+0x1d2>
	...

08002294 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b094      	sub	sp, #80	; 0x50
 8002298:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 800229a:	2300      	movs	r3, #0
 800229c:	60bb      	str	r3, [r7, #8]
 800229e:	4b2c      	ldr	r3, [pc, #176]	; (8002350 <SystemClock_Config+0xbc>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	4a2b      	ldr	r2, [pc, #172]	; (8002350 <SystemClock_Config+0xbc>)
 80022a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022a8:	6413      	str	r3, [r2, #64]	; 0x40
 80022aa:	4b29      	ldr	r3, [pc, #164]	; (8002350 <SystemClock_Config+0xbc>)
 80022ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022b2:	60bb      	str	r3, [r7, #8]
 80022b4:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80022b6:	2300      	movs	r3, #0
 80022b8:	607b      	str	r3, [r7, #4]
 80022ba:	4b26      	ldr	r3, [pc, #152]	; (8002354 <SystemClock_Config+0xc0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4a25      	ldr	r2, [pc, #148]	; (8002354 <SystemClock_Config+0xc0>)
 80022c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80022c4:	6013      	str	r3, [r2, #0]
 80022c6:	4b23      	ldr	r3, [pc, #140]	; (8002354 <SystemClock_Config+0xc0>)
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80022ce:	607b      	str	r3, [r7, #4]
 80022d0:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80022d2:	2301      	movs	r3, #1
 80022d4:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80022d6:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80022da:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80022dc:	2302      	movs	r3, #2
 80022de:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80022e0:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80022e4:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 80022e6:	2308      	movs	r3, #8
 80022e8:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 80022ea:	f44f 73b4 	mov.w	r3, #360	; 0x168
 80022ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80022f0:	2302      	movs	r3, #2
 80022f2:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 80022f4:	2307      	movs	r3, #7
 80022f6:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80022f8:	f107 030c 	add.w	r3, r7, #12
 80022fc:	4618      	mov	r0, r3
 80022fe:	f7fe ffa1 	bl	8001244 <HAL_RCC_OscConfig>
 8002302:	4603      	mov	r3, r0
 8002304:	2b00      	cmp	r3, #0
 8002306:	d001      	beq.n	800230c <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8002308:	f000 f826 	bl	8002358 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800230c:	f7fe ff4a 	bl	80011a4 <HAL_PWREx_EnableOverDrive>
 8002310:	4603      	mov	r3, r0
 8002312:	2b00      	cmp	r3, #0
 8002314:	d001      	beq.n	800231a <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8002316:	f000 f81f 	bl	8002358 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800231a:	230f      	movs	r3, #15
 800231c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800231e:	2302      	movs	r3, #2
 8002320:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002322:	2300      	movs	r3, #0
 8002324:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002326:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800232a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800232c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002330:	64fb      	str	r3, [r7, #76]	; 0x4c
	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002332:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8002336:	2105      	movs	r1, #5
 8002338:	4618      	mov	r0, r3
 800233a:	f7ff f9fb 	bl	8001734 <HAL_RCC_ClockConfig>
 800233e:	4603      	mov	r3, r0
 8002340:	2b00      	cmp	r3, #0
 8002342:	d001      	beq.n	8002348 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8002344:	f000 f808 	bl	8002358 <Error_Handler>
	}
}
 8002348:	bf00      	nop
 800234a:	3750      	adds	r7, #80	; 0x50
 800234c:	46bd      	mov	sp, r7
 800234e:	bd80      	pop	{r7, pc}
 8002350:	40023800 	.word	0x40023800
 8002354:	40007000 	.word	0x40007000

08002358 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 800235c:	2001      	movs	r0, #1
 800235e:	f7fe fb2d 	bl	80009bc <BSP_LED_On>
	while (1)
 8002362:	e7fe      	b.n	8002362 <Error_Handler+0xa>

08002364 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8002364:	f8df d034 	ldr.w	sp, [pc, #52]	; 800239c <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002368:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800236a:	e003      	b.n	8002374 <LoopCopyDataInit>

0800236c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800236c:	4b0c      	ldr	r3, [pc, #48]	; (80023a0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800236e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002370:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002372:	3104      	adds	r1, #4

08002374 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002374:	480b      	ldr	r0, [pc, #44]	; (80023a4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002376:	4b0c      	ldr	r3, [pc, #48]	; (80023a8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002378:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 800237a:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 800237c:	d3f6      	bcc.n	800236c <CopyDataInit>
  ldr  r2, =_sbss
 800237e:	4a0b      	ldr	r2, [pc, #44]	; (80023ac <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002380:	e002      	b.n	8002388 <LoopFillZerobss>

08002382 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002382:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002384:	f842 3b04 	str.w	r3, [r2], #4

08002388 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002388:	4b09      	ldr	r3, [pc, #36]	; (80023b0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 800238a:	429a      	cmp	r2, r3
  bcc  FillZerobss
 800238c:	d3f9      	bcc.n	8002382 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800238e:	f7fe fb49 	bl	8000a24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002392:	f000 f811 	bl	80023b8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002396:	f7ff fe8b 	bl	80020b0 <main>
  bx  lr    
 800239a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800239c:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80023a0:	08002440 	.word	0x08002440
  ldr  r0, =_sdata
 80023a4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80023a8:	20000018 	.word	0x20000018
  ldr  r2, =_sbss
 80023ac:	20000018 	.word	0x20000018
  ldr  r3, = _ebss
 80023b0:	20000090 	.word	0x20000090

080023b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80023b4:	e7fe      	b.n	80023b4 <ADC_IRQHandler>
	...

080023b8 <__libc_init_array>:
 80023b8:	b570      	push	{r4, r5, r6, lr}
 80023ba:	4d0d      	ldr	r5, [pc, #52]	; (80023f0 <__libc_init_array+0x38>)
 80023bc:	4c0d      	ldr	r4, [pc, #52]	; (80023f4 <__libc_init_array+0x3c>)
 80023be:	1b64      	subs	r4, r4, r5
 80023c0:	10a4      	asrs	r4, r4, #2
 80023c2:	2600      	movs	r6, #0
 80023c4:	42a6      	cmp	r6, r4
 80023c6:	d109      	bne.n	80023dc <__libc_init_array+0x24>
 80023c8:	4d0b      	ldr	r5, [pc, #44]	; (80023f8 <__libc_init_array+0x40>)
 80023ca:	4c0c      	ldr	r4, [pc, #48]	; (80023fc <__libc_init_array+0x44>)
 80023cc:	f000 f818 	bl	8002400 <_init>
 80023d0:	1b64      	subs	r4, r4, r5
 80023d2:	10a4      	asrs	r4, r4, #2
 80023d4:	2600      	movs	r6, #0
 80023d6:	42a6      	cmp	r6, r4
 80023d8:	d105      	bne.n	80023e6 <__libc_init_array+0x2e>
 80023da:	bd70      	pop	{r4, r5, r6, pc}
 80023dc:	f855 3b04 	ldr.w	r3, [r5], #4
 80023e0:	4798      	blx	r3
 80023e2:	3601      	adds	r6, #1
 80023e4:	e7ee      	b.n	80023c4 <__libc_init_array+0xc>
 80023e6:	f855 3b04 	ldr.w	r3, [r5], #4
 80023ea:	4798      	blx	r3
 80023ec:	3601      	adds	r6, #1
 80023ee:	e7f2      	b.n	80023d6 <__libc_init_array+0x1e>
 80023f0:	08002438 	.word	0x08002438
 80023f4:	08002438 	.word	0x08002438
 80023f8:	08002438 	.word	0x08002438
 80023fc:	0800243c 	.word	0x0800243c

08002400 <_init>:
 8002400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002402:	bf00      	nop
 8002404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002406:	bc08      	pop	{r3}
 8002408:	469e      	mov	lr, r3
 800240a:	4770      	bx	lr

0800240c <_fini>:
 800240c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800240e:	bf00      	nop
 8002410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002412:	bc08      	pop	{r3}
 8002414:	469e      	mov	lr, r3
 8002416:	4770      	bx	lr
