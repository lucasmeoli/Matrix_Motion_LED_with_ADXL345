
accelerometer_LED_Matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004d88  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08004f38  08004f38  00014f38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004f90  08004f90  0002012c  2**0
                  CONTENTS
  4 .ARM          00000008  08004f90  08004f90  00014f90  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004f98  08004f98  0002012c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004f98  08004f98  00014f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004f9c  08004f9c  00014f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000012c  20000000  08004fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002012c  2**0
                  CONTENTS
 10 .bss          00000284  2000012c  2000012c  0002012c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003b0  200003b0  0002012c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002012c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  0002015c  2**0
                  CONTENTS, READONLY
 14 .debug_info   0000efe4  00000000  00000000  0002019f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000284a  00000000  00000000  0002f183  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000e38  00000000  00000000  000319d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000afd  00000000  00000000  00032808  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0002752b  00000000  00000000  00033305  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016f8a  00000000  00000000  0005a830  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000e58ec  00000000  00000000  000717ba  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00003df0  00000000  00000000  001570a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000008b  00000000  00000000  0015ae98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000012c 	.word	0x2000012c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08004f20 	.word	0x08004f20

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000130 	.word	0x20000130
 80001ec:	08004f20 	.word	0x08004f20

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002a4:	f000 b970 	b.w	8000588 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9e08      	ldr	r6, [sp, #32]
 80002c6:	460d      	mov	r5, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	460f      	mov	r7, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4694      	mov	ip, r2
 80002d4:	d965      	bls.n	80003a2 <__udivmoddi4+0xe2>
 80002d6:	fab2 f382 	clz	r3, r2
 80002da:	b143      	cbz	r3, 80002ee <__udivmoddi4+0x2e>
 80002dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002e0:	f1c3 0220 	rsb	r2, r3, #32
 80002e4:	409f      	lsls	r7, r3
 80002e6:	fa20 f202 	lsr.w	r2, r0, r2
 80002ea:	4317      	orrs	r7, r2
 80002ec:	409c      	lsls	r4, r3
 80002ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002f2:	fa1f f58c 	uxth.w	r5, ip
 80002f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002fa:	0c22      	lsrs	r2, r4, #16
 80002fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000300:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000304:	fb01 f005 	mul.w	r0, r1, r5
 8000308:	4290      	cmp	r0, r2
 800030a:	d90a      	bls.n	8000322 <__udivmoddi4+0x62>
 800030c:	eb1c 0202 	adds.w	r2, ip, r2
 8000310:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000314:	f080 811c 	bcs.w	8000550 <__udivmoddi4+0x290>
 8000318:	4290      	cmp	r0, r2
 800031a:	f240 8119 	bls.w	8000550 <__udivmoddi4+0x290>
 800031e:	3902      	subs	r1, #2
 8000320:	4462      	add	r2, ip
 8000322:	1a12      	subs	r2, r2, r0
 8000324:	b2a4      	uxth	r4, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000332:	fb00 f505 	mul.w	r5, r0, r5
 8000336:	42a5      	cmp	r5, r4
 8000338:	d90a      	bls.n	8000350 <__udivmoddi4+0x90>
 800033a:	eb1c 0404 	adds.w	r4, ip, r4
 800033e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000342:	f080 8107 	bcs.w	8000554 <__udivmoddi4+0x294>
 8000346:	42a5      	cmp	r5, r4
 8000348:	f240 8104 	bls.w	8000554 <__udivmoddi4+0x294>
 800034c:	4464      	add	r4, ip
 800034e:	3802      	subs	r0, #2
 8000350:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000354:	1b64      	subs	r4, r4, r5
 8000356:	2100      	movs	r1, #0
 8000358:	b11e      	cbz	r6, 8000362 <__udivmoddi4+0xa2>
 800035a:	40dc      	lsrs	r4, r3
 800035c:	2300      	movs	r3, #0
 800035e:	e9c6 4300 	strd	r4, r3, [r6]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0xbc>
 800036a:	2e00      	cmp	r6, #0
 800036c:	f000 80ed 	beq.w	800054a <__udivmoddi4+0x28a>
 8000370:	2100      	movs	r1, #0
 8000372:	e9c6 0500 	strd	r0, r5, [r6]
 8000376:	4608      	mov	r0, r1
 8000378:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800037c:	fab3 f183 	clz	r1, r3
 8000380:	2900      	cmp	r1, #0
 8000382:	d149      	bne.n	8000418 <__udivmoddi4+0x158>
 8000384:	42ab      	cmp	r3, r5
 8000386:	d302      	bcc.n	800038e <__udivmoddi4+0xce>
 8000388:	4282      	cmp	r2, r0
 800038a:	f200 80f8 	bhi.w	800057e <__udivmoddi4+0x2be>
 800038e:	1a84      	subs	r4, r0, r2
 8000390:	eb65 0203 	sbc.w	r2, r5, r3
 8000394:	2001      	movs	r0, #1
 8000396:	4617      	mov	r7, r2
 8000398:	2e00      	cmp	r6, #0
 800039a:	d0e2      	beq.n	8000362 <__udivmoddi4+0xa2>
 800039c:	e9c6 4700 	strd	r4, r7, [r6]
 80003a0:	e7df      	b.n	8000362 <__udivmoddi4+0xa2>
 80003a2:	b902      	cbnz	r2, 80003a6 <__udivmoddi4+0xe6>
 80003a4:	deff      	udf	#255	; 0xff
 80003a6:	fab2 f382 	clz	r3, r2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	f040 8090 	bne.w	80004d0 <__udivmoddi4+0x210>
 80003b0:	1a8a      	subs	r2, r1, r2
 80003b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003b6:	fa1f fe8c 	uxth.w	lr, ip
 80003ba:	2101      	movs	r1, #1
 80003bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003c0:	fb07 2015 	mls	r0, r7, r5, r2
 80003c4:	0c22      	lsrs	r2, r4, #16
 80003c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ca:	fb0e f005 	mul.w	r0, lr, r5
 80003ce:	4290      	cmp	r0, r2
 80003d0:	d908      	bls.n	80003e4 <__udivmoddi4+0x124>
 80003d2:	eb1c 0202 	adds.w	r2, ip, r2
 80003d6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x122>
 80003dc:	4290      	cmp	r0, r2
 80003de:	f200 80cb 	bhi.w	8000578 <__udivmoddi4+0x2b8>
 80003e2:	4645      	mov	r5, r8
 80003e4:	1a12      	subs	r2, r2, r0
 80003e6:	b2a4      	uxth	r4, r4
 80003e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003ec:	fb07 2210 	mls	r2, r7, r0, r2
 80003f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003f4:	fb0e fe00 	mul.w	lr, lr, r0
 80003f8:	45a6      	cmp	lr, r4
 80003fa:	d908      	bls.n	800040e <__udivmoddi4+0x14e>
 80003fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000400:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000404:	d202      	bcs.n	800040c <__udivmoddi4+0x14c>
 8000406:	45a6      	cmp	lr, r4
 8000408:	f200 80bb 	bhi.w	8000582 <__udivmoddi4+0x2c2>
 800040c:	4610      	mov	r0, r2
 800040e:	eba4 040e 	sub.w	r4, r4, lr
 8000412:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000416:	e79f      	b.n	8000358 <__udivmoddi4+0x98>
 8000418:	f1c1 0720 	rsb	r7, r1, #32
 800041c:	408b      	lsls	r3, r1
 800041e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000422:	ea4c 0c03 	orr.w	ip, ip, r3
 8000426:	fa05 f401 	lsl.w	r4, r5, r1
 800042a:	fa20 f307 	lsr.w	r3, r0, r7
 800042e:	40fd      	lsrs	r5, r7
 8000430:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000434:	4323      	orrs	r3, r4
 8000436:	fbb5 f8f9 	udiv	r8, r5, r9
 800043a:	fa1f fe8c 	uxth.w	lr, ip
 800043e:	fb09 5518 	mls	r5, r9, r8, r5
 8000442:	0c1c      	lsrs	r4, r3, #16
 8000444:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000448:	fb08 f50e 	mul.w	r5, r8, lr
 800044c:	42a5      	cmp	r5, r4
 800044e:	fa02 f201 	lsl.w	r2, r2, r1
 8000452:	fa00 f001 	lsl.w	r0, r0, r1
 8000456:	d90b      	bls.n	8000470 <__udivmoddi4+0x1b0>
 8000458:	eb1c 0404 	adds.w	r4, ip, r4
 800045c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000460:	f080 8088 	bcs.w	8000574 <__udivmoddi4+0x2b4>
 8000464:	42a5      	cmp	r5, r4
 8000466:	f240 8085 	bls.w	8000574 <__udivmoddi4+0x2b4>
 800046a:	f1a8 0802 	sub.w	r8, r8, #2
 800046e:	4464      	add	r4, ip
 8000470:	1b64      	subs	r4, r4, r5
 8000472:	b29d      	uxth	r5, r3
 8000474:	fbb4 f3f9 	udiv	r3, r4, r9
 8000478:	fb09 4413 	mls	r4, r9, r3, r4
 800047c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000480:	fb03 fe0e 	mul.w	lr, r3, lr
 8000484:	45a6      	cmp	lr, r4
 8000486:	d908      	bls.n	800049a <__udivmoddi4+0x1da>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 8000490:	d26c      	bcs.n	800056c <__udivmoddi4+0x2ac>
 8000492:	45a6      	cmp	lr, r4
 8000494:	d96a      	bls.n	800056c <__udivmoddi4+0x2ac>
 8000496:	3b02      	subs	r3, #2
 8000498:	4464      	add	r4, ip
 800049a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800049e:	fba3 9502 	umull	r9, r5, r3, r2
 80004a2:	eba4 040e 	sub.w	r4, r4, lr
 80004a6:	42ac      	cmp	r4, r5
 80004a8:	46c8      	mov	r8, r9
 80004aa:	46ae      	mov	lr, r5
 80004ac:	d356      	bcc.n	800055c <__udivmoddi4+0x29c>
 80004ae:	d053      	beq.n	8000558 <__udivmoddi4+0x298>
 80004b0:	b156      	cbz	r6, 80004c8 <__udivmoddi4+0x208>
 80004b2:	ebb0 0208 	subs.w	r2, r0, r8
 80004b6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ba:	fa04 f707 	lsl.w	r7, r4, r7
 80004be:	40ca      	lsrs	r2, r1
 80004c0:	40cc      	lsrs	r4, r1
 80004c2:	4317      	orrs	r7, r2
 80004c4:	e9c6 7400 	strd	r7, r4, [r6]
 80004c8:	4618      	mov	r0, r3
 80004ca:	2100      	movs	r1, #0
 80004cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004d0:	f1c3 0120 	rsb	r1, r3, #32
 80004d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004d8:	fa20 f201 	lsr.w	r2, r0, r1
 80004dc:	fa25 f101 	lsr.w	r1, r5, r1
 80004e0:	409d      	lsls	r5, r3
 80004e2:	432a      	orrs	r2, r5
 80004e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004e8:	fa1f fe8c 	uxth.w	lr, ip
 80004ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80004f0:	fb07 1510 	mls	r5, r7, r0, r1
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004fa:	fb00 f50e 	mul.w	r5, r0, lr
 80004fe:	428d      	cmp	r5, r1
 8000500:	fa04 f403 	lsl.w	r4, r4, r3
 8000504:	d908      	bls.n	8000518 <__udivmoddi4+0x258>
 8000506:	eb1c 0101 	adds.w	r1, ip, r1
 800050a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800050e:	d22f      	bcs.n	8000570 <__udivmoddi4+0x2b0>
 8000510:	428d      	cmp	r5, r1
 8000512:	d92d      	bls.n	8000570 <__udivmoddi4+0x2b0>
 8000514:	3802      	subs	r0, #2
 8000516:	4461      	add	r1, ip
 8000518:	1b49      	subs	r1, r1, r5
 800051a:	b292      	uxth	r2, r2
 800051c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000520:	fb07 1115 	mls	r1, r7, r5, r1
 8000524:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000528:	fb05 f10e 	mul.w	r1, r5, lr
 800052c:	4291      	cmp	r1, r2
 800052e:	d908      	bls.n	8000542 <__udivmoddi4+0x282>
 8000530:	eb1c 0202 	adds.w	r2, ip, r2
 8000534:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000538:	d216      	bcs.n	8000568 <__udivmoddi4+0x2a8>
 800053a:	4291      	cmp	r1, r2
 800053c:	d914      	bls.n	8000568 <__udivmoddi4+0x2a8>
 800053e:	3d02      	subs	r5, #2
 8000540:	4462      	add	r2, ip
 8000542:	1a52      	subs	r2, r2, r1
 8000544:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000548:	e738      	b.n	80003bc <__udivmoddi4+0xfc>
 800054a:	4631      	mov	r1, r6
 800054c:	4630      	mov	r0, r6
 800054e:	e708      	b.n	8000362 <__udivmoddi4+0xa2>
 8000550:	4639      	mov	r1, r7
 8000552:	e6e6      	b.n	8000322 <__udivmoddi4+0x62>
 8000554:	4610      	mov	r0, r2
 8000556:	e6fb      	b.n	8000350 <__udivmoddi4+0x90>
 8000558:	4548      	cmp	r0, r9
 800055a:	d2a9      	bcs.n	80004b0 <__udivmoddi4+0x1f0>
 800055c:	ebb9 0802 	subs.w	r8, r9, r2
 8000560:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000564:	3b01      	subs	r3, #1
 8000566:	e7a3      	b.n	80004b0 <__udivmoddi4+0x1f0>
 8000568:	4645      	mov	r5, r8
 800056a:	e7ea      	b.n	8000542 <__udivmoddi4+0x282>
 800056c:	462b      	mov	r3, r5
 800056e:	e794      	b.n	800049a <__udivmoddi4+0x1da>
 8000570:	4640      	mov	r0, r8
 8000572:	e7d1      	b.n	8000518 <__udivmoddi4+0x258>
 8000574:	46d0      	mov	r8, sl
 8000576:	e77b      	b.n	8000470 <__udivmoddi4+0x1b0>
 8000578:	3d02      	subs	r5, #2
 800057a:	4462      	add	r2, ip
 800057c:	e732      	b.n	80003e4 <__udivmoddi4+0x124>
 800057e:	4608      	mov	r0, r1
 8000580:	e70a      	b.n	8000398 <__udivmoddi4+0xd8>
 8000582:	4464      	add	r4, ip
 8000584:	3802      	subs	r0, #2
 8000586:	e742      	b.n	800040e <__udivmoddi4+0x14e>

08000588 <__aeabi_idiv0>:
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop

0800058c <coordinates_FSM_init>:
static bool_t decode_x_coordinate();
static bool_t decode_y_coordinate();
static void send_coordinates_uart();

/* Public functions ---------------------------------------------------------*/
bool_t coordinates_FSM_init() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	HAL_I2C_StateTypeDef adxl345_i2c_state = adxl345_get_I2C_state();
 8000592:	f000 faef 	bl	8000b74 <adxl345_get_I2C_state>
 8000596:	4603      	mov	r3, r0
 8000598:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_StateTypeDef max7219_spi_state = max7219_get_SPI_state();
 800059a:	f000 fcf1 	bl	8000f80 <max7219_get_SPI_state>
 800059e:	4603      	mov	r3, r0
 80005a0:	71bb      	strb	r3, [r7, #6]
	HAL_UART_StateTypeDef uart_state = uart_get_state();
 80005a2:	f000 fe95 	bl	80012d0 <uart_get_state>
 80005a6:	4603      	mov	r3, r0
 80005a8:	717b      	strb	r3, [r7, #5]


	if ((adxl345_i2c_state == HAL_I2C_STATE_ERROR) || (adxl345_i2c_state == HAL_I2C_STATE_RESET)) {
 80005aa:	79fb      	ldrb	r3, [r7, #7]
 80005ac:	2be0      	cmp	r3, #224	; 0xe0
 80005ae:	d002      	beq.n	80005b6 <coordinates_FSM_init+0x2a>
 80005b0:	79fb      	ldrb	r3, [r7, #7]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d109      	bne.n	80005ca <coordinates_FSM_init+0x3e>
		if (!adlx345_I2C_init()) {
 80005b6:	f000 fa33 	bl	8000a20 <adlx345_I2C_init>
 80005ba:	4603      	mov	r3, r0
 80005bc:	f083 0301 	eor.w	r3, r3, #1
 80005c0:	b2db      	uxtb	r3, r3
 80005c2:	2b00      	cmp	r3, #0
 80005c4:	d001      	beq.n	80005ca <coordinates_FSM_init+0x3e>
			return false;
 80005c6:	2300      	movs	r3, #0
 80005c8:	e023      	b.n	8000612 <coordinates_FSM_init+0x86>
		}
	}

	if ((max7219_spi_state == HAL_SPI_STATE_ERROR) || (max7219_spi_state == HAL_SPI_STATE_RESET)) {
 80005ca:	79bb      	ldrb	r3, [r7, #6]
 80005cc:	2b06      	cmp	r3, #6
 80005ce:	d002      	beq.n	80005d6 <coordinates_FSM_init+0x4a>
 80005d0:	79bb      	ldrb	r3, [r7, #6]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d109      	bne.n	80005ea <coordinates_FSM_init+0x5e>
		if (!max7219_SPI_init()) {
 80005d6:	f000 fb75 	bl	8000cc4 <max7219_SPI_init>
 80005da:	4603      	mov	r3, r0
 80005dc:	f083 0301 	eor.w	r3, r3, #1
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <coordinates_FSM_init+0x5e>
			return false;
 80005e6:	2300      	movs	r3, #0
 80005e8:	e013      	b.n	8000612 <coordinates_FSM_init+0x86>
		}
	}

	if ((uart_state == HAL_UART_STATE_ERROR) || (uart_state == HAL_UART_STATE_RESET)) {
 80005ea:	797b      	ldrb	r3, [r7, #5]
 80005ec:	2be0      	cmp	r3, #224	; 0xe0
 80005ee:	d002      	beq.n	80005f6 <coordinates_FSM_init+0x6a>
 80005f0:	797b      	ldrb	r3, [r7, #5]
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d109      	bne.n	800060a <coordinates_FSM_init+0x7e>
		if (!uart_init()) {
 80005f6:	f000 fe29 	bl	800124c <uart_init>
 80005fa:	4603      	mov	r3, r0
 80005fc:	f083 0301 	eor.w	r3, r3, #1
 8000600:	b2db      	uxtb	r3, r3
 8000602:	2b00      	cmp	r3, #0
 8000604:	d001      	beq.n	800060a <coordinates_FSM_init+0x7e>
			return false;
 8000606:	2300      	movs	r3, #0
 8000608:	e003      	b.n	8000612 <coordinates_FSM_init+0x86>
		}
	}

	current_state = CONFIGURE_MODULES;
 800060a:	4b04      	ldr	r3, [pc, #16]	; (800061c <coordinates_FSM_init+0x90>)
 800060c:	2200      	movs	r2, #0
 800060e:	701a      	strb	r2, [r3, #0]
	return true;
 8000610:	2301      	movs	r3, #1
}
 8000612:	4618      	mov	r0, r3
 8000614:	3708      	adds	r7, #8
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}
 800061a:	bf00      	nop
 800061c:	2000014d 	.word	0x2000014d

08000620 <coordinates_FSM_update>:

void coordinates_FSM_update() {
 8000620:	b590      	push	{r4, r7, lr}
 8000622:	b083      	sub	sp, #12
 8000624:	af00      	add	r7, sp, #0
	switch (current_state) {
 8000626:	4b30      	ldr	r3, [pc, #192]	; (80006e8 <coordinates_FSM_update+0xc8>)
 8000628:	781b      	ldrb	r3, [r3, #0]
 800062a:	2b03      	cmp	r3, #3
 800062c:	d850      	bhi.n	80006d0 <coordinates_FSM_update+0xb0>
 800062e:	a201      	add	r2, pc, #4	; (adr r2, 8000634 <coordinates_FSM_update+0x14>)
 8000630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000634:	08000645 	.word	0x08000645
 8000638:	08000655 	.word	0x08000655
 800063c:	0800067d 	.word	0x0800067d
 8000640:	080006a1 	.word	0x080006a1
		case CONFIGURE_MODULES:
			configure_adxl345();
 8000644:	f000 f85a 	bl	80006fc <configure_adxl345>
			configure_max7219();
 8000648:	f000 f865 	bl	8000716 <configure_max7219>

			current_state = READ_COORDINATES;
 800064c:	4b26      	ldr	r3, [pc, #152]	; (80006e8 <coordinates_FSM_update+0xc8>)
 800064e:	2201      	movs	r2, #1
 8000650:	701a      	strb	r2, [r3, #0]
			break;
 8000652:	e044      	b.n	80006de <coordinates_FSM_update+0xbe>

		case READ_COORDINATES:
			coordinates = adxl345_read_coordinates();
 8000654:	4c25      	ldr	r4, [pc, #148]	; (80006ec <coordinates_FSM_update+0xcc>)
 8000656:	463b      	mov	r3, r7
 8000658:	4618      	mov	r0, r3
 800065a:	f000 fa61 	bl	8000b20 <adxl345_read_coordinates>
 800065e:	4622      	mov	r2, r4
 8000660:	463b      	mov	r3, r7
 8000662:	6818      	ldr	r0, [r3, #0]
 8000664:	6010      	str	r0, [r2, #0]
 8000666:	889b      	ldrh	r3, [r3, #4]
 8000668:	8093      	strh	r3, [r2, #4]

			if (coordinates.z_coord > 0) {
 800066a:	4b20      	ldr	r3, [pc, #128]	; (80006ec <coordinates_FSM_update+0xcc>)
 800066c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000670:	2b00      	cmp	r3, #0
 8000672:	dd31      	ble.n	80006d8 <coordinates_FSM_update+0xb8>
				current_state = DECODE_COORDINATES;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <coordinates_FSM_update+0xc8>)
 8000676:	2202      	movs	r2, #2
 8000678:	701a      	strb	r2, [r3, #0]
			}
			break;
 800067a:	e02d      	b.n	80006d8 <coordinates_FSM_update+0xb8>

		case DECODE_COORDINATES:
			if(decode_x_coordinate() && decode_y_coordinate()) {
 800067c:	f000 f8b0 	bl	80007e0 <decode_x_coordinate>
 8000680:	4603      	mov	r3, r0
 8000682:	2b00      	cmp	r3, #0
 8000684:	d008      	beq.n	8000698 <coordinates_FSM_update+0x78>
 8000686:	f000 f8d3 	bl	8000830 <decode_y_coordinate>
 800068a:	4603      	mov	r3, r0
 800068c:	2b00      	cmp	r3, #0
 800068e:	d003      	beq.n	8000698 <coordinates_FSM_update+0x78>
				current_state = DISPLAY_COORDINATES;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <coordinates_FSM_update+0xc8>)
 8000692:	2203      	movs	r2, #3
 8000694:	701a      	strb	r2, [r3, #0]
			} else {
				current_state = READ_COORDINATES;
			}
			break;
 8000696:	e022      	b.n	80006de <coordinates_FSM_update+0xbe>
				current_state = READ_COORDINATES;
 8000698:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <coordinates_FSM_update+0xc8>)
 800069a:	2201      	movs	r2, #1
 800069c:	701a      	strb	r2, [r3, #0]
			break;
 800069e:	e01e      	b.n	80006de <coordinates_FSM_update+0xbe>

		case DISPLAY_COORDINATES:
			max7219_clean_all_displays();
 80006a0:	f000 fbb8 	bl	8000e14 <max7219_clean_all_displays>
			max7219_turn_on_LEDs(decoded_x_coordinate, decoded_y_coordinate, current_display);
 80006a4:	4b12      	ldr	r3, [pc, #72]	; (80006f0 <coordinates_FSM_update+0xd0>)
 80006a6:	881b      	ldrh	r3, [r3, #0]
 80006a8:	b2db      	uxtb	r3, r3
 80006aa:	4a12      	ldr	r2, [pc, #72]	; (80006f4 <coordinates_FSM_update+0xd4>)
 80006ac:	8812      	ldrh	r2, [r2, #0]
 80006ae:	b2d1      	uxtb	r1, r2
 80006b0:	4a11      	ldr	r2, [pc, #68]	; (80006f8 <coordinates_FSM_update+0xd8>)
 80006b2:	7812      	ldrb	r2, [r2, #0]
 80006b4:	4618      	mov	r0, r3
 80006b6:	f000 fbee 	bl	8000e96 <max7219_turn_on_LEDs>
			send_coordinates_uart();
 80006ba:	f000 f85d 	bl	8000778 <send_coordinates_uart>

			if (adxl345_is_data_ready()) {
 80006be:	f000 fa63 	bl	8000b88 <adxl345_is_data_ready>
 80006c2:	4603      	mov	r3, r0
 80006c4:	2b00      	cmp	r3, #0
 80006c6:	d009      	beq.n	80006dc <coordinates_FSM_update+0xbc>
				current_state = READ_COORDINATES;
 80006c8:	4b07      	ldr	r3, [pc, #28]	; (80006e8 <coordinates_FSM_update+0xc8>)
 80006ca:	2201      	movs	r2, #1
 80006cc:	701a      	strb	r2, [r3, #0]
			}
			break;
 80006ce:	e005      	b.n	80006dc <coordinates_FSM_update+0xbc>

		default:
			// Should never reach here. In that case go to initial state
			current_state = CONFIGURE_MODULES;
 80006d0:	4b05      	ldr	r3, [pc, #20]	; (80006e8 <coordinates_FSM_update+0xc8>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	701a      	strb	r2, [r3, #0]
			break;
 80006d6:	e002      	b.n	80006de <coordinates_FSM_update+0xbe>
			break;
 80006d8:	bf00      	nop
 80006da:	e000      	b.n	80006de <coordinates_FSM_update+0xbe>
			break;
 80006dc:	bf00      	nop
	}
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd90      	pop	{r4, r7, pc}
 80006e6:	bf00      	nop
 80006e8:	2000014d 	.word	0x2000014d
 80006ec:	20000150 	.word	0x20000150
 80006f0:	20000148 	.word	0x20000148
 80006f4:	2000014a 	.word	0x2000014a
 80006f8:	2000014c 	.word	0x2000014c

080006fc <configure_adxl345>:
 * 		   data format, and power control.
 *
 * @param  None
 * @retval None
*/
static void configure_adxl345() {
 80006fc:	b580      	push	{r7, lr}
 80006fe:	af00      	add	r7, sp, #0
	adxl345_set_bandwidth_rate(ADXL345_BW_RATE_VALUE);
 8000700:	2008      	movs	r0, #8
 8000702:	f000 fa79 	bl	8000bf8 <adxl345_set_bandwidth_rate>
	adxl345_set_data_format(ADXL345_DATA_FORMAT_VALUE);
 8000706:	2008      	movs	r0, #8
 8000708:	f000 fa90 	bl	8000c2c <adxl345_set_data_format>
	adxl345_set_power_control(ADXL345_POWER_CTL_VALUE);
 800070c:	2008      	movs	r0, #8
 800070e:	f000 fa80 	bl	8000c12 <adxl345_set_power_control>
}
 8000712:	bf00      	nop
 8000714:	bd80      	pop	{r7, pc}

08000716 <configure_max7219>:
 * 		  settings for shutdown mode, decode mode, intensity, and scan limit.
 *
 * @param None
 * @retval None
*/
static void configure_max7219() {
 8000716:	b580      	push	{r7, lr}
 8000718:	b082      	sub	sp, #8
 800071a:	af00      	add	r7, sp, #0
	max7219_set_displays(TOTAL_DISPLAYS);
 800071c:	2004      	movs	r0, #4
 800071e:	f000 fc17 	bl	8000f50 <max7219_set_displays>
	for (int8_t display = 0; display < TOTAL_DISPLAYS; display++) {
 8000722:	2300      	movs	r3, #0
 8000724:	71fb      	strb	r3, [r7, #7]
 8000726:	e01e      	b.n	8000766 <configure_max7219+0x50>
		max7219_set_shutdown(SHUTDOWN_MODE_VALUE, display);
 8000728:	79fb      	ldrb	r3, [r7, #7]
 800072a:	4619      	mov	r1, r3
 800072c:	2000      	movs	r0, #0
 800072e:	f000 fbfe 	bl	8000f2e <max7219_set_shutdown>
		max7219_set_decode_mode(NO_DECODE_MODE_VALUE, display);
 8000732:	79fb      	ldrb	r3, [r7, #7]
 8000734:	4619      	mov	r1, r3
 8000736:	2000      	movs	r0, #0
 8000738:	f000 fbc6 	bl	8000ec8 <max7219_set_decode_mode>
		max7219_set_intensity(INTENSITY_VALUE, display);
 800073c:	79fb      	ldrb	r3, [r7, #7]
 800073e:	4619      	mov	r1, r3
 8000740:	2003      	movs	r0, #3
 8000742:	f000 fbd2 	bl	8000eea <max7219_set_intensity>
		max7219_set_scan_limit(SCAN_LIMIT_VALUE, display);
 8000746:	79fb      	ldrb	r3, [r7, #7]
 8000748:	4619      	mov	r1, r3
 800074a:	2007      	movs	r0, #7
 800074c:	f000 fbde 	bl	8000f0c <max7219_set_scan_limit>
		max7219_set_shutdown(NORMAL_MODE_VALUE, display);
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	4619      	mov	r1, r3
 8000754:	2001      	movs	r0, #1
 8000756:	f000 fbea 	bl	8000f2e <max7219_set_shutdown>
	for (int8_t display = 0; display < TOTAL_DISPLAYS; display++) {
 800075a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	3301      	adds	r3, #1
 8000762:	b2db      	uxtb	r3, r3
 8000764:	71fb      	strb	r3, [r7, #7]
 8000766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800076a:	2b03      	cmp	r3, #3
 800076c:	dddc      	ble.n	8000728 <configure_max7219+0x12>
	}
}
 800076e:	bf00      	nop
 8000770:	bf00      	nop
 8000772:	3708      	adds	r7, #8
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}

08000778 <send_coordinates_uart>:
 * @brief  Sends the current coordinates via UART in the format: "X:<x_coord_value> - Y:<y_coord_value>\n"
 *
 * @param  None
 * @retval None
 */
static void send_coordinates_uart() {
 8000778:	b580      	push	{r7, lr}
 800077a:	b082      	sub	sp, #8
 800077c:	af00      	add	r7, sp, #0
	uint8_t msg_coord[5];

	uart_send_string(msg_coordinate_x);
 800077e:	4813      	ldr	r0, [pc, #76]	; (80007cc <send_coordinates_uart+0x54>)
 8000780:	f000 fdb0 	bl	80012e4 <uart_send_string>
	sprintf((char*)msg_coord, "%d", coordinates.x_coord);
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <send_coordinates_uart+0x58>)
 8000786:	f9b3 3000 	ldrsh.w	r3, [r3]
 800078a:	461a      	mov	r2, r3
 800078c:	463b      	mov	r3, r7
 800078e:	4911      	ldr	r1, [pc, #68]	; (80007d4 <send_coordinates_uart+0x5c>)
 8000790:	4618      	mov	r0, r3
 8000792:	f003 ff29 	bl	80045e8 <siprintf>
	uart_send_string(msg_coord);
 8000796:	463b      	mov	r3, r7
 8000798:	4618      	mov	r0, r3
 800079a:	f000 fda3 	bl	80012e4 <uart_send_string>

	uart_send_string(msg_coordinate_y);
 800079e:	480e      	ldr	r0, [pc, #56]	; (80007d8 <send_coordinates_uart+0x60>)
 80007a0:	f000 fda0 	bl	80012e4 <uart_send_string>
	sprintf((char*)msg_coord, "%d", coordinates.y_coord);
 80007a4:	4b0a      	ldr	r3, [pc, #40]	; (80007d0 <send_coordinates_uart+0x58>)
 80007a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80007aa:	461a      	mov	r2, r3
 80007ac:	463b      	mov	r3, r7
 80007ae:	4909      	ldr	r1, [pc, #36]	; (80007d4 <send_coordinates_uart+0x5c>)
 80007b0:	4618      	mov	r0, r3
 80007b2:	f003 ff19 	bl	80045e8 <siprintf>
	uart_send_string(msg_coord);
 80007b6:	463b      	mov	r3, r7
 80007b8:	4618      	mov	r0, r3
 80007ba:	f000 fd93 	bl	80012e4 <uart_send_string>

	uart_send_string(msg_new_line);
 80007be:	4807      	ldr	r0, [pc, #28]	; (80007dc <send_coordinates_uart+0x64>)
 80007c0:	f000 fd90 	bl	80012e4 <uart_send_string>
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	20000008 	.word	0x20000008
 80007d0:	20000150 	.word	0x20000150
 80007d4:	08004f38 	.word	0x08004f38
 80007d8:	20000018 	.word	0x20000018
 80007dc:	2000002c 	.word	0x2000002c

080007e0 <decode_x_coordinate>:
 * @brief  Decodes the X coordinate to fit within the range of display segments.
 *
 * @param  None
 * @retval true if the X coordinate is within the valid range, false otherwise.
 */
static bool_t decode_x_coordinate() {
 80007e0:	b480      	push	{r7}
 80007e2:	af00      	add	r7, sp, #0
    if (coordinates.x_coord  > COORD_MIN_VALUE && coordinates.x_coord < COORD_MAX_VALUE) {
 80007e4:	4b10      	ldr	r3, [pc, #64]	; (8000828 <decode_x_coordinate+0x48>)
 80007e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007ea:	f113 0fff 	cmn.w	r3, #255	; 0xff
 80007ee:	db14      	blt.n	800081a <decode_x_coordinate+0x3a>
 80007f0:	4b0d      	ldr	r3, [pc, #52]	; (8000828 <decode_x_coordinate+0x48>)
 80007f2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80007f6:	2bff      	cmp	r3, #255	; 0xff
 80007f8:	dc0f      	bgt.n	800081a <decode_x_coordinate+0x3a>
    	decoded_x_coordinate = ((coordinates.x_coord  + COORD_MAX_VALUE) / RANGE_X_INTERVAL) + 1;
 80007fa:	4b0b      	ldr	r3, [pc, #44]	; (8000828 <decode_x_coordinate+0x48>)
 80007fc:	f9b3 3000 	ldrsh.w	r3, [r3]
 8000800:	f503 7380 	add.w	r3, r3, #256	; 0x100
 8000804:	2b00      	cmp	r3, #0
 8000806:	da00      	bge.n	800080a <decode_x_coordinate+0x2a>
 8000808:	333f      	adds	r3, #63	; 0x3f
 800080a:	119b      	asrs	r3, r3, #6
 800080c:	b29b      	uxth	r3, r3
 800080e:	3301      	adds	r3, #1
 8000810:	b29a      	uxth	r2, r3
 8000812:	4b06      	ldr	r3, [pc, #24]	; (800082c <decode_x_coordinate+0x4c>)
 8000814:	801a      	strh	r2, [r3, #0]
    	return true;
 8000816:	2301      	movs	r3, #1
 8000818:	e000      	b.n	800081c <decode_x_coordinate+0x3c>
    }
    return false;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	46bd      	mov	sp, r7
 8000820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000824:	4770      	bx	lr
 8000826:	bf00      	nop
 8000828:	20000150 	.word	0x20000150
 800082c:	20000148 	.word	0x20000148

08000830 <decode_y_coordinate>:
/**
 * @brief  Decodes the Y coordinate to determine the appropriate display and position within the display.
 *
 * @retval true if the Y coordinate is within the valid range, false otherwise.
 */
static bool_t decode_y_coordinate() {
 8000830:	b480      	push	{r7}
 8000832:	b083      	sub	sp, #12
 8000834:	af00      	add	r7, sp, #0
	uint8_t max_index = TOTAL_DISPLAYS -1;
 8000836:	2303      	movs	r3, #3
 8000838:	70fb      	strb	r3, [r7, #3]
	uint8_t position;

    if ((coordinates.y_coord > COORD_MIN_VALUE) && (coordinates.y_coord < COORD_MAX_VALUE)) {
 800083a:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <decode_y_coordinate+0x98>)
 800083c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8000840:	f113 0fff 	cmn.w	r3, #255	; 0xff
 8000844:	db39      	blt.n	80008ba <decode_y_coordinate+0x8a>
 8000846:	4b20      	ldr	r3, [pc, #128]	; (80008c8 <decode_y_coordinate+0x98>)
 8000848:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800084c:	2bff      	cmp	r3, #255	; 0xff
 800084e:	dc34      	bgt.n	80008ba <decode_y_coordinate+0x8a>
    	 * The limits for each range are specified by display_limits.
    	 * Therefore, for each range, the display number must be set, and decoding must be performed, as each range
    	 * is divided into 8 subranges corresponding to specific LEDs out of the 8 possible LEDs.
    	 * Each LED corresponds to one bit in an 8-bit word.
    	 */
    	for (int i = 0; i < TOTAL_DISPLAYS; i++) {
 8000850:	2300      	movs	r3, #0
 8000852:	607b      	str	r3, [r7, #4]
 8000854:	e02c      	b.n	80008b0 <decode_y_coordinate+0x80>
    	    if (coordinates.y_coord < display_limits[i]) {
 8000856:	4b1c      	ldr	r3, [pc, #112]	; (80008c8 <decode_y_coordinate+0x98>)
 8000858:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 800085c:	491b      	ldr	r1, [pc, #108]	; (80008cc <decode_y_coordinate+0x9c>)
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
 8000864:	429a      	cmp	r2, r3
 8000866:	da20      	bge.n	80008aa <decode_y_coordinate+0x7a>
    	        current_display = max_index - i;
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	b2db      	uxtb	r3, r3
 800086c:	78fa      	ldrb	r2, [r7, #3]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	b2da      	uxtb	r2, r3
 8000872:	4b17      	ldr	r3, [pc, #92]	; (80008d0 <decode_y_coordinate+0xa0>)
 8000874:	701a      	strb	r2, [r3, #0]
    	        position = (coordinates.y_coord + display_limits[max_index-i]) / RANGE_Y_DIVISON;
 8000876:	4b14      	ldr	r3, [pc, #80]	; (80008c8 <decode_y_coordinate+0x98>)
 8000878:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800087c:	4619      	mov	r1, r3
 800087e:	78fa      	ldrb	r2, [r7, #3]
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	1ad3      	subs	r3, r2, r3
 8000884:	4a11      	ldr	r2, [pc, #68]	; (80008cc <decode_y_coordinate+0x9c>)
 8000886:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800088a:	440b      	add	r3, r1
 800088c:	2b00      	cmp	r3, #0
 800088e:	da00      	bge.n	8000892 <decode_y_coordinate+0x62>
 8000890:	330f      	adds	r3, #15
 8000892:	111b      	asrs	r3, r3, #4
 8000894:	70bb      	strb	r3, [r7, #2]
    	        decoded_y_coordinate = 1 << (7 - position);
 8000896:	78bb      	ldrb	r3, [r7, #2]
 8000898:	f1c3 0307 	rsb	r3, r3, #7
 800089c:	2201      	movs	r2, #1
 800089e:	fa02 f303 	lsl.w	r3, r2, r3
 80008a2:	b29a      	uxth	r2, r3
 80008a4:	4b0b      	ldr	r3, [pc, #44]	; (80008d4 <decode_y_coordinate+0xa4>)
 80008a6:	801a      	strh	r2, [r3, #0]
    	        break;
 80008a8:	e005      	b.n	80008b6 <decode_y_coordinate+0x86>
    	for (int i = 0; i < TOTAL_DISPLAYS; i++) {
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	3301      	adds	r3, #1
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	2b03      	cmp	r3, #3
 80008b4:	ddcf      	ble.n	8000856 <decode_y_coordinate+0x26>
    	    }
    	}
    	return true;
 80008b6:	2301      	movs	r3, #1
 80008b8:	e000      	b.n	80008bc <decode_y_coordinate+0x8c>
    }
    return false;
 80008ba:	2300      	movs	r3, #0
}
 80008bc:	4618      	mov	r0, r3
 80008be:	370c      	adds	r7, #12
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr
 80008c8:	20000150 	.word	0x20000150
 80008cc:	20000000 	.word	0x20000000
 80008d0:	2000014c 	.word	0x2000014c
 80008d4:	2000014a 	.word	0x2000014a

080008d8 <sensitivity_FSM_init>:

static sensitivityState_t current_state;

/* Private function prototypes -----------------------------------------------*/
/* Public functions ---------------------------------------------------------*/
bool_t sensitivity_FSM_init() {
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
	current_state = SENSITIVITY_2G;
 80008de:	4b0a      	ldr	r3, [pc, #40]	; (8000908 <sensitivity_FSM_init+0x30>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]
	HAL_UART_StateTypeDef uart_state = uart_get_state();
 80008e4:	f000 fcf4 	bl	80012d0 <uart_get_state>
 80008e8:	4603      	mov	r3, r0
 80008ea:	71fb      	strb	r3, [r7, #7]

	if ((uart_state == HAL_UART_STATE_ERROR) || (uart_state == HAL_UART_STATE_RESET)) {
 80008ec:	79fb      	ldrb	r3, [r7, #7]
 80008ee:	2be0      	cmp	r3, #224	; 0xe0
 80008f0:	d002      	beq.n	80008f8 <sensitivity_FSM_init+0x20>
 80008f2:	79fb      	ldrb	r3, [r7, #7]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d101      	bne.n	80008fc <sensitivity_FSM_init+0x24>
		return false;
 80008f8:	2300      	movs	r3, #0
 80008fa:	e000      	b.n	80008fe <sensitivity_FSM_init+0x26>
	}
	return true;
 80008fc:	2301      	movs	r3, #1
}
 80008fe:	4618      	mov	r0, r3
 8000900:	3708      	adds	r7, #8
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}
 8000906:	bf00      	nop
 8000908:	20000156 	.word	0x20000156

0800090c <sensitivity_FSM_update>:

void sensitivity_FSM_update(uint8_t taps) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	71fb      	strb	r3, [r7, #7]
	switch (current_state) {
 8000916:	4b3d      	ldr	r3, [pc, #244]	; (8000a0c <sensitivity_FSM_update+0x100>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b03      	cmp	r3, #3
 800091c:	d866      	bhi.n	80009ec <sensitivity_FSM_update+0xe0>
 800091e:	a201      	add	r2, pc, #4	; (adr r2, 8000924 <sensitivity_FSM_update+0x18>)
 8000920:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000924:	08000935 	.word	0x08000935
 8000928:	0800095d 	.word	0x0800095d
 800092c:	08000991 	.word	0x08000991
 8000930:	080009c5 	.word	0x080009c5
		case SENSITIVITY_2G:
			if (taps == SENSITIVITY_DOWN_TAPS) {
 8000934:	79fb      	ldrb	r3, [r7, #7]
 8000936:	2b02      	cmp	r3, #2
 8000938:	d109      	bne.n	800094e <sensitivity_FSM_update+0x42>
				adxl345_set_sensitivity(RESOLUTION_4G);
 800093a:	2001      	movs	r0, #1
 800093c:	f000 f948 	bl	8000bd0 <adxl345_set_sensitivity>
				current_state = SENSITIVITY_4G;
 8000940:	4b32      	ldr	r3, [pc, #200]	; (8000a0c <sensitivity_FSM_update+0x100>)
 8000942:	2201      	movs	r2, #1
 8000944:	701a      	strb	r2, [r3, #0]
				uart_send_string(msg_4g);
 8000946:	4832      	ldr	r0, [pc, #200]	; (8000a10 <sensitivity_FSM_update+0x104>)
 8000948:	f000 fccc 	bl	80012e4 <uart_send_string>
			} else if (taps == SENSITIVITY_UP_TAPS) {
				uart_send_string(msg_2g);
			}
			break;
 800094c:	e052      	b.n	80009f4 <sensitivity_FSM_update+0xe8>
			} else if (taps == SENSITIVITY_UP_TAPS) {
 800094e:	79fb      	ldrb	r3, [r7, #7]
 8000950:	2b01      	cmp	r3, #1
 8000952:	d14f      	bne.n	80009f4 <sensitivity_FSM_update+0xe8>
				uart_send_string(msg_2g);
 8000954:	482f      	ldr	r0, [pc, #188]	; (8000a14 <sensitivity_FSM_update+0x108>)
 8000956:	f000 fcc5 	bl	80012e4 <uart_send_string>
			break;
 800095a:	e04b      	b.n	80009f4 <sensitivity_FSM_update+0xe8>

		case SENSITIVITY_4G:
			if (taps == SENSITIVITY_DOWN_TAPS) {
 800095c:	79fb      	ldrb	r3, [r7, #7]
 800095e:	2b02      	cmp	r3, #2
 8000960:	d109      	bne.n	8000976 <sensitivity_FSM_update+0x6a>
				adxl345_set_sensitivity(RESOLUTION_8G);
 8000962:	2002      	movs	r0, #2
 8000964:	f000 f934 	bl	8000bd0 <adxl345_set_sensitivity>
				current_state = SENSITIVITY_8G;
 8000968:	4b28      	ldr	r3, [pc, #160]	; (8000a0c <sensitivity_FSM_update+0x100>)
 800096a:	2202      	movs	r2, #2
 800096c:	701a      	strb	r2, [r3, #0]
				uart_send_string(msg_8g);
 800096e:	482a      	ldr	r0, [pc, #168]	; (8000a18 <sensitivity_FSM_update+0x10c>)
 8000970:	f000 fcb8 	bl	80012e4 <uart_send_string>
			} else if (taps == SENSITIVITY_UP_TAPS) {
				adxl345_set_sensitivity(RESOLUTION_2G);
				current_state = SENSITIVITY_2G;
				uart_send_string(msg_2g);
			}
			break;
 8000974:	e040      	b.n	80009f8 <sensitivity_FSM_update+0xec>
			} else if (taps == SENSITIVITY_UP_TAPS) {
 8000976:	79fb      	ldrb	r3, [r7, #7]
 8000978:	2b01      	cmp	r3, #1
 800097a:	d13d      	bne.n	80009f8 <sensitivity_FSM_update+0xec>
				adxl345_set_sensitivity(RESOLUTION_2G);
 800097c:	2000      	movs	r0, #0
 800097e:	f000 f927 	bl	8000bd0 <adxl345_set_sensitivity>
				current_state = SENSITIVITY_2G;
 8000982:	4b22      	ldr	r3, [pc, #136]	; (8000a0c <sensitivity_FSM_update+0x100>)
 8000984:	2200      	movs	r2, #0
 8000986:	701a      	strb	r2, [r3, #0]
				uart_send_string(msg_2g);
 8000988:	4822      	ldr	r0, [pc, #136]	; (8000a14 <sensitivity_FSM_update+0x108>)
 800098a:	f000 fcab 	bl	80012e4 <uart_send_string>
			break;
 800098e:	e033      	b.n	80009f8 <sensitivity_FSM_update+0xec>

		case SENSITIVITY_8G:
			if (taps == SENSITIVITY_DOWN_TAPS) {
 8000990:	79fb      	ldrb	r3, [r7, #7]
 8000992:	2b02      	cmp	r3, #2
 8000994:	d109      	bne.n	80009aa <sensitivity_FSM_update+0x9e>
				adxl345_set_sensitivity(RESOLUTION_16G);
 8000996:	2003      	movs	r0, #3
 8000998:	f000 f91a 	bl	8000bd0 <adxl345_set_sensitivity>
				current_state = SENSITIVITY_16G;
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <sensitivity_FSM_update+0x100>)
 800099e:	2203      	movs	r2, #3
 80009a0:	701a      	strb	r2, [r3, #0]
				uart_send_string(msg_16g);
 80009a2:	481e      	ldr	r0, [pc, #120]	; (8000a1c <sensitivity_FSM_update+0x110>)
 80009a4:	f000 fc9e 	bl	80012e4 <uart_send_string>
			} else if (taps == SENSITIVITY_UP_TAPS) {
				adxl345_set_sensitivity(RESOLUTION_4G);
				current_state = SENSITIVITY_4G;
				uart_send_string(msg_4g);
			}
			break;
 80009a8:	e028      	b.n	80009fc <sensitivity_FSM_update+0xf0>
			} else if (taps == SENSITIVITY_UP_TAPS) {
 80009aa:	79fb      	ldrb	r3, [r7, #7]
 80009ac:	2b01      	cmp	r3, #1
 80009ae:	d125      	bne.n	80009fc <sensitivity_FSM_update+0xf0>
				adxl345_set_sensitivity(RESOLUTION_4G);
 80009b0:	2001      	movs	r0, #1
 80009b2:	f000 f90d 	bl	8000bd0 <adxl345_set_sensitivity>
				current_state = SENSITIVITY_4G;
 80009b6:	4b15      	ldr	r3, [pc, #84]	; (8000a0c <sensitivity_FSM_update+0x100>)
 80009b8:	2201      	movs	r2, #1
 80009ba:	701a      	strb	r2, [r3, #0]
				uart_send_string(msg_4g);
 80009bc:	4814      	ldr	r0, [pc, #80]	; (8000a10 <sensitivity_FSM_update+0x104>)
 80009be:	f000 fc91 	bl	80012e4 <uart_send_string>
			break;
 80009c2:	e01b      	b.n	80009fc <sensitivity_FSM_update+0xf0>

		case SENSITIVITY_16G:
			if (taps == SENSITIVITY_DOWN_TAPS) {
 80009c4:	79fb      	ldrb	r3, [r7, #7]
 80009c6:	2b02      	cmp	r3, #2
 80009c8:	d103      	bne.n	80009d2 <sensitivity_FSM_update+0xc6>
				uart_send_string(msg_16g);
 80009ca:	4814      	ldr	r0, [pc, #80]	; (8000a1c <sensitivity_FSM_update+0x110>)
 80009cc:	f000 fc8a 	bl	80012e4 <uart_send_string>
			} else if (taps == SENSITIVITY_UP_TAPS) {
				adxl345_set_sensitivity(RESOLUTION_8G);
				current_state = SENSITIVITY_8G;
				uart_send_string(msg_8g);
			}
			break;
 80009d0:	e016      	b.n	8000a00 <sensitivity_FSM_update+0xf4>
			} else if (taps == SENSITIVITY_UP_TAPS) {
 80009d2:	79fb      	ldrb	r3, [r7, #7]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d113      	bne.n	8000a00 <sensitivity_FSM_update+0xf4>
				adxl345_set_sensitivity(RESOLUTION_8G);
 80009d8:	2002      	movs	r0, #2
 80009da:	f000 f8f9 	bl	8000bd0 <adxl345_set_sensitivity>
				current_state = SENSITIVITY_8G;
 80009de:	4b0b      	ldr	r3, [pc, #44]	; (8000a0c <sensitivity_FSM_update+0x100>)
 80009e0:	2202      	movs	r2, #2
 80009e2:	701a      	strb	r2, [r3, #0]
				uart_send_string(msg_8g);
 80009e4:	480c      	ldr	r0, [pc, #48]	; (8000a18 <sensitivity_FSM_update+0x10c>)
 80009e6:	f000 fc7d 	bl	80012e4 <uart_send_string>
			break;
 80009ea:	e009      	b.n	8000a00 <sensitivity_FSM_update+0xf4>

		default:
			// Should never reach here. In that case go to initial state
			current_state = SENSITIVITY_2G;
 80009ec:	4b07      	ldr	r3, [pc, #28]	; (8000a0c <sensitivity_FSM_update+0x100>)
 80009ee:	2200      	movs	r2, #0
 80009f0:	701a      	strb	r2, [r3, #0]
			break;
 80009f2:	e006      	b.n	8000a02 <sensitivity_FSM_update+0xf6>
			break;
 80009f4:	bf00      	nop
 80009f6:	e004      	b.n	8000a02 <sensitivity_FSM_update+0xf6>
			break;
 80009f8:	bf00      	nop
 80009fa:	e002      	b.n	8000a02 <sensitivity_FSM_update+0xf6>
			break;
 80009fc:	bf00      	nop
 80009fe:	e000      	b.n	8000a02 <sensitivity_FSM_update+0xf6>
			break;
 8000a00:	bf00      	nop
	}
}
 8000a02:	bf00      	nop
 8000a04:	3708      	adds	r7, #8
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bd80      	pop	{r7, pc}
 8000a0a:	bf00      	nop
 8000a0c:	20000156 	.word	0x20000156
 8000a10:	20000048 	.word	0x20000048
 8000a14:	20000030 	.word	0x20000030
 8000a18:	20000060 	.word	0x20000060
 8000a1c:	20000078 	.word	0x20000078

08000a20 <adlx345_I2C_init>:
static uint8_t read_register(uint8_t reg);


/* Public functions ---------------------------------------------------------*/

bool_t adlx345_I2C_init() {
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
	bool_t return_value = false;
 8000a26:	2300      	movs	r3, #0
 8000a28:	71fb      	strb	r3, [r7, #7]
	HAL_I2C_StateTypeDef i2c_state = HAL_I2C_GetState(&hi2c1);
 8000a2a:	481d      	ldr	r0, [pc, #116]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a2c:	f001 fdb0 	bl	8002590 <HAL_I2C_GetState>
 8000a30:	4603      	mov	r3, r0
 8000a32:	71bb      	strb	r3, [r7, #6]

	if (i2c_state == HAL_I2C_STATE_RESET) {
 8000a34:	79bb      	ldrb	r3, [r7, #6]
 8000a36:	2b00      	cmp	r3, #0
 8000a38:	d127      	bne.n	8000a8a <adlx345_I2C_init+0x6a>
		/* I2C configuration*/
		hi2c1.Instance 				= I2C1;
 8000a3a:	4b19      	ldr	r3, [pc, #100]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a3c:	4a19      	ldr	r2, [pc, #100]	; (8000aa4 <adlx345_I2C_init+0x84>)
 8000a3e:	601a      	str	r2, [r3, #0]
		hi2c1.Init.ClockSpeed 		= CLOCK_SPEED;
 8000a40:	4b17      	ldr	r3, [pc, #92]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a42:	4a19      	ldr	r2, [pc, #100]	; (8000aa8 <adlx345_I2C_init+0x88>)
 8000a44:	605a      	str	r2, [r3, #4]
		hi2c1.Init.DutyCycle 		= I2C_DUTYCYCLE_2;
 8000a46:	4b16      	ldr	r3, [pc, #88]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
		hi2c1.Init.AddressingMode 	= I2C_ADDRESSINGMODE_7BIT;
 8000a4c:	4b14      	ldr	r3, [pc, #80]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a4e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000a52:	611a      	str	r2, [r3, #16]
		hi2c1.Init.DualAddressMode 	= I2C_DUALADDRESS_DISABLE;
 8000a54:	4b12      	ldr	r3, [pc, #72]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a56:	2200      	movs	r2, #0
 8000a58:	615a      	str	r2, [r3, #20]
		hi2c1.Init.GeneralCallMode 	= I2C_GENERALCALL_DISABLE;
 8000a5a:	4b11      	ldr	r3, [pc, #68]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a5c:	2200      	movs	r2, #0
 8000a5e:	61da      	str	r2, [r3, #28]
		hi2c1.Init.NoStretchMode 	= I2C_NOSTRETCH_DISABLE;
 8000a60:	4b0f      	ldr	r3, [pc, #60]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a62:	2200      	movs	r2, #0
 8000a64:	621a      	str	r2, [r3, #32]

		HAL_I2C_MspInit(&hi2c1);
 8000a66:	480e      	ldr	r0, [pc, #56]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a68:	f000 f820 	bl	8000aac <HAL_I2C_MspInit>

		// Init I2C and read static device ID to check communication
		if ((HAL_I2C_Init(&hi2c1) == HAL_OK) && (read_register(REG_DEVID) == REGISTER_DEVID)) {
 8000a6c:	480c      	ldr	r0, [pc, #48]	; (8000aa0 <adlx345_I2C_init+0x80>)
 8000a6e:	f001 f927 	bl	8001cc0 <HAL_I2C_Init>
 8000a72:	4603      	mov	r3, r0
 8000a74:	2b00      	cmp	r3, #0
 8000a76:	d10d      	bne.n	8000a94 <adlx345_I2C_init+0x74>
 8000a78:	2000      	movs	r0, #0
 8000a7a:	f000 f8e5 	bl	8000c48 <read_register>
 8000a7e:	4603      	mov	r3, r0
 8000a80:	2be5      	cmp	r3, #229	; 0xe5
 8000a82:	d107      	bne.n	8000a94 <adlx345_I2C_init+0x74>
			return_value = true;
 8000a84:	2301      	movs	r3, #1
 8000a86:	71fb      	strb	r3, [r7, #7]
 8000a88:	e004      	b.n	8000a94 <adlx345_I2C_init+0x74>
		}
	} else if (i2c_state != HAL_I2C_STATE_ERROR) {
 8000a8a:	79bb      	ldrb	r3, [r7, #6]
 8000a8c:	2be0      	cmp	r3, #224	; 0xe0
 8000a8e:	d001      	beq.n	8000a94 <adlx345_I2C_init+0x74>
		// Not an STATE_ERROR or STATE_RESET,so initialization was already done
		return_value = true;
 8000a90:	2301      	movs	r3, #1
 8000a92:	71fb      	strb	r3, [r7, #7]
	}

	return return_value;
 8000a94:	79fb      	ldrb	r3, [r7, #7]
}
 8000a96:	4618      	mov	r0, r3
 8000a98:	3708      	adds	r7, #8
 8000a9a:	46bd      	mov	sp, r7
 8000a9c:	bd80      	pop	{r7, pc}
 8000a9e:	bf00      	nop
 8000aa0:	20000158 	.word	0x20000158
 8000aa4:	40005400 	.word	0x40005400
 8000aa8:	000186a0 	.word	0x000186a0

08000aac <HAL_I2C_MspInit>:


void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c1) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b08a      	sub	sp, #40	; 0x28
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef GPIO_InitStruct;

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab4:	2300      	movs	r3, #0
 8000ab6:	613b      	str	r3, [r7, #16]
 8000ab8:	4b17      	ldr	r3, [pc, #92]	; (8000b18 <HAL_I2C_MspInit+0x6c>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a16      	ldr	r2, [pc, #88]	; (8000b18 <HAL_I2C_MspInit+0x6c>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b14      	ldr	r3, [pc, #80]	; (8000b18 <HAL_I2C_MspInit+0x6c>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	613b      	str	r3, [r7, #16]
 8000ace:	693b      	ldr	r3, [r7, #16]

	/* I2C GPIO configuration */
	GPIO_InitStruct.Pin 		= GPIO_PIN_8|GPIO_PIN_9;
 8000ad0:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000ad4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_OD;
 8000ad6:	2312      	movs	r3, #18
 8000ad8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 		= GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8000ade:	2300      	movs	r3, #0
 8000ae0:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate 	= GPIO_AF4_I2C1;
 8000ae2:	2304      	movs	r3, #4
 8000ae4:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 0314 	add.w	r3, r7, #20
 8000aea:	4619      	mov	r1, r3
 8000aec:	480b      	ldr	r0, [pc, #44]	; (8000b1c <HAL_I2C_MspInit+0x70>)
 8000aee:	f000 ff09 	bl	8001904 <HAL_GPIO_Init>

	 /* Peripheral clock enable */
	__HAL_RCC_I2C1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	60fb      	str	r3, [r7, #12]
 8000af6:	4b08      	ldr	r3, [pc, #32]	; (8000b18 <HAL_I2C_MspInit+0x6c>)
 8000af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000afa:	4a07      	ldr	r2, [pc, #28]	; (8000b18 <HAL_I2C_MspInit+0x6c>)
 8000afc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b00:	6413      	str	r3, [r2, #64]	; 0x40
 8000b02:	4b05      	ldr	r3, [pc, #20]	; (8000b18 <HAL_I2C_MspInit+0x6c>)
 8000b04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b0a:	60fb      	str	r3, [r7, #12]
 8000b0c:	68fb      	ldr	r3, [r7, #12]
}
 8000b0e:	bf00      	nop
 8000b10:	3728      	adds	r7, #40	; 0x28
 8000b12:	46bd      	mov	sp, r7
 8000b14:	bd80      	pop	{r7, pc}
 8000b16:	bf00      	nop
 8000b18:	40023800 	.word	0x40023800
 8000b1c:	40020400 	.word	0x40020400

08000b20 <adxl345_read_coordinates>:


coordinates_t adxl345_read_coordinates() {
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b088      	sub	sp, #32
 8000b24:	af02      	add	r7, sp, #8
 8000b26:	6078      	str	r0, [r7, #4]
	uint8_t reg_data_coord = REG_DATAX0;
 8000b28:	2332      	movs	r3, #50	; 0x32
 8000b2a:	757b      	strb	r3, [r7, #21]
	coordinates_t coord;
	uint16_t coord_size = sizeof(coord)/ sizeof(uint8_t);
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	82fb      	strh	r3, [r7, #22]

	HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, &reg_data_coord, sizeof(reg_data_coord), 1000);
 8000b30:	f107 0215 	add.w	r2, r7, #21
 8000b34:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	21a6      	movs	r1, #166	; 0xa6
 8000b3e:	480c      	ldr	r0, [pc, #48]	; (8000b70 <adxl345_read_coordinates+0x50>)
 8000b40:	f001 fa02 	bl	8001f48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ADXL345_ADDRESS<<1, (uint8_t *) &coord, coord_size, 10000);
 8000b44:	8afb      	ldrh	r3, [r7, #22]
 8000b46:	f107 020c 	add.w	r2, r7, #12
 8000b4a:	f242 7110 	movw	r1, #10000	; 0x2710
 8000b4e:	9100      	str	r1, [sp, #0]
 8000b50:	21a6      	movs	r1, #166	; 0xa6
 8000b52:	4807      	ldr	r0, [pc, #28]	; (8000b70 <adxl345_read_coordinates+0x50>)
 8000b54:	f001 faf6 	bl	8002144 <HAL_I2C_Master_Receive>

	return coord;
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	6818      	ldr	r0, [r3, #0]
 8000b62:	6010      	str	r0, [r2, #0]
 8000b64:	889b      	ldrh	r3, [r3, #4]
 8000b66:	8093      	strh	r3, [r2, #4]
}
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	3718      	adds	r7, #24
 8000b6c:	46bd      	mov	sp, r7
 8000b6e:	bd80      	pop	{r7, pc}
 8000b70:	20000158 	.word	0x20000158

08000b74 <adxl345_get_I2C_state>:


HAL_I2C_StateTypeDef adxl345_get_I2C_state() {
 8000b74:	b580      	push	{r7, lr}
 8000b76:	af00      	add	r7, sp, #0
	return HAL_I2C_GetState(&hi2c1);
 8000b78:	4802      	ldr	r0, [pc, #8]	; (8000b84 <adxl345_get_I2C_state+0x10>)
 8000b7a:	f001 fd09 	bl	8002590 <HAL_I2C_GetState>
 8000b7e:	4603      	mov	r3, r0
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	bd80      	pop	{r7, pc}
 8000b84:	20000158 	.word	0x20000158

08000b88 <adxl345_is_data_ready>:

bool_t adxl345_is_data_ready() {
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b084      	sub	sp, #16
 8000b8c:	af02      	add	r7, sp, #8
	uint8_t reg = REG_INT_SOURCE;
 8000b8e:	2330      	movs	r3, #48	; 0x30
 8000b90:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, &reg, sizeof(reg), 10000);
 8000b92:	1dfa      	adds	r2, r7, #7
 8000b94:	f242 7310 	movw	r3, #10000	; 0x2710
 8000b98:	9300      	str	r3, [sp, #0]
 8000b9a:	2301      	movs	r3, #1
 8000b9c:	21a6      	movs	r1, #166	; 0xa6
 8000b9e:	480b      	ldr	r0, [pc, #44]	; (8000bcc <adxl345_is_data_ready+0x44>)
 8000ba0:	f001 f9d2 	bl	8001f48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ADXL345_ADDRESS<<1, &value, sizeof(value), 10000);
 8000ba4:	1dba      	adds	r2, r7, #6
 8000ba6:	f242 7310 	movw	r3, #10000	; 0x2710
 8000baa:	9300      	str	r3, [sp, #0]
 8000bac:	2301      	movs	r3, #1
 8000bae:	21a6      	movs	r1, #166	; 0xa6
 8000bb0:	4806      	ldr	r0, [pc, #24]	; (8000bcc <adxl345_is_data_ready+0x44>)
 8000bb2:	f001 fac7 	bl	8002144 <HAL_I2C_Master_Receive>

	if (value&MASK_DATA_READY) {
 8000bb6:	79bb      	ldrb	r3, [r7, #6]
 8000bb8:	b25b      	sxtb	r3, r3
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	da01      	bge.n	8000bc2 <adxl345_is_data_ready+0x3a>
		return true;
 8000bbe:	2301      	movs	r3, #1
 8000bc0:	e000      	b.n	8000bc4 <adxl345_is_data_ready+0x3c>
	} else {
		return false;
 8000bc2:	2300      	movs	r3, #0
	}
}
 8000bc4:	4618      	mov	r0, r3
 8000bc6:	3708      	adds	r7, #8
 8000bc8:	46bd      	mov	sp, r7
 8000bca:	bd80      	pop	{r7, pc}
 8000bcc:	20000158 	.word	0x20000158

08000bd0 <adxl345_set_sensitivity>:

void adxl345_set_sensitivity(adxl345_sensitivity_t sensitivity) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	4603      	mov	r3, r0
 8000bd8:	71fb      	strb	r3, [r7, #7]
	uint8_t reg_sensitivity = sensitivity;
 8000bda:	79fb      	ldrb	r3, [r7, #7]
 8000bdc:	73fb      	strb	r3, [r7, #15]

	if (sensitivity > RESOLUTION_16G) {
 8000bde:	79fb      	ldrb	r3, [r7, #7]
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d805      	bhi.n	8000bf0 <adxl345_set_sensitivity+0x20>
		return;
	}

	write_register(REG_DATA_FORMAT, reg_sensitivity);
 8000be4:	7bfb      	ldrb	r3, [r7, #15]
 8000be6:	4619      	mov	r1, r3
 8000be8:	2031      	movs	r0, #49	; 0x31
 8000bea:	f000 f84d 	bl	8000c88 <write_register>
 8000bee:	e000      	b.n	8000bf2 <adxl345_set_sensitivity+0x22>
		return;
 8000bf0:	bf00      	nop
}
 8000bf2:	3710      	adds	r7, #16
 8000bf4:	46bd      	mov	sp, r7
 8000bf6:	bd80      	pop	{r7, pc}

08000bf8 <adxl345_set_bandwidth_rate>:
#define DEFINE_ADXL345_REGISTER_FUNCTION(name, reg) \
    void adxl345_set_##name(uint8_t value) { \
        write_register(reg, value); \
    }

DEFINE_ADXL345_REGISTER_FUNCTION(bandwidth_rate, REG_BW_RATE)
 8000bf8:	b580      	push	{r7, lr}
 8000bfa:	b082      	sub	sp, #8
 8000bfc:	af00      	add	r7, sp, #0
 8000bfe:	4603      	mov	r3, r0
 8000c00:	71fb      	strb	r3, [r7, #7]
 8000c02:	79fb      	ldrb	r3, [r7, #7]
 8000c04:	4619      	mov	r1, r3
 8000c06:	202c      	movs	r0, #44	; 0x2c
 8000c08:	f000 f83e 	bl	8000c88 <write_register>
 8000c0c:	3708      	adds	r7, #8
 8000c0e:	46bd      	mov	sp, r7
 8000c10:	bd80      	pop	{r7, pc}

08000c12 <adxl345_set_power_control>:
DEFINE_ADXL345_REGISTER_FUNCTION(power_control, REG_POWER_CTL)
 8000c12:	b580      	push	{r7, lr}
 8000c14:	b082      	sub	sp, #8
 8000c16:	af00      	add	r7, sp, #0
 8000c18:	4603      	mov	r3, r0
 8000c1a:	71fb      	strb	r3, [r7, #7]
 8000c1c:	79fb      	ldrb	r3, [r7, #7]
 8000c1e:	4619      	mov	r1, r3
 8000c20:	202d      	movs	r0, #45	; 0x2d
 8000c22:	f000 f831 	bl	8000c88 <write_register>
 8000c26:	3708      	adds	r7, #8
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}

08000c2c <adxl345_set_data_format>:
DEFINE_ADXL345_REGISTER_FUNCTION(data_format, REG_DATA_FORMAT)
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b082      	sub	sp, #8
 8000c30:	af00      	add	r7, sp, #0
 8000c32:	4603      	mov	r3, r0
 8000c34:	71fb      	strb	r3, [r7, #7]
 8000c36:	79fb      	ldrb	r3, [r7, #7]
 8000c38:	4619      	mov	r1, r3
 8000c3a:	2031      	movs	r0, #49	; 0x31
 8000c3c:	f000 f824 	bl	8000c88 <write_register>
 8000c40:	3708      	adds	r7, #8
 8000c42:	46bd      	mov	sp, r7
 8000c44:	bd80      	pop	{r7, pc}
	...

08000c48 <read_register>:
/**
 * @brief   Reads the value from the specified register of the ADXL345 accelerometer.
 * @param   reg: The register address to read from.
 * @retval  The value read from the specified register.
 */
static uint8_t read_register(uint8_t reg) {
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b086      	sub	sp, #24
 8000c4c:	af02      	add	r7, sp, #8
 8000c4e:	4603      	mov	r3, r0
 8000c50:	71fb      	strb	r3, [r7, #7]
	uint8_t value;

	HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, &reg, sizeof(reg), 10000);
 8000c52:	1dfa      	adds	r2, r7, #7
 8000c54:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c58:	9300      	str	r3, [sp, #0]
 8000c5a:	2301      	movs	r3, #1
 8000c5c:	21a6      	movs	r1, #166	; 0xa6
 8000c5e:	4809      	ldr	r0, [pc, #36]	; (8000c84 <read_register+0x3c>)
 8000c60:	f001 f972 	bl	8001f48 <HAL_I2C_Master_Transmit>
	HAL_I2C_Master_Receive(&hi2c1, ADXL345_ADDRESS<<1, &value, sizeof(value), 10000);
 8000c64:	f107 020f 	add.w	r2, r7, #15
 8000c68:	f242 7310 	movw	r3, #10000	; 0x2710
 8000c6c:	9300      	str	r3, [sp, #0]
 8000c6e:	2301      	movs	r3, #1
 8000c70:	21a6      	movs	r1, #166	; 0xa6
 8000c72:	4804      	ldr	r0, [pc, #16]	; (8000c84 <read_register+0x3c>)
 8000c74:	f001 fa66 	bl	8002144 <HAL_I2C_Master_Receive>

	return value;
 8000c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20000158 	.word	0x20000158

08000c88 <write_register>:
 * @brief   Writes a value to the specified register of the ADXL345 accelerometer.
 * @param   reg: The register address to write to.
 * @param   value: The value to write to the register.
 * @retval  None.
 */
static void write_register(uint8_t reg, uint8_t value) {
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b086      	sub	sp, #24
 8000c8c:	af02      	add	r7, sp, #8
 8000c8e:	4603      	mov	r3, r0
 8000c90:	460a      	mov	r2, r1
 8000c92:	71fb      	strb	r3, [r7, #7]
 8000c94:	4613      	mov	r3, r2
 8000c96:	71bb      	strb	r3, [r7, #6]
	 uint8_t buf[] = {reg, value};
 8000c98:	79fb      	ldrb	r3, [r7, #7]
 8000c9a:	733b      	strb	r3, [r7, #12]
 8000c9c:	79bb      	ldrb	r3, [r7, #6]
 8000c9e:	737b      	strb	r3, [r7, #13]
	 uint16_t size = sizeof(buf) / sizeof(uint8_t);
 8000ca0:	2302      	movs	r3, #2
 8000ca2:	81fb      	strh	r3, [r7, #14]

	 HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, buf, size, 10000);
 8000ca4:	89fb      	ldrh	r3, [r7, #14]
 8000ca6:	f107 020c 	add.w	r2, r7, #12
 8000caa:	f242 7110 	movw	r1, #10000	; 0x2710
 8000cae:	9100      	str	r1, [sp, #0]
 8000cb0:	21a6      	movs	r1, #166	; 0xa6
 8000cb2:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <write_register+0x38>)
 8000cb4:	f001 f948 	bl	8001f48 <HAL_I2C_Master_Transmit>
}
 8000cb8:	bf00      	nop
 8000cba:	3710      	adds	r7, #16
 8000cbc:	46bd      	mov	sp, r7
 8000cbe:	bd80      	pop	{r7, pc}
 8000cc0:	20000158 	.word	0x20000158

08000cc4 <max7219_SPI_init>:

/* Private function prototypes -----------------------------------------------*/
static void max7219_send_data(uint8_t reg, uint8_t data, uint8_t display_num);

/* Public functions ---------------------------------------------------------*/
bool_t max7219_SPI_init() {
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	b082      	sub	sp, #8
 8000cc8:	af00      	add	r7, sp, #0
	bool_t return_value = false;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_StateTypeDef spi_state = HAL_SPI_GetState(&hspi1);
 8000cce:	4824      	ldr	r0, [pc, #144]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000cd0:	f002 fecb 	bl	8003a6a <HAL_SPI_GetState>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	71bb      	strb	r3, [r7, #6]

	if(spi_state == HAL_SPI_STATE_RESET) {
 8000cd8:	79bb      	ldrb	r3, [r7, #6]
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d135      	bne.n	8000d4a <max7219_SPI_init+0x86>
		/* SPI configuration*/
		hspi1.Instance 					= SPI1;
 8000cde:	4b20      	ldr	r3, [pc, #128]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000ce0:	4a20      	ldr	r2, [pc, #128]	; (8000d64 <max7219_SPI_init+0xa0>)
 8000ce2:	601a      	str	r2, [r3, #0]
		hspi1.Init.Mode 				= SPI_MODE_MASTER;
 8000ce4:	4b1e      	ldr	r3, [pc, #120]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000ce6:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cea:	605a      	str	r2, [r3, #4]
		hspi1.Init.Direction			= SPI_DIRECTION_1LINE;
 8000cec:	4b1c      	ldr	r3, [pc, #112]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000cee:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000cf2:	609a      	str	r2, [r3, #8]
		hspi1.Init.DataSize				= SPI_DATASIZE_16BIT;
 8000cf4:	4b1a      	ldr	r3, [pc, #104]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000cf6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000cfa:	60da      	str	r2, [r3, #12]
		hspi1.Init.CLKPolarity			= SPI_POLARITY_LOW;
 8000cfc:	4b18      	ldr	r3, [pc, #96]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	611a      	str	r2, [r3, #16]
		hspi1.Init.CLKPhase				= SPI_PHASE_1EDGE;
 8000d02:	4b17      	ldr	r3, [pc, #92]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	615a      	str	r2, [r3, #20]
		hspi1.Init.NSS 					= SPI_NSS_SOFT;
 8000d08:	4b15      	ldr	r3, [pc, #84]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000d0a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d0e:	619a      	str	r2, [r3, #24]
		hspi1.Init.BaudRatePrescaler 	= SPI_BAUDRATEPRESCALER_128;
 8000d10:	4b13      	ldr	r3, [pc, #76]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000d12:	2230      	movs	r2, #48	; 0x30
 8000d14:	61da      	str	r2, [r3, #28]
		hspi1.Init.FirstBit				= SPI_FIRSTBIT_MSB;
 8000d16:	4b12      	ldr	r3, [pc, #72]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000d18:	2200      	movs	r2, #0
 8000d1a:	621a      	str	r2, [r3, #32]
		hspi1.Init.TIMode				= SPI_TIMODE_DISABLE;
 8000d1c:	4b10      	ldr	r3, [pc, #64]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000d1e:	2200      	movs	r2, #0
 8000d20:	625a      	str	r2, [r3, #36]	; 0x24
		hspi1.Init.CRCCalculation 		= SPI_CRCCALCULATION_DISABLE;
 8000d22:	4b0f      	ldr	r3, [pc, #60]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	629a      	str	r2, [r3, #40]	; 0x28

		HAL_SPI_MspInit(&hspi1);
 8000d28:	480d      	ldr	r0, [pc, #52]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000d2a:	f000 f81f 	bl	8000d6c <HAL_SPI_MspInit>
		if (HAL_SPI_Init(&hspi1) == HAL_OK) {
 8000d2e:	480c      	ldr	r0, [pc, #48]	; (8000d60 <max7219_SPI_init+0x9c>)
 8000d30:	f002 fcac 	bl	800368c <HAL_SPI_Init>
 8000d34:	4603      	mov	r3, r0
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d101      	bne.n	8000d3e <max7219_SPI_init+0x7a>
			return_value = true;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	71fb      	strb	r3, [r7, #7]
		}

		// Release Chip Select pin
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8000d3e:	2201      	movs	r2, #1
 8000d40:	2110      	movs	r1, #16
 8000d42:	4809      	ldr	r0, [pc, #36]	; (8000d68 <max7219_SPI_init+0xa4>)
 8000d44:	f000 ffa2 	bl	8001c8c <HAL_GPIO_WritePin>
 8000d48:	e004      	b.n	8000d54 <max7219_SPI_init+0x90>
	} else if (spi_state != HAL_SPI_STATE_ERROR) {
 8000d4a:	79bb      	ldrb	r3, [r7, #6]
 8000d4c:	2b06      	cmp	r3, #6
 8000d4e:	d001      	beq.n	8000d54 <max7219_SPI_init+0x90>
		// Not an STATE_ERROR or STATE_RESET,so initialization was already done
		return_value = true;
 8000d50:	2301      	movs	r3, #1
 8000d52:	71fb      	strb	r3, [r7, #7]
	}
	return return_value;
 8000d54:	79fb      	ldrb	r3, [r7, #7]
}
 8000d56:	4618      	mov	r0, r3
 8000d58:	3708      	adds	r7, #8
 8000d5a:	46bd      	mov	sp, r7
 8000d5c:	bd80      	pop	{r7, pc}
 8000d5e:	bf00      	nop
 8000d60:	200001ac 	.word	0x200001ac
 8000d64:	40013000 	.word	0x40013000
 8000d68:	40020000 	.word	0x40020000

08000d6c <HAL_SPI_MspInit>:


void HAL_SPI_MspInit(SPI_HandleTypeDef *hspi) {
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
	GPIO_InitTypeDef  GPIO_InitStruct;

  	/*** Configure the GPIOs ***/
  	/* Enable GPIO clock */
	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8000d74:	2300      	movs	r3, #0
 8000d76:	613b      	str	r3, [r7, #16]
 8000d78:	4b24      	ldr	r3, [pc, #144]	; (8000e0c <HAL_SPI_MspInit+0xa0>)
 8000d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7c:	4a23      	ldr	r2, [pc, #140]	; (8000e0c <HAL_SPI_MspInit+0xa0>)
 8000d7e:	f043 0301 	orr.w	r3, r3, #1
 8000d82:	6313      	str	r3, [r2, #48]	; 0x30
 8000d84:	4b21      	ldr	r3, [pc, #132]	; (8000e0c <HAL_SPI_MspInit+0xa0>)
 8000d86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d88:	f003 0301 	and.w	r3, r3, #1
 8000d8c:	613b      	str	r3, [r7, #16]
 8000d8e:	693b      	ldr	r3, [r7, #16]

	/* Configure SPI SCK */
	GPIO_InitStruct.Pin 		= GPIO_PIN_5;
 8000d90:	2320      	movs	r3, #32
 8000d92:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull  		= GPIO_PULLDOWN;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_HIGH;
 8000d9c:	2303      	movs	r3, #3
 8000d9e:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 8000da0:	2305      	movs	r3, #5
 8000da2:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4819      	ldr	r0, [pc, #100]	; (8000e10 <HAL_SPI_MspInit+0xa4>)
 8000dac:	f000 fdaa 	bl	8001904 <HAL_GPIO_Init>

	/* Configure SPI MOSI */
	GPIO_InitStruct.Pin 		= GPIO_PIN_7;
 8000db0:	2380      	movs	r3, #128	; 0x80
 8000db2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_AF_PP;
 8000db4:	2302      	movs	r3, #2
 8000db6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
	GPIO_InitStruct.Alternate 	= GPIO_AF5_SPI1;
 8000dbc:	2305      	movs	r3, #5
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	4812      	ldr	r0, [pc, #72]	; (8000e10 <HAL_SPI_MspInit+0xa4>)
 8000dc8:	f000 fd9c 	bl	8001904 <HAL_GPIO_Init>

	/*Configure SPI CS */
	GPIO_InitStruct.Pin 		= GPIO_PIN_4;
 8000dcc:	2310      	movs	r3, #16
 8000dce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode 		= GPIO_MODE_OUTPUT_PP;
 8000dd0:	2301      	movs	r3, #1
 8000dd2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull 		= GPIO_PULLUP;
 8000dd4:	2301      	movs	r3, #1
 8000dd6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed 		= GPIO_SPEED_FREQ_LOW;
 8000dd8:	2300      	movs	r3, #0
 8000dda:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ddc:	f107 0314 	add.w	r3, r7, #20
 8000de0:	4619      	mov	r1, r3
 8000de2:	480b      	ldr	r0, [pc, #44]	; (8000e10 <HAL_SPI_MspInit+0xa4>)
 8000de4:	f000 fd8e 	bl	8001904 <HAL_GPIO_Init>

	/*** Configure the SPI peripheral ***/
	/* Enable SPI clock */
	/* Peripheral clock enable */
	__HAL_RCC_SPI1_CLK_ENABLE();
 8000de8:	2300      	movs	r3, #0
 8000dea:	60fb      	str	r3, [r7, #12]
 8000dec:	4b07      	ldr	r3, [pc, #28]	; (8000e0c <HAL_SPI_MspInit+0xa0>)
 8000dee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000df0:	4a06      	ldr	r2, [pc, #24]	; (8000e0c <HAL_SPI_MspInit+0xa0>)
 8000df2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000df6:	6453      	str	r3, [r2, #68]	; 0x44
 8000df8:	4b04      	ldr	r3, [pc, #16]	; (8000e0c <HAL_SPI_MspInit+0xa0>)
 8000dfa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dfc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e00:	60fb      	str	r3, [r7, #12]
 8000e02:	68fb      	ldr	r3, [r7, #12]
}
 8000e04:	bf00      	nop
 8000e06:	3728      	adds	r7, #40	; 0x28
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	bd80      	pop	{r7, pc}
 8000e0c:	40023800 	.word	0x40023800
 8000e10:	40020000 	.word	0x40020000

08000e14 <max7219_clean_all_displays>:
	max7219_send_data(REG_DIGIT_6, 0x00, display_num);
	max7219_send_data(REG_DIGIT_7, 0x00, display_num);
}


void max7219_clean_all_displays() {
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < MAX_DISPLAYS; i++) {
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	71fb      	strb	r3, [r7, #7]
 8000e1e:	e032      	b.n	8000e86 <max7219_clean_all_displays+0x72>
		max7219_send_data(REG_DIGIT_0, 0x00, i);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	461a      	mov	r2, r3
 8000e24:	2100      	movs	r1, #0
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 f8b4 	bl	8000f94 <max7219_send_data>
		max7219_send_data(REG_DIGIT_1, 0x00, i);
 8000e2c:	79fb      	ldrb	r3, [r7, #7]
 8000e2e:	461a      	mov	r2, r3
 8000e30:	2100      	movs	r1, #0
 8000e32:	2002      	movs	r0, #2
 8000e34:	f000 f8ae 	bl	8000f94 <max7219_send_data>
		max7219_send_data(REG_DIGIT_2, 0x00, i);
 8000e38:	79fb      	ldrb	r3, [r7, #7]
 8000e3a:	461a      	mov	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	2003      	movs	r0, #3
 8000e40:	f000 f8a8 	bl	8000f94 <max7219_send_data>
		max7219_send_data(REG_DIGIT_3, 0x00, i);
 8000e44:	79fb      	ldrb	r3, [r7, #7]
 8000e46:	461a      	mov	r2, r3
 8000e48:	2100      	movs	r1, #0
 8000e4a:	2004      	movs	r0, #4
 8000e4c:	f000 f8a2 	bl	8000f94 <max7219_send_data>
		max7219_send_data(REG_DIGIT_4, 0x00, i);
 8000e50:	79fb      	ldrb	r3, [r7, #7]
 8000e52:	461a      	mov	r2, r3
 8000e54:	2100      	movs	r1, #0
 8000e56:	2005      	movs	r0, #5
 8000e58:	f000 f89c 	bl	8000f94 <max7219_send_data>
		max7219_send_data(REG_DIGIT_5, 0x00, i);
 8000e5c:	79fb      	ldrb	r3, [r7, #7]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	2100      	movs	r1, #0
 8000e62:	2006      	movs	r0, #6
 8000e64:	f000 f896 	bl	8000f94 <max7219_send_data>
		max7219_send_data(REG_DIGIT_6, 0x00, i);
 8000e68:	79fb      	ldrb	r3, [r7, #7]
 8000e6a:	461a      	mov	r2, r3
 8000e6c:	2100      	movs	r1, #0
 8000e6e:	2007      	movs	r0, #7
 8000e70:	f000 f890 	bl	8000f94 <max7219_send_data>
		max7219_send_data(REG_DIGIT_7, 0x00, i);
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	461a      	mov	r2, r3
 8000e78:	2100      	movs	r1, #0
 8000e7a:	2008      	movs	r0, #8
 8000e7c:	f000 f88a 	bl	8000f94 <max7219_send_data>
	for (uint8_t i = 0; i < MAX_DISPLAYS; i++) {
 8000e80:	79fb      	ldrb	r3, [r7, #7]
 8000e82:	3301      	adds	r3, #1
 8000e84:	71fb      	strb	r3, [r7, #7]
 8000e86:	79fb      	ldrb	r3, [r7, #7]
 8000e88:	2b03      	cmp	r3, #3
 8000e8a:	d9c9      	bls.n	8000e20 <max7219_clean_all_displays+0xc>
	}
}
 8000e8c:	bf00      	nop
 8000e8e:	bf00      	nop
 8000e90:	3708      	adds	r7, #8
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <max7219_turn_on_LEDs>:


void max7219_turn_on_LEDs(uint8_t reg, uint8_t data, uint8_t display_num) {
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b082      	sub	sp, #8
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	71fb      	strb	r3, [r7, #7]
 8000ea0:	460b      	mov	r3, r1
 8000ea2:	71bb      	strb	r3, [r7, #6]
 8000ea4:	4613      	mov	r3, r2
 8000ea6:	717b      	strb	r3, [r7, #5]
	if ((reg >= REG_DIGIT_0) && (reg <= REG_DIGIT_7)) {
 8000ea8:	79fb      	ldrb	r3, [r7, #7]
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d008      	beq.n	8000ec0 <max7219_turn_on_LEDs+0x2a>
 8000eae:	79fb      	ldrb	r3, [r7, #7]
 8000eb0:	2b08      	cmp	r3, #8
 8000eb2:	d805      	bhi.n	8000ec0 <max7219_turn_on_LEDs+0x2a>
		max7219_send_data(reg, data, display_num);
 8000eb4:	797a      	ldrb	r2, [r7, #5]
 8000eb6:	79b9      	ldrb	r1, [r7, #6]
 8000eb8:	79fb      	ldrb	r3, [r7, #7]
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f000 f86a 	bl	8000f94 <max7219_send_data>
	}
}
 8000ec0:	bf00      	nop
 8000ec2:	3708      	adds	r7, #8
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <max7219_set_decode_mode>:
#define MAX7219_SET_REGISTER_FUNC(name,reg) \
void max7219_set_##name(uint8_t data, uint8_t display_num) { \
    max7219_send_data(reg, data, display_num); \
}

MAX7219_SET_REGISTER_FUNC(decode_mode, REG_DECODE_MODE)
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	b082      	sub	sp, #8
 8000ecc:	af00      	add	r7, sp, #0
 8000ece:	4603      	mov	r3, r0
 8000ed0:	460a      	mov	r2, r1
 8000ed2:	71fb      	strb	r3, [r7, #7]
 8000ed4:	4613      	mov	r3, r2
 8000ed6:	71bb      	strb	r3, [r7, #6]
 8000ed8:	79ba      	ldrb	r2, [r7, #6]
 8000eda:	79fb      	ldrb	r3, [r7, #7]
 8000edc:	4619      	mov	r1, r3
 8000ede:	2009      	movs	r0, #9
 8000ee0:	f000 f858 	bl	8000f94 <max7219_send_data>
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}

08000eea <max7219_set_intensity>:
MAX7219_SET_REGISTER_FUNC(intensity, REG_INTENSITY)
 8000eea:	b580      	push	{r7, lr}
 8000eec:	b082      	sub	sp, #8
 8000eee:	af00      	add	r7, sp, #0
 8000ef0:	4603      	mov	r3, r0
 8000ef2:	460a      	mov	r2, r1
 8000ef4:	71fb      	strb	r3, [r7, #7]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	71bb      	strb	r3, [r7, #6]
 8000efa:	79ba      	ldrb	r2, [r7, #6]
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4619      	mov	r1, r3
 8000f00:	200a      	movs	r0, #10
 8000f02:	f000 f847 	bl	8000f94 <max7219_send_data>
 8000f06:	3708      	adds	r7, #8
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	bd80      	pop	{r7, pc}

08000f0c <max7219_set_scan_limit>:
MAX7219_SET_REGISTER_FUNC(scan_limit, REG_SCAN_LIMIT)
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	460a      	mov	r2, r1
 8000f16:	71fb      	strb	r3, [r7, #7]
 8000f18:	4613      	mov	r3, r2
 8000f1a:	71bb      	strb	r3, [r7, #6]
 8000f1c:	79ba      	ldrb	r2, [r7, #6]
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	4619      	mov	r1, r3
 8000f22:	200b      	movs	r0, #11
 8000f24:	f000 f836 	bl	8000f94 <max7219_send_data>
 8000f28:	3708      	adds	r7, #8
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	bd80      	pop	{r7, pc}

08000f2e <max7219_set_shutdown>:
MAX7219_SET_REGISTER_FUNC(shutdown, REG_SHUTDOWN)
 8000f2e:	b580      	push	{r7, lr}
 8000f30:	b082      	sub	sp, #8
 8000f32:	af00      	add	r7, sp, #0
 8000f34:	4603      	mov	r3, r0
 8000f36:	460a      	mov	r2, r1
 8000f38:	71fb      	strb	r3, [r7, #7]
 8000f3a:	4613      	mov	r3, r2
 8000f3c:	71bb      	strb	r3, [r7, #6]
 8000f3e:	79ba      	ldrb	r2, [r7, #6]
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	4619      	mov	r1, r3
 8000f44:	200c      	movs	r0, #12
 8000f46:	f000 f825 	bl	8000f94 <max7219_send_data>
 8000f4a:	3708      	adds	r7, #8
 8000f4c:	46bd      	mov	sp, r7
 8000f4e:	bd80      	pop	{r7, pc}

08000f50 <max7219_set_displays>:

void max7219_set_displays(uint8_t total_displays) {
 8000f50:	b480      	push	{r7}
 8000f52:	b083      	sub	sp, #12
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	4603      	mov	r3, r0
 8000f58:	71fb      	strb	r3, [r7, #7]
	if (total_displays > MAX_DISPLAYS) {
 8000f5a:	79fb      	ldrb	r3, [r7, #7]
 8000f5c:	2b04      	cmp	r3, #4
 8000f5e:	d903      	bls.n	8000f68 <max7219_set_displays+0x18>
		active_displays = MAX_DISPLAYS;
 8000f60:	4b06      	ldr	r3, [pc, #24]	; (8000f7c <max7219_set_displays+0x2c>)
 8000f62:	2204      	movs	r2, #4
 8000f64:	701a      	strb	r2, [r3, #0]
	} else {
		active_displays = total_displays;
	}
}
 8000f66:	e002      	b.n	8000f6e <max7219_set_displays+0x1e>
		active_displays = total_displays;
 8000f68:	4a04      	ldr	r2, [pc, #16]	; (8000f7c <max7219_set_displays+0x2c>)
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	7013      	strb	r3, [r2, #0]
}
 8000f6e:	bf00      	nop
 8000f70:	370c      	adds	r7, #12
 8000f72:	46bd      	mov	sp, r7
 8000f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f78:	4770      	bx	lr
 8000f7a:	bf00      	nop
 8000f7c:	2000008e 	.word	0x2000008e

08000f80 <max7219_get_SPI_state>:


/* ---------- Getters ---------- */
HAL_SPI_StateTypeDef max7219_get_SPI_state() {
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
	return HAL_SPI_GetState(&hspi1);
 8000f84:	4802      	ldr	r0, [pc, #8]	; (8000f90 <max7219_get_SPI_state+0x10>)
 8000f86:	f002 fd70 	bl	8003a6a <HAL_SPI_GetState>
 8000f8a:	4603      	mov	r3, r0
}
 8000f8c:	4618      	mov	r0, r3
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	200001ac 	.word	0x200001ac

08000f94 <max7219_send_data>:
  * @param reg: The register address to write to.
  * 			data: The data to write to the register.
  * 			display_num: The number of the display to write data to. First display corresponds to number 0
  * @retval None
  */
static void max7219_send_data(uint8_t reg, uint8_t data, uint8_t display_num) {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	71fb      	strb	r3, [r7, #7]
 8000f9e:	460b      	mov	r3, r1
 8000fa0:	71bb      	strb	r3, [r7, #6]
 8000fa2:	4613      	mov	r3, r2
 8000fa4:	717b      	strb	r3, [r7, #5]
	uint16_t buf = reg<<8 | data;
 8000fa6:	79fb      	ldrb	r3, [r7, #7]
 8000fa8:	021b      	lsls	r3, r3, #8
 8000faa:	b21a      	sxth	r2, r3
 8000fac:	79bb      	ldrb	r3, [r7, #6]
 8000fae:	b21b      	sxth	r3, r3
 8000fb0:	4313      	orrs	r3, r2
 8000fb2:	b21b      	sxth	r3, r3
 8000fb4:	b29b      	uxth	r3, r3
 8000fb6:	81bb      	strh	r3, [r7, #12]
	uint16_t no_op = 0;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	817b      	strh	r3, [r7, #10]

	if (display_num >= active_displays) {
 8000fbc:	4b21      	ldr	r3, [pc, #132]	; (8001044 <max7219_send_data+0xb0>)
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	797a      	ldrb	r2, [r7, #5]
 8000fc2:	429a      	cmp	r2, r3
 8000fc4:	d23a      	bcs.n	800103c <max7219_send_data+0xa8>
		return;
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2110      	movs	r1, #16
 8000fca:	481f      	ldr	r0, [pc, #124]	; (8001048 <max7219_send_data+0xb4>)
 8000fcc:	f000 fe5e 	bl	8001c8c <HAL_GPIO_WritePin>
	   The positioning of the no-op codes depends on the chip you want to communicate with, either
	   preceding or following the desired word.	For example, in a cascade of four MAX7219s, writing to the
	   third chip requires sending first one no-op code, then the desired word followed by two no-op codes.
	   When LOAD/CS transitions high, data is latched in all devices.
	*/
	for (uint8_t i = ((active_displays-1)-display_num); i > 0; i--) {
 8000fd0:	4b1c      	ldr	r3, [pc, #112]	; (8001044 <max7219_send_data+0xb0>)
 8000fd2:	781a      	ldrb	r2, [r3, #0]
 8000fd4:	797b      	ldrb	r3, [r7, #5]
 8000fd6:	1ad3      	subs	r3, r2, r3
 8000fd8:	b2db      	uxtb	r3, r3
 8000fda:	3b01      	subs	r3, #1
 8000fdc:	73fb      	strb	r3, [r7, #15]
 8000fde:	e00a      	b.n	8000ff6 <max7219_send_data+0x62>
	    HAL_SPI_Transmit(&hspi1, (uint8_t *)&no_op, 1, 1000);
 8000fe0:	f107 010a 	add.w	r1, r7, #10
 8000fe4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000fe8:	2201      	movs	r2, #1
 8000fea:	4818      	ldr	r0, [pc, #96]	; (800104c <max7219_send_data+0xb8>)
 8000fec:	f002 fbdf 	bl	80037ae <HAL_SPI_Transmit>
	for (uint8_t i = ((active_displays-1)-display_num); i > 0; i--) {
 8000ff0:	7bfb      	ldrb	r3, [r7, #15]
 8000ff2:	3b01      	subs	r3, #1
 8000ff4:	73fb      	strb	r3, [r7, #15]
 8000ff6:	7bfb      	ldrb	r3, [r7, #15]
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d1f1      	bne.n	8000fe0 <max7219_send_data+0x4c>
	}

	HAL_SPI_Transmit(&hspi1, (uint8_t *)&buf, 1, 1000);
 8000ffc:	f107 010c 	add.w	r1, r7, #12
 8001000:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001004:	2201      	movs	r2, #1
 8001006:	4811      	ldr	r0, [pc, #68]	; (800104c <max7219_send_data+0xb8>)
 8001008:	f002 fbd1 	bl	80037ae <HAL_SPI_Transmit>

	for (uint8_t i = 0; i < display_num; i++) {
 800100c:	2300      	movs	r3, #0
 800100e:	73bb      	strb	r3, [r7, #14]
 8001010:	e00a      	b.n	8001028 <max7219_send_data+0x94>
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&no_op, 1, 1000);
 8001012:	f107 010a 	add.w	r1, r7, #10
 8001016:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800101a:	2201      	movs	r2, #1
 800101c:	480b      	ldr	r0, [pc, #44]	; (800104c <max7219_send_data+0xb8>)
 800101e:	f002 fbc6 	bl	80037ae <HAL_SPI_Transmit>
	for (uint8_t i = 0; i < display_num; i++) {
 8001022:	7bbb      	ldrb	r3, [r7, #14]
 8001024:	3301      	adds	r3, #1
 8001026:	73bb      	strb	r3, [r7, #14]
 8001028:	7bba      	ldrb	r2, [r7, #14]
 800102a:	797b      	ldrb	r3, [r7, #5]
 800102c:	429a      	cmp	r2, r3
 800102e:	d3f0      	bcc.n	8001012 <max7219_send_data+0x7e>
	}

	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2110      	movs	r1, #16
 8001034:	4804      	ldr	r0, [pc, #16]	; (8001048 <max7219_send_data+0xb4>)
 8001036:	f000 fe29 	bl	8001c8c <HAL_GPIO_WritePin>
 800103a:	e000      	b.n	800103e <max7219_send_data+0xaa>
		return;
 800103c:	bf00      	nop
}
 800103e:	3710      	adds	r7, #16
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	2000008e 	.word	0x2000008e
 8001048:	40020000 	.word	0x40020000
 800104c:	200001ac 	.word	0x200001ac

08001050 <debounce_FSM_init>:
static bool_t button_pressed;
/* Private function prototypes -----------------------------------------------*/
static void FSM_error_handler(void);

/* Public functions ---------------------------------------------------------*/
void debounce_FSM_init(uint32_t time) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b082      	sub	sp, #8
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
	current_state = BUTTON_UP;
 8001058:	4b0d      	ldr	r3, [pc, #52]	; (8001090 <debounce_FSM_init+0x40>)
 800105a:	2200      	movs	r2, #0
 800105c:	701a      	strb	r2, [r3, #0]
	debounce_time = (time == 0) ? DEFAULT_DEBOUNCE_TIME : time;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d001      	beq.n	8001068 <debounce_FSM_init+0x18>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	e000      	b.n	800106a <debounce_FSM_init+0x1a>
 8001068:	2328      	movs	r3, #40	; 0x28
 800106a:	4a0a      	ldr	r2, [pc, #40]	; (8001094 <debounce_FSM_init+0x44>)
 800106c:	6013      	str	r3, [r2, #0]
	button_pressed = false;
 800106e:	4b0a      	ldr	r3, [pc, #40]	; (8001098 <debounce_FSM_init+0x48>)
 8001070:	2200      	movs	r2, #0
 8001072:	701a      	strb	r2, [r3, #0]

	BSP_PB_Init(BUTTON_USER, BUTTON_MODE_GPIO);
 8001074:	2100      	movs	r1, #0
 8001076:	2000      	movs	r0, #0
 8001078:	f000 f9c0 	bl	80013fc <BSP_PB_Init>
	delay_init(&debounce_timer, debounce_time);
 800107c:	4b05      	ldr	r3, [pc, #20]	; (8001094 <debounce_FSM_init+0x44>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	; (800109c <debounce_FSM_init+0x4c>)
 8001084:	f000 f893 	bl	80011ae <delay_init>
}
 8001088:	bf00      	nop
 800108a:	3708      	adds	r7, #8
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	20000204 	.word	0x20000204
 8001094:	20000208 	.word	0x20000208
 8001098:	20000218 	.word	0x20000218
 800109c:	2000020c 	.word	0x2000020c

080010a0 <debounce_FSM_update>:

void debounce_FSM_update() {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
	switch (current_state) {
 80010a4:	4b2e      	ldr	r3, [pc, #184]	; (8001160 <debounce_FSM_update+0xc0>)
 80010a6:	781b      	ldrb	r3, [r3, #0]
 80010a8:	2b03      	cmp	r3, #3
 80010aa:	d84d      	bhi.n	8001148 <debounce_FSM_update+0xa8>
 80010ac:	a201      	add	r2, pc, #4	; (adr r2, 80010b4 <debounce_FSM_update+0x14>)
 80010ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010b2:	bf00      	nop
 80010b4:	080010c5 	.word	0x080010c5
 80010b8:	080010d9 	.word	0x080010d9
 80010bc:	08001107 	.word	0x08001107
 80010c0:	0800111b 	.word	0x0800111b
		case BUTTON_UP:
			if(BSP_PB_GetState(BUTTON_USER)) {
 80010c4:	2000      	movs	r0, #0
 80010c6:	f000 f9ef 	bl	80014a8 <BSP_PB_GetState>
 80010ca:	4603      	mov	r3, r0
 80010cc:	2b00      	cmp	r3, #0
 80010ce:	d03e      	beq.n	800114e <debounce_FSM_update+0xae>
				current_state = BUTTON_FALLING;
 80010d0:	4b23      	ldr	r3, [pc, #140]	; (8001160 <debounce_FSM_update+0xc0>)
 80010d2:	2201      	movs	r2, #1
 80010d4:	701a      	strb	r2, [r3, #0]
			}
			break;
 80010d6:	e03a      	b.n	800114e <debounce_FSM_update+0xae>

		case BUTTON_FALLING:
			if (delay_read(&debounce_timer)) {
 80010d8:	4822      	ldr	r0, [pc, #136]	; (8001164 <debounce_FSM_update+0xc4>)
 80010da:	f000 f883 	bl	80011e4 <delay_read>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d036      	beq.n	8001152 <debounce_FSM_update+0xb2>
				if(BSP_PB_GetState(BUTTON_USER)) {
 80010e4:	2000      	movs	r0, #0
 80010e6:	f000 f9df 	bl	80014a8 <BSP_PB_GetState>
 80010ea:	4603      	mov	r3, r0
 80010ec:	2b00      	cmp	r3, #0
 80010ee:	d006      	beq.n	80010fe <debounce_FSM_update+0x5e>
					current_state = BUTTON_DOWN;
 80010f0:	4b1b      	ldr	r3, [pc, #108]	; (8001160 <debounce_FSM_update+0xc0>)
 80010f2:	2202      	movs	r2, #2
 80010f4:	701a      	strb	r2, [r3, #0]
					button_pressed = true;
 80010f6:	4b1c      	ldr	r3, [pc, #112]	; (8001168 <debounce_FSM_update+0xc8>)
 80010f8:	2201      	movs	r2, #1
 80010fa:	701a      	strb	r2, [r3, #0]
				} else {
					current_state = BUTTON_UP;
				}
			}
			break;
 80010fc:	e029      	b.n	8001152 <debounce_FSM_update+0xb2>
					current_state = BUTTON_UP;
 80010fe:	4b18      	ldr	r3, [pc, #96]	; (8001160 <debounce_FSM_update+0xc0>)
 8001100:	2200      	movs	r2, #0
 8001102:	701a      	strb	r2, [r3, #0]
			break;
 8001104:	e025      	b.n	8001152 <debounce_FSM_update+0xb2>

		case BUTTON_DOWN:
			if(!BSP_PB_GetState(BUTTON_USER)) {
 8001106:	2000      	movs	r0, #0
 8001108:	f000 f9ce 	bl	80014a8 <BSP_PB_GetState>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d121      	bne.n	8001156 <debounce_FSM_update+0xb6>
				current_state = BUTTON_RAISING;
 8001112:	4b13      	ldr	r3, [pc, #76]	; (8001160 <debounce_FSM_update+0xc0>)
 8001114:	2203      	movs	r2, #3
 8001116:	701a      	strb	r2, [r3, #0]
			}
			break;
 8001118:	e01d      	b.n	8001156 <debounce_FSM_update+0xb6>

		case BUTTON_RAISING:
			if (delay_read(&debounce_timer)) {
 800111a:	4812      	ldr	r0, [pc, #72]	; (8001164 <debounce_FSM_update+0xc4>)
 800111c:	f000 f862 	bl	80011e4 <delay_read>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d019      	beq.n	800115a <debounce_FSM_update+0xba>
				if(!BSP_PB_GetState(BUTTON_USER)) {
 8001126:	2000      	movs	r0, #0
 8001128:	f000 f9be 	bl	80014a8 <BSP_PB_GetState>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d106      	bne.n	8001140 <debounce_FSM_update+0xa0>
					current_state = BUTTON_UP;
 8001132:	4b0b      	ldr	r3, [pc, #44]	; (8001160 <debounce_FSM_update+0xc0>)
 8001134:	2200      	movs	r2, #0
 8001136:	701a      	strb	r2, [r3, #0]
					button_pressed = false;
 8001138:	4b0b      	ldr	r3, [pc, #44]	; (8001168 <debounce_FSM_update+0xc8>)
 800113a:	2200      	movs	r2, #0
 800113c:	701a      	strb	r2, [r3, #0]
				} else {
					current_state = BUTTON_DOWN;
				}
			}
			break;
 800113e:	e00c      	b.n	800115a <debounce_FSM_update+0xba>
					current_state = BUTTON_DOWN;
 8001140:	4b07      	ldr	r3, [pc, #28]	; (8001160 <debounce_FSM_update+0xc0>)
 8001142:	2202      	movs	r2, #2
 8001144:	701a      	strb	r2, [r3, #0]
			break;
 8001146:	e008      	b.n	800115a <debounce_FSM_update+0xba>

		default:
			FSM_error_handler();
 8001148:	f000 f828 	bl	800119c <FSM_error_handler>
			break;
 800114c:	e006      	b.n	800115c <debounce_FSM_update+0xbc>
			break;
 800114e:	bf00      	nop
 8001150:	e004      	b.n	800115c <debounce_FSM_update+0xbc>
			break;
 8001152:	bf00      	nop
 8001154:	e002      	b.n	800115c <debounce_FSM_update+0xbc>
			break;
 8001156:	bf00      	nop
 8001158:	e000      	b.n	800115c <debounce_FSM_update+0xbc>
			break;
 800115a:	bf00      	nop
	}
}
 800115c:	bf00      	nop
 800115e:	bd80      	pop	{r7, pc}
 8001160:	20000204 	.word	0x20000204
 8001164:	2000020c 	.word	0x2000020c
 8001168:	20000218 	.word	0x20000218

0800116c <read_button>:

bool_t read_button() {
 800116c:	b480      	push	{r7}
 800116e:	b083      	sub	sp, #12
 8001170:	af00      	add	r7, sp, #0
	bool_t return_value = false;
 8001172:	2300      	movs	r3, #0
 8001174:	71fb      	strb	r3, [r7, #7]

	if (button_pressed) {
 8001176:	4b08      	ldr	r3, [pc, #32]	; (8001198 <read_button+0x2c>)
 8001178:	781b      	ldrb	r3, [r3, #0]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <read_button+0x1c>
		button_pressed = false;
 800117e:	4b06      	ldr	r3, [pc, #24]	; (8001198 <read_button+0x2c>)
 8001180:	2200      	movs	r2, #0
 8001182:	701a      	strb	r2, [r3, #0]
		return_value = true;
 8001184:	2301      	movs	r3, #1
 8001186:	71fb      	strb	r3, [r7, #7]
	}

	return return_value;
 8001188:	79fb      	ldrb	r3, [r7, #7]
}
 800118a:	4618      	mov	r0, r3
 800118c:	370c      	adds	r7, #12
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	20000218 	.word	0x20000218

0800119c <FSM_error_handler>:
 * @brief  This function is executed in case of error occurrence.
 *
 * @param  None
 * @retval None
 */
static void FSM_error_handler(void) {
 800119c:	b580      	push	{r7, lr}
 800119e:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_Init(LED2);
 80011a0:	2001      	movs	r0, #1
 80011a2:	f000 f8c1 	bl	8001328 <BSP_LED_Init>
	BSP_LED_On(LED2);
 80011a6:	2001      	movs	r0, #1
 80011a8:	f000 f90e 	bl	80013c8 <BSP_LED_On>
	while (1)
 80011ac:	e7fe      	b.n	80011ac <FSM_error_handler+0x10>

080011ae <delay_init>:
#include "API_delay.h"

void delay_init(delay_t *delay, tick_t duration) {
 80011ae:	b480      	push	{r7}
 80011b0:	b083      	sub	sp, #12
 80011b2:	af00      	add	r7, sp, #0
 80011b4:	6078      	str	r0, [r7, #4]
 80011b6:	6039      	str	r1, [r7, #0]
	if ((delay == NULL) || (duration == 0))
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	2b00      	cmp	r3, #0
 80011bc:	d00c      	beq.n	80011d8 <delay_init+0x2a>
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	2b00      	cmp	r3, #0
 80011c2:	d009      	beq.n	80011d8 <delay_init+0x2a>
		return;

	delay->duration = duration;
 80011c4:	687b      	ldr	r3, [r7, #4]
 80011c6:	683a      	ldr	r2, [r7, #0]
 80011c8:	605a      	str	r2, [r3, #4]
	delay->running = false;
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	2200      	movs	r2, #0
 80011ce:	721a      	strb	r2, [r3, #8]
	delay->start_time = 0;
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	2200      	movs	r2, #0
 80011d4:	601a      	str	r2, [r3, #0]
 80011d6:	e000      	b.n	80011da <delay_init+0x2c>
		return;
 80011d8:	bf00      	nop
}
 80011da:	370c      	adds	r7, #12
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <delay_read>:


bool_t delay_read(delay_t *delay) {
 80011e4:	b580      	push	{r7, lr}
 80011e6:	b084      	sub	sp, #16
 80011e8:	af00      	add	r7, sp, #0
 80011ea:	6078      	str	r0, [r7, #4]
	uint32_t elapsed_time = 0;
 80011ec:	2300      	movs	r3, #0
 80011ee:	60bb      	str	r3, [r7, #8]
	bool_t return_value = false;
 80011f0:	2300      	movs	r3, #0
 80011f2:	73fb      	strb	r3, [r7, #15]

	if (delay == NULL)
 80011f4:	687b      	ldr	r3, [r7, #4]
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	d101      	bne.n	80011fe <delay_read+0x1a>
		return return_value;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
 80011fc:	e021      	b.n	8001242 <delay_read+0x5e>

	if (delay->running == false) {
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	7a1b      	ldrb	r3, [r3, #8]
 8001202:	f083 0301 	eor.w	r3, r3, #1
 8001206:	b2db      	uxtb	r3, r3
 8001208:	2b00      	cmp	r3, #0
 800120a:	d008      	beq.n	800121e <delay_read+0x3a>
		delay->start_time = HAL_GetTick();
 800120c:	f000 fa5c 	bl	80016c8 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	601a      	str	r2, [r3, #0]
		delay->running = true;
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	2201      	movs	r2, #1
 800121a:	721a      	strb	r2, [r3, #8]
 800121c:	e010      	b.n	8001240 <delay_read+0x5c>
	} else {
		elapsed_time = HAL_GetTick() - delay->start_time;
 800121e:	f000 fa53 	bl	80016c8 <HAL_GetTick>
 8001222:	4602      	mov	r2, r0
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	60bb      	str	r3, [r7, #8]
		if (elapsed_time >= delay->duration) {
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	68ba      	ldr	r2, [r7, #8]
 8001232:	429a      	cmp	r2, r3
 8001234:	d304      	bcc.n	8001240 <delay_read+0x5c>
			delay->running = false;
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	2200      	movs	r2, #0
 800123a:	721a      	strb	r2, [r3, #8]
			return_value = true;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
		}
	}

	return return_value;
 8001240:	7bfb      	ldrb	r3, [r7, #15]
}
 8001242:	4618      	mov	r0, r3
 8001244:	3710      	adds	r7, #16
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
	...

0800124c <uart_init>:
/* Private variables ---------------------------------------------------------*/
static UART_HandleTypeDef UartHandle;
static uint8_t msg_uart_init[] = MSG_UART_INIT;

/* Public functions ---------------------------------------------------------*/
bool_t uart_init() {
 800124c:	b580      	push	{r7, lr}
 800124e:	b082      	sub	sp, #8
 8001250:	af00      	add	r7, sp, #0
	bool_t return_value = false;
 8001252:	2300      	movs	r3, #0
 8001254:	71fb      	strb	r3, [r7, #7]
	HAL_UART_StateTypeDef uart_state = HAL_UART_GetState(&UartHandle);
 8001256:	481b      	ldr	r0, [pc, #108]	; (80012c4 <uart_init+0x78>)
 8001258:	f002 fdbf 	bl	8003dda <HAL_UART_GetState>
 800125c:	4603      	mov	r3, r0
 800125e:	71bb      	strb	r3, [r7, #6]

	if (uart_state == HAL_UART_STATE_RESET) {
 8001260:	79bb      	ldrb	r3, [r7, #6]
 8001262:	2b00      	cmp	r3, #0
 8001264:	d124      	bne.n	80012b0 <uart_init+0x64>
		// Init UART only if it was not initialized before
		UartHandle.Instance        		= USARTx;
 8001266:	4b17      	ldr	r3, [pc, #92]	; (80012c4 <uart_init+0x78>)
 8001268:	4a17      	ldr	r2, [pc, #92]	; (80012c8 <uart_init+0x7c>)
 800126a:	601a      	str	r2, [r3, #0]
		UartHandle.Init.BaudRate   		= BAUDRATE;
 800126c:	4b15      	ldr	r3, [pc, #84]	; (80012c4 <uart_init+0x78>)
 800126e:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001272:	605a      	str	r2, [r3, #4]
		UartHandle.Init.WordLength		= WORDLENGTH;
 8001274:	4b13      	ldr	r3, [pc, #76]	; (80012c4 <uart_init+0x78>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
		UartHandle.Init.StopBits   		= STOP_BITS;
 800127a:	4b12      	ldr	r3, [pc, #72]	; (80012c4 <uart_init+0x78>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
		UartHandle.Init.Parity     		= PARITY;
 8001280:	4b10      	ldr	r3, [pc, #64]	; (80012c4 <uart_init+0x78>)
 8001282:	2200      	movs	r2, #0
 8001284:	611a      	str	r2, [r3, #16]
		UartHandle.Init.HwFlowCtl  		= UART_HWCONTROL_NONE;
 8001286:	4b0f      	ldr	r3, [pc, #60]	; (80012c4 <uart_init+0x78>)
 8001288:	2200      	movs	r2, #0
 800128a:	619a      	str	r2, [r3, #24]
		UartHandle.Init.Mode       		= UART_MODE_TX_RX;
 800128c:	4b0d      	ldr	r3, [pc, #52]	; (80012c4 <uart_init+0x78>)
 800128e:	220c      	movs	r2, #12
 8001290:	615a      	str	r2, [r3, #20]
		UartHandle.Init.OverSampling 	= UART_OVERSAMPLING_16;
 8001292:	4b0c      	ldr	r3, [pc, #48]	; (80012c4 <uart_init+0x78>)
 8001294:	2200      	movs	r2, #0
 8001296:	61da      	str	r2, [r3, #28]

		if (HAL_UART_Init(&UartHandle) == HAL_OK) {
 8001298:	480a      	ldr	r0, [pc, #40]	; (80012c4 <uart_init+0x78>)
 800129a:	f002 fcbf 	bl	8003c1c <HAL_UART_Init>
 800129e:	4603      	mov	r3, r0
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d10a      	bne.n	80012ba <uart_init+0x6e>
			return_value = true;
 80012a4:	2301      	movs	r3, #1
 80012a6:	71fb      	strb	r3, [r7, #7]
			uart_send_string(msg_uart_init);
 80012a8:	4808      	ldr	r0, [pc, #32]	; (80012cc <uart_init+0x80>)
 80012aa:	f000 f81b 	bl	80012e4 <uart_send_string>
 80012ae:	e004      	b.n	80012ba <uart_init+0x6e>
		}
	} else if(uart_state != HAL_UART_STATE_ERROR) {
 80012b0:	79bb      	ldrb	r3, [r7, #6]
 80012b2:	2be0      	cmp	r3, #224	; 0xe0
 80012b4:	d001      	beq.n	80012ba <uart_init+0x6e>
		// Not an STATE_ERROR or STATE_RESET,so initialization was already done
		return_value = true;
 80012b6:	2301      	movs	r3, #1
 80012b8:	71fb      	strb	r3, [r7, #7]
	}

	return return_value;
 80012ba:	79fb      	ldrb	r3, [r7, #7]
}
 80012bc:	4618      	mov	r0, r3
 80012be:	3708      	adds	r7, #8
 80012c0:	46bd      	mov	sp, r7
 80012c2:	bd80      	pop	{r7, pc}
 80012c4:	2000021c 	.word	0x2000021c
 80012c8:	40004800 	.word	0x40004800
 80012cc:	20000090 	.word	0x20000090

080012d0 <uart_get_state>:

HAL_UART_StateTypeDef uart_get_state() {
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
	return HAL_UART_GetState(&UartHandle);
 80012d4:	4802      	ldr	r0, [pc, #8]	; (80012e0 <uart_get_state+0x10>)
 80012d6:	f002 fd80 	bl	8003dda <HAL_UART_GetState>
 80012da:	4603      	mov	r3, r0
}
 80012dc:	4618      	mov	r0, r3
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	2000021c 	.word	0x2000021c

080012e4 <uart_send_string>:


void uart_send_string(uint8_t * pstring) {
 80012e4:	b580      	push	{r7, lr}
 80012e6:	b084      	sub	sp, #16
 80012e8:	af00      	add	r7, sp, #0
 80012ea:	6078      	str	r0, [r7, #4]
	uint32_t size = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	60fb      	str	r3, [r7, #12]

	if(pstring == NULL) {
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d012      	beq.n	800131c <uart_send_string+0x38>
		return;
	}

	for(; pstring[size] != '\0'; size++ );
 80012f6:	e002      	b.n	80012fe <uart_send_string+0x1a>
 80012f8:	68fb      	ldr	r3, [r7, #12]
 80012fa:	3301      	adds	r3, #1
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	687a      	ldr	r2, [r7, #4]
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	4413      	add	r3, r2
 8001304:	781b      	ldrb	r3, [r3, #0]
 8001306:	2b00      	cmp	r3, #0
 8001308:	d1f6      	bne.n	80012f8 <uart_send_string+0x14>
	HAL_UART_Transmit(&UartHandle, pstring, size, 1000);
 800130a:	68fb      	ldr	r3, [r7, #12]
 800130c:	b29a      	uxth	r2, r3
 800130e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001312:	6879      	ldr	r1, [r7, #4]
 8001314:	4803      	ldr	r0, [pc, #12]	; (8001324 <uart_send_string+0x40>)
 8001316:	f002 fcce 	bl	8003cb6 <HAL_UART_Transmit>
 800131a:	e000      	b.n	800131e <uart_send_string+0x3a>
		return;
 800131c:	bf00      	nop
}
 800131e:	3710      	adds	r7, #16
 8001320:	46bd      	mov	sp, r7
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000021c 	.word	0x2000021c

08001328 <BSP_LED_Init>:
  *     @arg  LED1
  *     @arg  LED2
  *     @arg  LED3
  */
void BSP_LED_Init(Led_TypeDef Led)
{
 8001328:	b580      	push	{r7, lr}
 800132a:	b08a      	sub	sp, #40	; 0x28
 800132c:	af00      	add	r7, sp, #0
 800132e:	4603      	mov	r3, r0
 8001330:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  GPIO_InitStruct;
  
  /* Enable the GPIO_LED Clock */
  LEDx_GPIO_CLK_ENABLE(Led);
 8001332:	79fb      	ldrb	r3, [r7, #7]
 8001334:	2b00      	cmp	r3, #0
 8001336:	d10e      	bne.n	8001356 <BSP_LED_Init+0x2e>
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
 800133c:	4b1f      	ldr	r3, [pc, #124]	; (80013bc <BSP_LED_Init+0x94>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	4a1e      	ldr	r2, [pc, #120]	; (80013bc <BSP_LED_Init+0x94>)
 8001342:	f043 0302 	orr.w	r3, r3, #2
 8001346:	6313      	str	r3, [r2, #48]	; 0x30
 8001348:	4b1c      	ldr	r3, [pc, #112]	; (80013bc <BSP_LED_Init+0x94>)
 800134a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800134c:	f003 0302 	and.w	r3, r3, #2
 8001350:	613b      	str	r3, [r7, #16]
 8001352:	693b      	ldr	r3, [r7, #16]
 8001354:	e00d      	b.n	8001372 <BSP_LED_Init+0x4a>
 8001356:	2300      	movs	r3, #0
 8001358:	60fb      	str	r3, [r7, #12]
 800135a:	4b18      	ldr	r3, [pc, #96]	; (80013bc <BSP_LED_Init+0x94>)
 800135c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800135e:	4a17      	ldr	r2, [pc, #92]	; (80013bc <BSP_LED_Init+0x94>)
 8001360:	f043 0302 	orr.w	r3, r3, #2
 8001364:	6313      	str	r3, [r2, #48]	; 0x30
 8001366:	4b15      	ldr	r3, [pc, #84]	; (80013bc <BSP_LED_Init+0x94>)
 8001368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800136a:	f003 0302 	and.w	r3, r3, #2
 800136e:	60fb      	str	r3, [r7, #12]
 8001370:	68fb      	ldr	r3, [r7, #12]
  
  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8001372:	79fb      	ldrb	r3, [r7, #7]
 8001374:	4a12      	ldr	r2, [pc, #72]	; (80013c0 <BSP_LED_Init+0x98>)
 8001376:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800137a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800137c:	2301      	movs	r3, #1
 800137e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001380:	2300      	movs	r3, #0
 8001382:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8001384:	2302      	movs	r3, #2
 8001386:	623b      	str	r3, [r7, #32]
  
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8001388:	79fb      	ldrb	r3, [r7, #7]
 800138a:	4a0e      	ldr	r2, [pc, #56]	; (80013c4 <BSP_LED_Init+0x9c>)
 800138c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001390:	f107 0214 	add.w	r2, r7, #20
 8001394:	4611      	mov	r1, r2
 8001396:	4618      	mov	r0, r3
 8001398:	f000 fab4 	bl	8001904 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 800139c:	79fb      	ldrb	r3, [r7, #7]
 800139e:	4a09      	ldr	r2, [pc, #36]	; (80013c4 <BSP_LED_Init+0x9c>)
 80013a0:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013a4:	79fb      	ldrb	r3, [r7, #7]
 80013a6:	4a06      	ldr	r2, [pc, #24]	; (80013c0 <BSP_LED_Init+0x98>)
 80013a8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013ac:	2200      	movs	r2, #0
 80013ae:	4619      	mov	r1, r3
 80013b0:	f000 fc6c 	bl	8001c8c <HAL_GPIO_WritePin>
}
 80013b4:	bf00      	nop
 80013b6:	3728      	adds	r7, #40	; 0x28
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	40023800 	.word	0x40023800
 80013c0:	08004f3c 	.word	0x08004f3c
 80013c4:	200000c0 	.word	0x200000c0

080013c8 <BSP_LED_On>:
  * @param  Led: Specifies the Led to be set on. 
  *   This parameter can be one of following parameters:
  *     @arg LED2
  */
void BSP_LED_On(Led_TypeDef Led)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	71fb      	strb	r3, [r7, #7]
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4a07      	ldr	r2, [pc, #28]	; (80013f4 <BSP_LED_On+0x2c>)
 80013d6:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80013da:	79fb      	ldrb	r3, [r7, #7]
 80013dc:	4a06      	ldr	r2, [pc, #24]	; (80013f8 <BSP_LED_On+0x30>)
 80013de:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80013e2:	2201      	movs	r2, #1
 80013e4:	4619      	mov	r1, r3
 80013e6:	f000 fc51 	bl	8001c8c <HAL_GPIO_WritePin>
}
 80013ea:	bf00      	nop
 80013ec:	3708      	adds	r7, #8
 80013ee:	46bd      	mov	sp, r7
 80013f0:	bd80      	pop	{r7, pc}
 80013f2:	bf00      	nop
 80013f4:	200000c0 	.word	0x200000c0
 80013f8:	08004f3c 	.word	0x08004f3c

080013fc <BSP_PB_Init>:
  *     @arg BUTTON_MODE_GPIO: Button will be used as simple IO 
  *     @arg BUTTON_MODE_EXTI: Button will be connected to EXTI line with interrupt
  *                            generation capability  
  */
void BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b088      	sub	sp, #32
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	460a      	mov	r2, r1
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef GPIO_InitStruct;
  
  /* Enable the BUTTON Clock */
  BUTTONx_GPIO_CLK_ENABLE(Button);
 800140c:	2300      	movs	r3, #0
 800140e:	60bb      	str	r3, [r7, #8]
 8001410:	4b23      	ldr	r3, [pc, #140]	; (80014a0 <BSP_PB_Init+0xa4>)
 8001412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001414:	4a22      	ldr	r2, [pc, #136]	; (80014a0 <BSP_PB_Init+0xa4>)
 8001416:	f043 0304 	orr.w	r3, r3, #4
 800141a:	6313      	str	r3, [r2, #48]	; 0x30
 800141c:	4b20      	ldr	r3, [pc, #128]	; (80014a0 <BSP_PB_Init+0xa4>)
 800141e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001420:	f003 0304 	and.w	r3, r3, #4
 8001424:	60bb      	str	r3, [r7, #8]
 8001426:	68bb      	ldr	r3, [r7, #8]
  
  if(ButtonMode == BUTTON_MODE_GPIO)
 8001428:	79bb      	ldrb	r3, [r7, #6]
 800142a:	2b00      	cmp	r3, #0
 800142c:	d112      	bne.n	8001454 <BSP_PB_Init+0x58>
  {
    /* Configure Button pin as input */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800142e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001432:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001438:	2302      	movs	r3, #2
 800143a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 800143c:	2302      	movs	r3, #2
 800143e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 8001440:	79fb      	ldrb	r3, [r7, #7]
 8001442:	4a18      	ldr	r2, [pc, #96]	; (80014a4 <BSP_PB_Init+0xa8>)
 8001444:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001448:	f107 020c 	add.w	r2, r7, #12
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f000 fa58 	bl	8001904 <HAL_GPIO_Init>
  }
  
  if(ButtonMode == BUTTON_MODE_EXTI)
 8001454:	79bb      	ldrb	r3, [r7, #6]
 8001456:	2b01      	cmp	r3, #1
 8001458:	d11d      	bne.n	8001496 <BSP_PB_Init+0x9a>
  {
    /* Configure Button pin as input with External interrupt */
    GPIO_InitStruct.Pin = BUTTON_PIN[Button];
 800145a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800145e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001460:	2300      	movs	r3, #0
 8001462:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING; 
 8001464:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001468:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT[Button], &GPIO_InitStruct);
 800146a:	79fb      	ldrb	r3, [r7, #7]
 800146c:	4a0d      	ldr	r2, [pc, #52]	; (80014a4 <BSP_PB_Init+0xa8>)
 800146e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001472:	f107 020c 	add.w	r2, r7, #12
 8001476:	4611      	mov	r1, r2
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fa43 	bl	8001904 <HAL_GPIO_Init>
    
    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(BUTTON_IRQn[Button]), 0x0F, 0x00);
 800147e:	2328      	movs	r3, #40	; 0x28
 8001480:	b25b      	sxtb	r3, r3
 8001482:	2200      	movs	r2, #0
 8001484:	210f      	movs	r1, #15
 8001486:	4618      	mov	r0, r3
 8001488:	f000 fa05 	bl	8001896 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(BUTTON_IRQn[Button]));
 800148c:	2328      	movs	r3, #40	; 0x28
 800148e:	b25b      	sxtb	r3, r3
 8001490:	4618      	mov	r0, r3
 8001492:	f000 fa1c 	bl	80018ce <HAL_NVIC_EnableIRQ>
  }
}
 8001496:	bf00      	nop
 8001498:	3720      	adds	r7, #32
 800149a:	46bd      	mov	sp, r7
 800149c:	bd80      	pop	{r7, pc}
 800149e:	bf00      	nop
 80014a0:	40023800 	.word	0x40023800
 80014a4:	200000cc 	.word	0x200000cc

080014a8 <BSP_PB_GetState>:
  * @param  Button: Specifies the Button to be checked.
  *   This parameter should be: BUTTON_USER  
  * @retval The Button GPIO pin value.
  */
uint32_t BSP_PB_GetState(Button_TypeDef Button)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	4603      	mov	r3, r0
 80014b0:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	4a06      	ldr	r2, [pc, #24]	; (80014d0 <BSP_PB_GetState+0x28>)
 80014b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014ba:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80014be:	4611      	mov	r1, r2
 80014c0:	4618      	mov	r0, r3
 80014c2:	f000 fbcb 	bl	8001c5c <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
}
 80014c8:	4618      	mov	r0, r3
 80014ca:	3708      	adds	r7, #8
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	200000cc 	.word	0x200000cc

080014d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014d8:	4b16      	ldr	r3, [pc, #88]	; (8001534 <SystemInit+0x60>)
 80014da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014de:	4a15      	ldr	r2, [pc, #84]	; (8001534 <SystemInit+0x60>)
 80014e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 80014e8:	4b13      	ldr	r3, [pc, #76]	; (8001538 <SystemInit+0x64>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	4a12      	ldr	r2, [pc, #72]	; (8001538 <SystemInit+0x64>)
 80014ee:	f043 0301 	orr.w	r3, r3, #1
 80014f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80014f4:	4b10      	ldr	r3, [pc, #64]	; (8001538 <SystemInit+0x64>)
 80014f6:	2200      	movs	r2, #0
 80014f8:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 80014fa:	4b0f      	ldr	r3, [pc, #60]	; (8001538 <SystemInit+0x64>)
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	4a0e      	ldr	r2, [pc, #56]	; (8001538 <SystemInit+0x64>)
 8001500:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8001504:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001508:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800150a:	4b0b      	ldr	r3, [pc, #44]	; (8001538 <SystemInit+0x64>)
 800150c:	4a0b      	ldr	r2, [pc, #44]	; (800153c <SystemInit+0x68>)
 800150e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8001510:	4b09      	ldr	r3, [pc, #36]	; (8001538 <SystemInit+0x64>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4a08      	ldr	r2, [pc, #32]	; (8001538 <SystemInit+0x64>)
 8001516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800151a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 800151c:	4b06      	ldr	r3, [pc, #24]	; (8001538 <SystemInit+0x64>)
 800151e:	2200      	movs	r2, #0
 8001520:	60da      	str	r2, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001522:	4b04      	ldr	r3, [pc, #16]	; (8001534 <SystemInit+0x60>)
 8001524:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001528:	609a      	str	r2, [r3, #8]
#endif
}
 800152a:	bf00      	nop
 800152c:	46bd      	mov	sp, r7
 800152e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001532:	4770      	bx	lr
 8001534:	e000ed00 	.word	0xe000ed00
 8001538:	40023800 	.word	0x40023800
 800153c:	24003010 	.word	0x24003010

08001540 <NMI_Handler>:
  * @brief   This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 8001540:	b480      	push	{r7}
 8001542:	af00      	add	r7, sp, #0
}
 8001544:	bf00      	nop
 8001546:	46bd      	mov	sp, r7
 8001548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800154c:	4770      	bx	lr

0800154e <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800154e:	b480      	push	{r7}
 8001550:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8001552:	e7fe      	b.n	8001552 <HardFault_Handler+0x4>

08001554 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 8001558:	e7fe      	b.n	8001558 <MemManage_Handler+0x4>

0800155a <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800155a:	b480      	push	{r7}
 800155c:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800155e:	e7fe      	b.n	800155e <BusFault_Handler+0x4>

08001560 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 8001560:	b480      	push	{r7}
 8001562:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 8001564:	e7fe      	b.n	8001564 <UsageFault_Handler+0x4>

08001566 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 8001566:	b480      	push	{r7}
 8001568:	af00      	add	r7, sp, #0
}
 800156a:	bf00      	nop
 800156c:	46bd      	mov	sp, r7
 800156e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001572:	4770      	bx	lr

08001574 <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 8001574:	b480      	push	{r7}
 8001576:	af00      	add	r7, sp, #0
}
 8001578:	bf00      	nop
 800157a:	46bd      	mov	sp, r7
 800157c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001580:	4770      	bx	lr

08001582 <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 8001582:	b480      	push	{r7}
 8001584:	af00      	add	r7, sp, #0
}
 8001586:	bf00      	nop
 8001588:	46bd      	mov	sp, r7
 800158a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158e:	4770      	bx	lr

08001590 <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	af00      	add	r7, sp, #0
    HAL_IncTick();
 8001594:	f000 f884 	bl	80016a0 <HAL_IncTick>
}
 8001598:	bf00      	nop
 800159a:	bd80      	pop	{r7, pc}

0800159c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b086      	sub	sp, #24
 80015a0:	af00      	add	r7, sp, #0
 80015a2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80015a4:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <_sbrk+0x5c>)
 80015a6:	4b15      	ldr	r3, [pc, #84]	; (80015fc <_sbrk+0x60>)
 80015a8:	1ad3      	subs	r3, r2, r3
 80015aa:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80015b0:	4b13      	ldr	r3, [pc, #76]	; (8001600 <_sbrk+0x64>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d102      	bne.n	80015be <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80015b8:	4b11      	ldr	r3, [pc, #68]	; (8001600 <_sbrk+0x64>)
 80015ba:	4a12      	ldr	r2, [pc, #72]	; (8001604 <_sbrk+0x68>)
 80015bc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80015be:	4b10      	ldr	r3, [pc, #64]	; (8001600 <_sbrk+0x64>)
 80015c0:	681a      	ldr	r2, [r3, #0]
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	4413      	add	r3, r2
 80015c6:	693a      	ldr	r2, [r7, #16]
 80015c8:	429a      	cmp	r2, r3
 80015ca:	d207      	bcs.n	80015dc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80015cc:	f003 f82c 	bl	8004628 <__errno>
 80015d0:	4603      	mov	r3, r0
 80015d2:	220c      	movs	r2, #12
 80015d4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80015d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015da:	e009      	b.n	80015f0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80015dc:	4b08      	ldr	r3, [pc, #32]	; (8001600 <_sbrk+0x64>)
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80015e2:	4b07      	ldr	r3, [pc, #28]	; (8001600 <_sbrk+0x64>)
 80015e4:	681a      	ldr	r2, [r3, #0]
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	4413      	add	r3, r2
 80015ea:	4a05      	ldr	r2, [pc, #20]	; (8001600 <_sbrk+0x64>)
 80015ec:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80015ee:	68fb      	ldr	r3, [r7, #12]
}
 80015f0:	4618      	mov	r0, r3
 80015f2:	3718      	adds	r7, #24
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	20030000 	.word	0x20030000
 80015fc:	00000400 	.word	0x00000400
 8001600:	20000260 	.word	0x20000260
 8001604:	200003b0 	.word	0x200003b0

08001608 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800160c:	4b0b      	ldr	r3, [pc, #44]	; (800163c <HAL_Init+0x34>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a0a      	ldr	r2, [pc, #40]	; (800163c <HAL_Init+0x34>)
 8001612:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001616:	6013      	str	r3, [r2, #0]
#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001618:	4b08      	ldr	r3, [pc, #32]	; (800163c <HAL_Init+0x34>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a07      	ldr	r2, [pc, #28]	; (800163c <HAL_Init+0x34>)
 800161e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001622:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001624:	2003      	movs	r0, #3
 8001626:	f000 f92b 	bl	8001880 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800162a:	200f      	movs	r0, #15
 800162c:	f000 f808 	bl	8001640 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001630:	f001 fb3c 	bl	8002cac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001634:	2300      	movs	r3, #0
}
 8001636:	4618      	mov	r0, r3
 8001638:	bd80      	pop	{r7, pc}
 800163a:	bf00      	nop
 800163c:	40023c00 	.word	0x40023c00

08001640 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001648:	4b12      	ldr	r3, [pc, #72]	; (8001694 <HAL_InitTick+0x54>)
 800164a:	681a      	ldr	r2, [r3, #0]
 800164c:	4b12      	ldr	r3, [pc, #72]	; (8001698 <HAL_InitTick+0x58>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001656:	fbb3 f3f1 	udiv	r3, r3, r1
 800165a:	fbb2 f3f3 	udiv	r3, r2, r3
 800165e:	4618      	mov	r0, r3
 8001660:	f000 f943 	bl	80018ea <HAL_SYSTICK_Config>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800166a:	2301      	movs	r3, #1
 800166c:	e00e      	b.n	800168c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	2b0f      	cmp	r3, #15
 8001672:	d80a      	bhi.n	800168a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001674:	2200      	movs	r2, #0
 8001676:	6879      	ldr	r1, [r7, #4]
 8001678:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800167c:	f000 f90b 	bl	8001896 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001680:	4a06      	ldr	r2, [pc, #24]	; (800169c <HAL_InitTick+0x5c>)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001686:	2300      	movs	r3, #0
 8001688:	e000      	b.n	800168c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800168a:	2301      	movs	r3, #1
}
 800168c:	4618      	mov	r0, r3
 800168e:	3708      	adds	r7, #8
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	200000d0 	.word	0x200000d0
 8001698:	200000d8 	.word	0x200000d8
 800169c:	200000d4 	.word	0x200000d4

080016a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016a0:	b480      	push	{r7}
 80016a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016a4:	4b06      	ldr	r3, [pc, #24]	; (80016c0 <HAL_IncTick+0x20>)
 80016a6:	781b      	ldrb	r3, [r3, #0]
 80016a8:	461a      	mov	r2, r3
 80016aa:	4b06      	ldr	r3, [pc, #24]	; (80016c4 <HAL_IncTick+0x24>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	4413      	add	r3, r2
 80016b0:	4a04      	ldr	r2, [pc, #16]	; (80016c4 <HAL_IncTick+0x24>)
 80016b2:	6013      	str	r3, [r2, #0]
}
 80016b4:	bf00      	nop
 80016b6:	46bd      	mov	sp, r7
 80016b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016bc:	4770      	bx	lr
 80016be:	bf00      	nop
 80016c0:	200000d8 	.word	0x200000d8
 80016c4:	20000264 	.word	0x20000264

080016c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  return uwTick;
 80016cc:	4b03      	ldr	r3, [pc, #12]	; (80016dc <HAL_GetTick+0x14>)
 80016ce:	681b      	ldr	r3, [r3, #0]
}
 80016d0:	4618      	mov	r0, r3
 80016d2:	46bd      	mov	sp, r7
 80016d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d8:	4770      	bx	lr
 80016da:	bf00      	nop
 80016dc:	20000264 	.word	0x20000264

080016e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e0:	b480      	push	{r7}
 80016e2:	b085      	sub	sp, #20
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	f003 0307 	and.w	r3, r3, #7
 80016ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f0:	4b0c      	ldr	r3, [pc, #48]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 80016f2:	68db      	ldr	r3, [r3, #12]
 80016f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016f6:	68ba      	ldr	r2, [r7, #8]
 80016f8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80016fc:	4013      	ands	r3, r2
 80016fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001700:	68fb      	ldr	r3, [r7, #12]
 8001702:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001704:	68bb      	ldr	r3, [r7, #8]
 8001706:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001708:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800170c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001710:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001712:	4a04      	ldr	r2, [pc, #16]	; (8001724 <__NVIC_SetPriorityGrouping+0x44>)
 8001714:	68bb      	ldr	r3, [r7, #8]
 8001716:	60d3      	str	r3, [r2, #12]
}
 8001718:	bf00      	nop
 800171a:	3714      	adds	r7, #20
 800171c:	46bd      	mov	sp, r7
 800171e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001722:	4770      	bx	lr
 8001724:	e000ed00 	.word	0xe000ed00

08001728 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001728:	b480      	push	{r7}
 800172a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800172c:	4b04      	ldr	r3, [pc, #16]	; (8001740 <__NVIC_GetPriorityGrouping+0x18>)
 800172e:	68db      	ldr	r3, [r3, #12]
 8001730:	0a1b      	lsrs	r3, r3, #8
 8001732:	f003 0307 	and.w	r3, r3, #7
}
 8001736:	4618      	mov	r0, r3
 8001738:	46bd      	mov	sp, r7
 800173a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173e:	4770      	bx	lr
 8001740:	e000ed00 	.word	0xe000ed00

08001744 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001744:	b480      	push	{r7}
 8001746:	b083      	sub	sp, #12
 8001748:	af00      	add	r7, sp, #0
 800174a:	4603      	mov	r3, r0
 800174c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800174e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001752:	2b00      	cmp	r3, #0
 8001754:	db0b      	blt.n	800176e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001756:	79fb      	ldrb	r3, [r7, #7]
 8001758:	f003 021f 	and.w	r2, r3, #31
 800175c:	4907      	ldr	r1, [pc, #28]	; (800177c <__NVIC_EnableIRQ+0x38>)
 800175e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001762:	095b      	lsrs	r3, r3, #5
 8001764:	2001      	movs	r0, #1
 8001766:	fa00 f202 	lsl.w	r2, r0, r2
 800176a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800176e:	bf00      	nop
 8001770:	370c      	adds	r7, #12
 8001772:	46bd      	mov	sp, r7
 8001774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001778:	4770      	bx	lr
 800177a:	bf00      	nop
 800177c:	e000e100 	.word	0xe000e100

08001780 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001780:	b480      	push	{r7}
 8001782:	b083      	sub	sp, #12
 8001784:	af00      	add	r7, sp, #0
 8001786:	4603      	mov	r3, r0
 8001788:	6039      	str	r1, [r7, #0]
 800178a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800178c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001790:	2b00      	cmp	r3, #0
 8001792:	db0a      	blt.n	80017aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	b2da      	uxtb	r2, r3
 8001798:	490c      	ldr	r1, [pc, #48]	; (80017cc <__NVIC_SetPriority+0x4c>)
 800179a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800179e:	0112      	lsls	r2, r2, #4
 80017a0:	b2d2      	uxtb	r2, r2
 80017a2:	440b      	add	r3, r1
 80017a4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017a8:	e00a      	b.n	80017c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	b2da      	uxtb	r2, r3
 80017ae:	4908      	ldr	r1, [pc, #32]	; (80017d0 <__NVIC_SetPriority+0x50>)
 80017b0:	79fb      	ldrb	r3, [r7, #7]
 80017b2:	f003 030f 	and.w	r3, r3, #15
 80017b6:	3b04      	subs	r3, #4
 80017b8:	0112      	lsls	r2, r2, #4
 80017ba:	b2d2      	uxtb	r2, r2
 80017bc:	440b      	add	r3, r1
 80017be:	761a      	strb	r2, [r3, #24]
}
 80017c0:	bf00      	nop
 80017c2:	370c      	adds	r7, #12
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	e000e100 	.word	0xe000e100
 80017d0:	e000ed00 	.word	0xe000ed00

080017d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d4:	b480      	push	{r7}
 80017d6:	b089      	sub	sp, #36	; 0x24
 80017d8:	af00      	add	r7, sp, #0
 80017da:	60f8      	str	r0, [r7, #12]
 80017dc:	60b9      	str	r1, [r7, #8]
 80017de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	f003 0307 	and.w	r3, r3, #7
 80017e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017e8:	69fb      	ldr	r3, [r7, #28]
 80017ea:	f1c3 0307 	rsb	r3, r3, #7
 80017ee:	2b04      	cmp	r3, #4
 80017f0:	bf28      	it	cs
 80017f2:	2304      	movcs	r3, #4
 80017f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3304      	adds	r3, #4
 80017fa:	2b06      	cmp	r3, #6
 80017fc:	d902      	bls.n	8001804 <NVIC_EncodePriority+0x30>
 80017fe:	69fb      	ldr	r3, [r7, #28]
 8001800:	3b03      	subs	r3, #3
 8001802:	e000      	b.n	8001806 <NVIC_EncodePriority+0x32>
 8001804:	2300      	movs	r3, #0
 8001806:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001808:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800180c:	69bb      	ldr	r3, [r7, #24]
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43da      	mvns	r2, r3
 8001814:	68bb      	ldr	r3, [r7, #8]
 8001816:	401a      	ands	r2, r3
 8001818:	697b      	ldr	r3, [r7, #20]
 800181a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800181c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	fa01 f303 	lsl.w	r3, r1, r3
 8001826:	43d9      	mvns	r1, r3
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800182c:	4313      	orrs	r3, r2
         );
}
 800182e:	4618      	mov	r0, r3
 8001830:	3724      	adds	r7, #36	; 0x24
 8001832:	46bd      	mov	sp, r7
 8001834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001838:	4770      	bx	lr
	...

0800183c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800183c:	b580      	push	{r7, lr}
 800183e:	b082      	sub	sp, #8
 8001840:	af00      	add	r7, sp, #0
 8001842:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	3b01      	subs	r3, #1
 8001848:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800184c:	d301      	bcc.n	8001852 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800184e:	2301      	movs	r3, #1
 8001850:	e00f      	b.n	8001872 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001852:	4a0a      	ldr	r2, [pc, #40]	; (800187c <SysTick_Config+0x40>)
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	3b01      	subs	r3, #1
 8001858:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800185a:	210f      	movs	r1, #15
 800185c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001860:	f7ff ff8e 	bl	8001780 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <SysTick_Config+0x40>)
 8001866:	2200      	movs	r2, #0
 8001868:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800186a:	4b04      	ldr	r3, [pc, #16]	; (800187c <SysTick_Config+0x40>)
 800186c:	2207      	movs	r2, #7
 800186e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001870:	2300      	movs	r3, #0
}
 8001872:	4618      	mov	r0, r3
 8001874:	3708      	adds	r7, #8
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	e000e010 	.word	0xe000e010

08001880 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b082      	sub	sp, #8
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001888:	6878      	ldr	r0, [r7, #4]
 800188a:	f7ff ff29 	bl	80016e0 <__NVIC_SetPriorityGrouping>
}
 800188e:	bf00      	nop
 8001890:	3708      	adds	r7, #8
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}

08001896 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001896:	b580      	push	{r7, lr}
 8001898:	b086      	sub	sp, #24
 800189a:	af00      	add	r7, sp, #0
 800189c:	4603      	mov	r3, r0
 800189e:	60b9      	str	r1, [r7, #8]
 80018a0:	607a      	str	r2, [r7, #4]
 80018a2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80018a4:	2300      	movs	r3, #0
 80018a6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80018a8:	f7ff ff3e 	bl	8001728 <__NVIC_GetPriorityGrouping>
 80018ac:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	6978      	ldr	r0, [r7, #20]
 80018b4:	f7ff ff8e 	bl	80017d4 <NVIC_EncodePriority>
 80018b8:	4602      	mov	r2, r0
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	4611      	mov	r1, r2
 80018c0:	4618      	mov	r0, r3
 80018c2:	f7ff ff5d 	bl	8001780 <__NVIC_SetPriority>
}
 80018c6:	bf00      	nop
 80018c8:	3718      	adds	r7, #24
 80018ca:	46bd      	mov	sp, r7
 80018cc:	bd80      	pop	{r7, pc}

080018ce <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80018ce:	b580      	push	{r7, lr}
 80018d0:	b082      	sub	sp, #8
 80018d2:	af00      	add	r7, sp, #0
 80018d4:	4603      	mov	r3, r0
 80018d6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80018d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018dc:	4618      	mov	r0, r3
 80018de:	f7ff ff31 	bl	8001744 <__NVIC_EnableIRQ>
}
 80018e2:	bf00      	nop
 80018e4:	3708      	adds	r7, #8
 80018e6:	46bd      	mov	sp, r7
 80018e8:	bd80      	pop	{r7, pc}

080018ea <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff ffa2 	bl	800183c <SysTick_Config>
 80018f8:	4603      	mov	r3, r0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	3708      	adds	r7, #8
 80018fe:	46bd      	mov	sp, r7
 8001900:	bd80      	pop	{r7, pc}
	...

08001904 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001904:	b480      	push	{r7}
 8001906:	b089      	sub	sp, #36	; 0x24
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
 800190c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800190e:	2300      	movs	r3, #0
 8001910:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001912:	2300      	movs	r3, #0
 8001914:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001916:	2300      	movs	r3, #0
 8001918:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800191a:	2300      	movs	r3, #0
 800191c:	61fb      	str	r3, [r7, #28]
 800191e:	e177      	b.n	8001c10 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001920:	2201      	movs	r2, #1
 8001922:	69fb      	ldr	r3, [r7, #28]
 8001924:	fa02 f303 	lsl.w	r3, r2, r3
 8001928:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800192a:	683b      	ldr	r3, [r7, #0]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	697a      	ldr	r2, [r7, #20]
 8001930:	4013      	ands	r3, r2
 8001932:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001934:	693a      	ldr	r2, [r7, #16]
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	429a      	cmp	r2, r3
 800193a:	f040 8166 	bne.w	8001c0a <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	685b      	ldr	r3, [r3, #4]
 8001942:	f003 0303 	and.w	r3, r3, #3
 8001946:	2b01      	cmp	r3, #1
 8001948:	d005      	beq.n	8001956 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001952:	2b02      	cmp	r3, #2
 8001954:	d130      	bne.n	80019b8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800195c:	69fb      	ldr	r3, [r7, #28]
 800195e:	005b      	lsls	r3, r3, #1
 8001960:	2203      	movs	r2, #3
 8001962:	fa02 f303 	lsl.w	r3, r2, r3
 8001966:	43db      	mvns	r3, r3
 8001968:	69ba      	ldr	r2, [r7, #24]
 800196a:	4013      	ands	r3, r2
 800196c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800196e:	683b      	ldr	r3, [r7, #0]
 8001970:	68da      	ldr	r2, [r3, #12]
 8001972:	69fb      	ldr	r3, [r7, #28]
 8001974:	005b      	lsls	r3, r3, #1
 8001976:	fa02 f303 	lsl.w	r3, r2, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4313      	orrs	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69ba      	ldr	r2, [r7, #24]
 8001984:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	685b      	ldr	r3, [r3, #4]
 800198a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800198c:	2201      	movs	r2, #1
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	fa02 f303 	lsl.w	r3, r2, r3
 8001994:	43db      	mvns	r3, r3
 8001996:	69ba      	ldr	r2, [r7, #24]
 8001998:	4013      	ands	r3, r2
 800199a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800199c:	683b      	ldr	r3, [r7, #0]
 800199e:	685b      	ldr	r3, [r3, #4]
 80019a0:	091b      	lsrs	r3, r3, #4
 80019a2:	f003 0201 	and.w	r2, r3, #1
 80019a6:	69fb      	ldr	r3, [r7, #28]
 80019a8:	fa02 f303 	lsl.w	r3, r2, r3
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	4313      	orrs	r3, r2
 80019b0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69ba      	ldr	r2, [r7, #24]
 80019b6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 0303 	and.w	r3, r3, #3
 80019c0:	2b03      	cmp	r3, #3
 80019c2:	d017      	beq.n	80019f4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019ca:	69fb      	ldr	r3, [r7, #28]
 80019cc:	005b      	lsls	r3, r3, #1
 80019ce:	2203      	movs	r2, #3
 80019d0:	fa02 f303 	lsl.w	r3, r2, r3
 80019d4:	43db      	mvns	r3, r3
 80019d6:	69ba      	ldr	r2, [r7, #24]
 80019d8:	4013      	ands	r3, r2
 80019da:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	689a      	ldr	r2, [r3, #8]
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	69ba      	ldr	r2, [r7, #24]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	69ba      	ldr	r2, [r7, #24]
 80019f2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	685b      	ldr	r3, [r3, #4]
 80019f8:	f003 0303 	and.w	r3, r3, #3
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d123      	bne.n	8001a48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	08da      	lsrs	r2, r3, #3
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	3208      	adds	r2, #8
 8001a08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	f003 0307 	and.w	r3, r3, #7
 8001a14:	009b      	lsls	r3, r3, #2
 8001a16:	220f      	movs	r2, #15
 8001a18:	fa02 f303 	lsl.w	r3, r2, r3
 8001a1c:	43db      	mvns	r3, r3
 8001a1e:	69ba      	ldr	r2, [r7, #24]
 8001a20:	4013      	ands	r3, r2
 8001a22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	691a      	ldr	r2, [r3, #16]
 8001a28:	69fb      	ldr	r3, [r7, #28]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	fa02 f303 	lsl.w	r3, r2, r3
 8001a34:	69ba      	ldr	r2, [r7, #24]
 8001a36:	4313      	orrs	r3, r2
 8001a38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a3a:	69fb      	ldr	r3, [r7, #28]
 8001a3c:	08da      	lsrs	r2, r3, #3
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	3208      	adds	r2, #8
 8001a42:	69b9      	ldr	r1, [r7, #24]
 8001a44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	681b      	ldr	r3, [r3, #0]
 8001a4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a4e:	69fb      	ldr	r3, [r7, #28]
 8001a50:	005b      	lsls	r3, r3, #1
 8001a52:	2203      	movs	r2, #3
 8001a54:	fa02 f303 	lsl.w	r3, r2, r3
 8001a58:	43db      	mvns	r3, r3
 8001a5a:	69ba      	ldr	r2, [r7, #24]
 8001a5c:	4013      	ands	r3, r2
 8001a5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f003 0203 	and.w	r2, r3, #3
 8001a68:	69fb      	ldr	r3, [r7, #28]
 8001a6a:	005b      	lsls	r3, r3, #1
 8001a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a70:	69ba      	ldr	r2, [r7, #24]
 8001a72:	4313      	orrs	r3, r2
 8001a74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	69ba      	ldr	r2, [r7, #24]
 8001a7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	f000 80c0 	beq.w	8001c0a <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b66      	ldr	r3, [pc, #408]	; (8001c28 <HAL_GPIO_Init+0x324>)
 8001a90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a92:	4a65      	ldr	r2, [pc, #404]	; (8001c28 <HAL_GPIO_Init+0x324>)
 8001a94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a98:	6453      	str	r3, [r2, #68]	; 0x44
 8001a9a:	4b63      	ldr	r3, [pc, #396]	; (8001c28 <HAL_GPIO_Init+0x324>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001aa6:	4a61      	ldr	r2, [pc, #388]	; (8001c2c <HAL_GPIO_Init+0x328>)
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	089b      	lsrs	r3, r3, #2
 8001aac:	3302      	adds	r3, #2
 8001aae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	009b      	lsls	r3, r3, #2
 8001abc:	220f      	movs	r2, #15
 8001abe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ac2:	43db      	mvns	r3, r3
 8001ac4:	69ba      	ldr	r2, [r7, #24]
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	4a58      	ldr	r2, [pc, #352]	; (8001c30 <HAL_GPIO_Init+0x32c>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d037      	beq.n	8001b42 <HAL_GPIO_Init+0x23e>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	4a57      	ldr	r2, [pc, #348]	; (8001c34 <HAL_GPIO_Init+0x330>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d031      	beq.n	8001b3e <HAL_GPIO_Init+0x23a>
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4a56      	ldr	r2, [pc, #344]	; (8001c38 <HAL_GPIO_Init+0x334>)
 8001ade:	4293      	cmp	r3, r2
 8001ae0:	d02b      	beq.n	8001b3a <HAL_GPIO_Init+0x236>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a55      	ldr	r2, [pc, #340]	; (8001c3c <HAL_GPIO_Init+0x338>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d025      	beq.n	8001b36 <HAL_GPIO_Init+0x232>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a54      	ldr	r2, [pc, #336]	; (8001c40 <HAL_GPIO_Init+0x33c>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d01f      	beq.n	8001b32 <HAL_GPIO_Init+0x22e>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a53      	ldr	r2, [pc, #332]	; (8001c44 <HAL_GPIO_Init+0x340>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d019      	beq.n	8001b2e <HAL_GPIO_Init+0x22a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a52      	ldr	r2, [pc, #328]	; (8001c48 <HAL_GPIO_Init+0x344>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d013      	beq.n	8001b2a <HAL_GPIO_Init+0x226>
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	4a51      	ldr	r2, [pc, #324]	; (8001c4c <HAL_GPIO_Init+0x348>)
 8001b06:	4293      	cmp	r3, r2
 8001b08:	d00d      	beq.n	8001b26 <HAL_GPIO_Init+0x222>
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	4a50      	ldr	r2, [pc, #320]	; (8001c50 <HAL_GPIO_Init+0x34c>)
 8001b0e:	4293      	cmp	r3, r2
 8001b10:	d007      	beq.n	8001b22 <HAL_GPIO_Init+0x21e>
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	4a4f      	ldr	r2, [pc, #316]	; (8001c54 <HAL_GPIO_Init+0x350>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d101      	bne.n	8001b1e <HAL_GPIO_Init+0x21a>
 8001b1a:	2309      	movs	r3, #9
 8001b1c:	e012      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b1e:	230a      	movs	r3, #10
 8001b20:	e010      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b22:	2308      	movs	r3, #8
 8001b24:	e00e      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b26:	2307      	movs	r3, #7
 8001b28:	e00c      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b2a:	2306      	movs	r3, #6
 8001b2c:	e00a      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b2e:	2305      	movs	r3, #5
 8001b30:	e008      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b32:	2304      	movs	r3, #4
 8001b34:	e006      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b36:	2303      	movs	r3, #3
 8001b38:	e004      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b3a:	2302      	movs	r3, #2
 8001b3c:	e002      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b3e:	2301      	movs	r3, #1
 8001b40:	e000      	b.n	8001b44 <HAL_GPIO_Init+0x240>
 8001b42:	2300      	movs	r3, #0
 8001b44:	69fa      	ldr	r2, [r7, #28]
 8001b46:	f002 0203 	and.w	r2, r2, #3
 8001b4a:	0092      	lsls	r2, r2, #2
 8001b4c:	4093      	lsls	r3, r2
 8001b4e:	69ba      	ldr	r2, [r7, #24]
 8001b50:	4313      	orrs	r3, r2
 8001b52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b54:	4935      	ldr	r1, [pc, #212]	; (8001c2c <HAL_GPIO_Init+0x328>)
 8001b56:	69fb      	ldr	r3, [r7, #28]
 8001b58:	089b      	lsrs	r3, r3, #2
 8001b5a:	3302      	adds	r3, #2
 8001b5c:	69ba      	ldr	r2, [r7, #24]
 8001b5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b62:	4b3d      	ldr	r3, [pc, #244]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	43db      	mvns	r3, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4013      	ands	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b72:	683b      	ldr	r3, [r7, #0]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d003      	beq.n	8001b86 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	693b      	ldr	r3, [r7, #16]
 8001b82:	4313      	orrs	r3, r2
 8001b84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b86:	4a34      	ldr	r2, [pc, #208]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001b88:	69bb      	ldr	r3, [r7, #24]
 8001b8a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b8c:	4b32      	ldr	r3, [pc, #200]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001b8e:	685b      	ldr	r3, [r3, #4]
 8001b90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	43db      	mvns	r3, r3
 8001b96:	69ba      	ldr	r2, [r7, #24]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ba4:	2b00      	cmp	r3, #0
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	693b      	ldr	r3, [r7, #16]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bb0:	4a29      	ldr	r2, [pc, #164]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001bb2:	69bb      	ldr	r3, [r7, #24]
 8001bb4:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bb6:	4b28      	ldr	r3, [pc, #160]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001bb8:	689b      	ldr	r3, [r3, #8]
 8001bba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bbc:	693b      	ldr	r3, [r7, #16]
 8001bbe:	43db      	mvns	r3, r3
 8001bc0:	69ba      	ldr	r2, [r7, #24]
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d003      	beq.n	8001bda <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bd2:	69ba      	ldr	r2, [r7, #24]
 8001bd4:	693b      	ldr	r3, [r7, #16]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001bda:	4a1f      	ldr	r2, [pc, #124]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001bdc:	69bb      	ldr	r3, [r7, #24]
 8001bde:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001be0:	4b1d      	ldr	r3, [pc, #116]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001be2:	68db      	ldr	r3, [r3, #12]
 8001be4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001be6:	693b      	ldr	r3, [r7, #16]
 8001be8:	43db      	mvns	r3, r3
 8001bea:	69ba      	ldr	r2, [r7, #24]
 8001bec:	4013      	ands	r3, r2
 8001bee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	685b      	ldr	r3, [r3, #4]
 8001bf4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001bf8:	2b00      	cmp	r3, #0
 8001bfa:	d003      	beq.n	8001c04 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	693b      	ldr	r3, [r7, #16]
 8001c00:	4313      	orrs	r3, r2
 8001c02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c04:	4a14      	ldr	r2, [pc, #80]	; (8001c58 <HAL_GPIO_Init+0x354>)
 8001c06:	69bb      	ldr	r3, [r7, #24]
 8001c08:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c0a:	69fb      	ldr	r3, [r7, #28]
 8001c0c:	3301      	adds	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
 8001c10:	69fb      	ldr	r3, [r7, #28]
 8001c12:	2b0f      	cmp	r3, #15
 8001c14:	f67f ae84 	bls.w	8001920 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c18:	bf00      	nop
 8001c1a:	bf00      	nop
 8001c1c:	3724      	adds	r7, #36	; 0x24
 8001c1e:	46bd      	mov	sp, r7
 8001c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c24:	4770      	bx	lr
 8001c26:	bf00      	nop
 8001c28:	40023800 	.word	0x40023800
 8001c2c:	40013800 	.word	0x40013800
 8001c30:	40020000 	.word	0x40020000
 8001c34:	40020400 	.word	0x40020400
 8001c38:	40020800 	.word	0x40020800
 8001c3c:	40020c00 	.word	0x40020c00
 8001c40:	40021000 	.word	0x40021000
 8001c44:	40021400 	.word	0x40021400
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	40021c00 	.word	0x40021c00
 8001c50:	40022000 	.word	0x40022000
 8001c54:	40022400 	.word	0x40022400
 8001c58:	40013c00 	.word	0x40013c00

08001c5c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b085      	sub	sp, #20
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	6078      	str	r0, [r7, #4]
 8001c64:	460b      	mov	r3, r1
 8001c66:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	691a      	ldr	r2, [r3, #16]
 8001c6c:	887b      	ldrh	r3, [r7, #2]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d002      	beq.n	8001c7a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001c74:	2301      	movs	r3, #1
 8001c76:	73fb      	strb	r3, [r7, #15]
 8001c78:	e001      	b.n	8001c7e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001c7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c80:	4618      	mov	r0, r3
 8001c82:	3714      	adds	r7, #20
 8001c84:	46bd      	mov	sp, r7
 8001c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8a:	4770      	bx	lr

08001c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
 8001c98:	4613      	mov	r3, r2
 8001c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c9c:	787b      	ldrb	r3, [r7, #1]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d003      	beq.n	8001caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001ca2:	887a      	ldrh	r2, [r7, #2]
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001ca8:	e003      	b.n	8001cb2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001caa:	887b      	ldrh	r3, [r7, #2]
 8001cac:	041a      	lsls	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	619a      	str	r2, [r3, #24]
}
 8001cb2:	bf00      	nop
 8001cb4:	370c      	adds	r7, #12
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
	...

08001cc0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b084      	sub	sp, #16
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d101      	bne.n	8001cd2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e12b      	b.n	8001f2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001cd8:	b2db      	uxtb	r3, r3
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d106      	bne.n	8001cec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	2200      	movs	r2, #0
 8001ce2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f7fe fee0 	bl	8000aac <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2224      	movs	r2, #36	; 0x24
 8001cf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	681a      	ldr	r2, [r3, #0]
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681b      	ldr	r3, [r3, #0]
 8001cfe:	f022 0201 	bic.w	r2, r2, #1
 8001d02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001d12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	681a      	ldr	r2, [r3, #0]
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001d24:	f001 fc8a 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8001d28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	685b      	ldr	r3, [r3, #4]
 8001d2e:	4a81      	ldr	r2, [pc, #516]	; (8001f34 <HAL_I2C_Init+0x274>)
 8001d30:	4293      	cmp	r3, r2
 8001d32:	d807      	bhi.n	8001d44 <HAL_I2C_Init+0x84>
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	4a80      	ldr	r2, [pc, #512]	; (8001f38 <HAL_I2C_Init+0x278>)
 8001d38:	4293      	cmp	r3, r2
 8001d3a:	bf94      	ite	ls
 8001d3c:	2301      	movls	r3, #1
 8001d3e:	2300      	movhi	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	e006      	b.n	8001d52 <HAL_I2C_Init+0x92>
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	4a7d      	ldr	r2, [pc, #500]	; (8001f3c <HAL_I2C_Init+0x27c>)
 8001d48:	4293      	cmp	r3, r2
 8001d4a:	bf94      	ite	ls
 8001d4c:	2301      	movls	r3, #1
 8001d4e:	2300      	movhi	r3, #0
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001d56:	2301      	movs	r3, #1
 8001d58:	e0e7      	b.n	8001f2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	4a78      	ldr	r2, [pc, #480]	; (8001f40 <HAL_I2C_Init+0x280>)
 8001d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d62:	0c9b      	lsrs	r3, r3, #18
 8001d64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	68ba      	ldr	r2, [r7, #8]
 8001d76:	430a      	orrs	r2, r1
 8001d78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6a1b      	ldr	r3, [r3, #32]
 8001d80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	4a6a      	ldr	r2, [pc, #424]	; (8001f34 <HAL_I2C_Init+0x274>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d802      	bhi.n	8001d94 <HAL_I2C_Init+0xd4>
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	3301      	adds	r3, #1
 8001d92:	e009      	b.n	8001da8 <HAL_I2C_Init+0xe8>
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001d9a:	fb02 f303 	mul.w	r3, r2, r3
 8001d9e:	4a69      	ldr	r2, [pc, #420]	; (8001f44 <HAL_I2C_Init+0x284>)
 8001da0:	fba2 2303 	umull	r2, r3, r2, r3
 8001da4:	099b      	lsrs	r3, r3, #6
 8001da6:	3301      	adds	r3, #1
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	6812      	ldr	r2, [r2, #0]
 8001dac:	430b      	orrs	r3, r1
 8001dae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001dba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	685b      	ldr	r3, [r3, #4]
 8001dc2:	495c      	ldr	r1, [pc, #368]	; (8001f34 <HAL_I2C_Init+0x274>)
 8001dc4:	428b      	cmp	r3, r1
 8001dc6:	d819      	bhi.n	8001dfc <HAL_I2C_Init+0x13c>
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	1e59      	subs	r1, r3, #1
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	fbb1 f3f3 	udiv	r3, r1, r3
 8001dd6:	1c59      	adds	r1, r3, #1
 8001dd8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ddc:	400b      	ands	r3, r1
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d00a      	beq.n	8001df8 <HAL_I2C_Init+0x138>
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	1e59      	subs	r1, r3, #1
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	685b      	ldr	r3, [r3, #4]
 8001dea:	005b      	lsls	r3, r3, #1
 8001dec:	fbb1 f3f3 	udiv	r3, r1, r3
 8001df0:	3301      	adds	r3, #1
 8001df2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001df6:	e051      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001df8:	2304      	movs	r3, #4
 8001dfa:	e04f      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	689b      	ldr	r3, [r3, #8]
 8001e00:	2b00      	cmp	r3, #0
 8001e02:	d111      	bne.n	8001e28 <HAL_I2C_Init+0x168>
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	1e58      	subs	r0, r3, #1
 8001e08:	687b      	ldr	r3, [r7, #4]
 8001e0a:	6859      	ldr	r1, [r3, #4]
 8001e0c:	460b      	mov	r3, r1
 8001e0e:	005b      	lsls	r3, r3, #1
 8001e10:	440b      	add	r3, r1
 8001e12:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e16:	3301      	adds	r3, #1
 8001e18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bf0c      	ite	eq
 8001e20:	2301      	moveq	r3, #1
 8001e22:	2300      	movne	r3, #0
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	e012      	b.n	8001e4e <HAL_I2C_Init+0x18e>
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	1e58      	subs	r0, r3, #1
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6859      	ldr	r1, [r3, #4]
 8001e30:	460b      	mov	r3, r1
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	440b      	add	r3, r1
 8001e36:	0099      	lsls	r1, r3, #2
 8001e38:	440b      	add	r3, r1
 8001e3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e3e:	3301      	adds	r3, #1
 8001e40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e44:	2b00      	cmp	r3, #0
 8001e46:	bf0c      	ite	eq
 8001e48:	2301      	moveq	r3, #1
 8001e4a:	2300      	movne	r3, #0
 8001e4c:	b2db      	uxtb	r3, r3
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <HAL_I2C_Init+0x196>
 8001e52:	2301      	movs	r3, #1
 8001e54:	e022      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	689b      	ldr	r3, [r3, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d10e      	bne.n	8001e7c <HAL_I2C_Init+0x1bc>
 8001e5e:	68fb      	ldr	r3, [r7, #12]
 8001e60:	1e58      	subs	r0, r3, #1
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6859      	ldr	r1, [r3, #4]
 8001e66:	460b      	mov	r3, r1
 8001e68:	005b      	lsls	r3, r3, #1
 8001e6a:	440b      	add	r3, r1
 8001e6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e70:	3301      	adds	r3, #1
 8001e72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001e7a:	e00f      	b.n	8001e9c <HAL_I2C_Init+0x1dc>
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1e58      	subs	r0, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6859      	ldr	r1, [r3, #4]
 8001e84:	460b      	mov	r3, r1
 8001e86:	009b      	lsls	r3, r3, #2
 8001e88:	440b      	add	r3, r1
 8001e8a:	0099      	lsls	r1, r3, #2
 8001e8c:	440b      	add	r3, r1
 8001e8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8001e92:	3301      	adds	r3, #1
 8001e94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001e98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001e9c:	6879      	ldr	r1, [r7, #4]
 8001e9e:	6809      	ldr	r1, [r1, #0]
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	69da      	ldr	r2, [r3, #28]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	6a1b      	ldr	r3, [r3, #32]
 8001eb6:	431a      	orrs	r2, r3
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	430a      	orrs	r2, r1
 8001ebe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	689b      	ldr	r3, [r3, #8]
 8001ec6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001eca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001ece:	687a      	ldr	r2, [r7, #4]
 8001ed0:	6911      	ldr	r1, [r2, #16]
 8001ed2:	687a      	ldr	r2, [r7, #4]
 8001ed4:	68d2      	ldr	r2, [r2, #12]
 8001ed6:	4311      	orrs	r1, r2
 8001ed8:	687a      	ldr	r2, [r7, #4]
 8001eda:	6812      	ldr	r2, [r2, #0]
 8001edc:	430b      	orrs	r3, r1
 8001ede:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	695a      	ldr	r2, [r3, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	699b      	ldr	r3, [r3, #24]
 8001ef2:	431a      	orrs	r2, r3
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	681b      	ldr	r3, [r3, #0]
 8001ef8:	430a      	orrs	r2, r1
 8001efa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	681a      	ldr	r2, [r3, #0]
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f042 0201 	orr.w	r2, r2, #1
 8001f0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2220      	movs	r2, #32
 8001f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	2200      	movs	r2, #0
 8001f1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001f28:	2300      	movs	r3, #0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	3710      	adds	r7, #16
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}
 8001f32:	bf00      	nop
 8001f34:	000186a0 	.word	0x000186a0
 8001f38:	001e847f 	.word	0x001e847f
 8001f3c:	003d08ff 	.word	0x003d08ff
 8001f40:	431bde83 	.word	0x431bde83
 8001f44:	10624dd3 	.word	0x10624dd3

08001f48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001f48:	b580      	push	{r7, lr}
 8001f4a:	b088      	sub	sp, #32
 8001f4c:	af02      	add	r7, sp, #8
 8001f4e:	60f8      	str	r0, [r7, #12]
 8001f50:	607a      	str	r2, [r7, #4]
 8001f52:	461a      	mov	r2, r3
 8001f54:	460b      	mov	r3, r1
 8001f56:	817b      	strh	r3, [r7, #10]
 8001f58:	4613      	mov	r3, r2
 8001f5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff fbb4 	bl	80016c8 <HAL_GetTick>
 8001f60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f68:	b2db      	uxtb	r3, r3
 8001f6a:	2b20      	cmp	r3, #32
 8001f6c:	f040 80e0 	bne.w	8002130 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	9300      	str	r3, [sp, #0]
 8001f74:	2319      	movs	r3, #25
 8001f76:	2201      	movs	r2, #1
 8001f78:	4970      	ldr	r1, [pc, #448]	; (800213c <HAL_I2C_Master_Transmit+0x1f4>)
 8001f7a:	68f8      	ldr	r0, [r7, #12]
 8001f7c:	f000 fc66 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8001f80:	4603      	mov	r3, r0
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d001      	beq.n	8001f8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001f86:	2302      	movs	r3, #2
 8001f88:	e0d3      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	d101      	bne.n	8001f98 <HAL_I2C_Master_Transmit+0x50>
 8001f94:	2302      	movs	r3, #2
 8001f96:	e0cc      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	2201      	movs	r2, #1
 8001f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001fa0:	68fb      	ldr	r3, [r7, #12]
 8001fa2:	681b      	ldr	r3, [r3, #0]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d007      	beq.n	8001fbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681a      	ldr	r2, [r3, #0]
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f042 0201 	orr.w	r2, r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	681a      	ldr	r2, [r3, #0]
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001fcc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2221      	movs	r2, #33	; 0x21
 8001fd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2210      	movs	r2, #16
 8001fda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001fe4:	68fb      	ldr	r3, [r7, #12]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001fea:	68fb      	ldr	r3, [r7, #12]
 8001fec:	893a      	ldrh	r2, [r7, #8]
 8001fee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ff0:	68fb      	ldr	r3, [r7, #12]
 8001ff2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001ff4:	b29a      	uxth	r2, r3
 8001ff6:	68fb      	ldr	r3, [r7, #12]
 8001ff8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	4a50      	ldr	r2, [pc, #320]	; (8002140 <HAL_I2C_Master_Transmit+0x1f8>)
 8001ffe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002000:	8979      	ldrh	r1, [r7, #10]
 8002002:	697b      	ldr	r3, [r7, #20]
 8002004:	6a3a      	ldr	r2, [r7, #32]
 8002006:	68f8      	ldr	r0, [r7, #12]
 8002008:	f000 fad0 	bl	80025ac <I2C_MasterRequestWrite>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002012:	2301      	movs	r3, #1
 8002014:	e08d      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002016:	2300      	movs	r3, #0
 8002018:	613b      	str	r3, [r7, #16]
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	613b      	str	r3, [r7, #16]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	699b      	ldr	r3, [r3, #24]
 8002028:	613b      	str	r3, [r7, #16]
 800202a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 800202c:	e066      	b.n	80020fc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800202e:	697a      	ldr	r2, [r7, #20]
 8002030:	6a39      	ldr	r1, [r7, #32]
 8002032:	68f8      	ldr	r0, [r7, #12]
 8002034:	f000 fce0 	bl	80029f8 <I2C_WaitOnTXEFlagUntilTimeout>
 8002038:	4603      	mov	r3, r0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d00d      	beq.n	800205a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	2b04      	cmp	r3, #4
 8002044:	d107      	bne.n	8002056 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002054:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e06b      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800205e:	781a      	ldrb	r2, [r3, #0]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002066:	68fb      	ldr	r3, [r7, #12]
 8002068:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800206a:	1c5a      	adds	r2, r3, #1
 800206c:	68fb      	ldr	r3, [r7, #12]
 800206e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002074:	b29b      	uxth	r3, r3
 8002076:	3b01      	subs	r3, #1
 8002078:	b29a      	uxth	r2, r3
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002082:	3b01      	subs	r3, #1
 8002084:	b29a      	uxth	r2, r3
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	695b      	ldr	r3, [r3, #20]
 8002090:	f003 0304 	and.w	r3, r3, #4
 8002094:	2b04      	cmp	r3, #4
 8002096:	d11b      	bne.n	80020d0 <HAL_I2C_Master_Transmit+0x188>
 8002098:	68fb      	ldr	r3, [r7, #12]
 800209a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800209c:	2b00      	cmp	r3, #0
 800209e:	d017      	beq.n	80020d0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020a4:	781a      	ldrb	r2, [r3, #0]
 80020a6:	68fb      	ldr	r3, [r7, #12]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020b0:	1c5a      	adds	r2, r3, #1
 80020b2:	68fb      	ldr	r3, [r7, #12]
 80020b4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80020ba:	b29b      	uxth	r3, r3
 80020bc:	3b01      	subs	r3, #1
 80020be:	b29a      	uxth	r2, r3
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80020c8:	3b01      	subs	r3, #1
 80020ca:	b29a      	uxth	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80020d0:	697a      	ldr	r2, [r7, #20]
 80020d2:	6a39      	ldr	r1, [r7, #32]
 80020d4:	68f8      	ldr	r0, [r7, #12]
 80020d6:	f000 fcd0 	bl	8002a7a <I2C_WaitOnBTFFlagUntilTimeout>
 80020da:	4603      	mov	r3, r0
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d00d      	beq.n	80020fc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e4:	2b04      	cmp	r3, #4
 80020e6:	d107      	bne.n	80020f8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80020f6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80020f8:	2301      	movs	r3, #1
 80020fa:	e01a      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002100:	2b00      	cmp	r3, #0
 8002102:	d194      	bne.n	800202e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	681a      	ldr	r2, [r3, #0]
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002112:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002114:	68fb      	ldr	r3, [r7, #12]
 8002116:	2220      	movs	r2, #32
 8002118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	2200      	movs	r2, #0
 8002120:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	2200      	movs	r2, #0
 8002128:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800212c:	2300      	movs	r3, #0
 800212e:	e000      	b.n	8002132 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002130:	2302      	movs	r3, #2
  }
}
 8002132:	4618      	mov	r0, r3
 8002134:	3718      	adds	r7, #24
 8002136:	46bd      	mov	sp, r7
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	00100002 	.word	0x00100002
 8002140:	ffff0000 	.word	0xffff0000

08002144 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08c      	sub	sp, #48	; 0x30
 8002148:	af02      	add	r7, sp, #8
 800214a:	60f8      	str	r0, [r7, #12]
 800214c:	607a      	str	r2, [r7, #4]
 800214e:	461a      	mov	r2, r3
 8002150:	460b      	mov	r3, r1
 8002152:	817b      	strh	r3, [r7, #10]
 8002154:	4613      	mov	r3, r2
 8002156:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002158:	f7ff fab6 	bl	80016c8 <HAL_GetTick>
 800215c:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002164:	b2db      	uxtb	r3, r3
 8002166:	2b20      	cmp	r3, #32
 8002168:	f040 820b 	bne.w	8002582 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800216c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800216e:	9300      	str	r3, [sp, #0]
 8002170:	2319      	movs	r3, #25
 8002172:	2201      	movs	r2, #1
 8002174:	497c      	ldr	r1, [pc, #496]	; (8002368 <HAL_I2C_Master_Receive+0x224>)
 8002176:	68f8      	ldr	r0, [r7, #12]
 8002178:	f000 fb68 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 800217c:	4603      	mov	r3, r0
 800217e:	2b00      	cmp	r3, #0
 8002180:	d001      	beq.n	8002186 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002182:	2302      	movs	r3, #2
 8002184:	e1fe      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800218c:	2b01      	cmp	r3, #1
 800218e:	d101      	bne.n	8002194 <HAL_I2C_Master_Receive+0x50>
 8002190:	2302      	movs	r3, #2
 8002192:	e1f7      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
 8002194:	68fb      	ldr	r3, [r7, #12]
 8002196:	2201      	movs	r2, #1
 8002198:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800219c:	68fb      	ldr	r3, [r7, #12]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 0301 	and.w	r3, r3, #1
 80021a6:	2b01      	cmp	r3, #1
 80021a8:	d007      	beq.n	80021ba <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	681a      	ldr	r2, [r3, #0]
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	f042 0201 	orr.w	r2, r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	681b      	ldr	r3, [r3, #0]
 80021be:	681a      	ldr	r2, [r3, #0]
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80021c8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80021ca:	68fb      	ldr	r3, [r7, #12]
 80021cc:	2222      	movs	r2, #34	; 0x22
 80021ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	2210      	movs	r2, #16
 80021d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	2200      	movs	r2, #0
 80021de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	687a      	ldr	r2, [r7, #4]
 80021e4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	893a      	ldrh	r2, [r7, #8]
 80021ea:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f0:	b29a      	uxth	r2, r3
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	4a5c      	ldr	r2, [pc, #368]	; (800236c <HAL_I2C_Master_Receive+0x228>)
 80021fa:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80021fc:	8979      	ldrh	r1, [r7, #10]
 80021fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002200:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002202:	68f8      	ldr	r0, [r7, #12]
 8002204:	f000 fa54 	bl	80026b0 <I2C_MasterRequestRead>
 8002208:	4603      	mov	r3, r0
 800220a:	2b00      	cmp	r3, #0
 800220c:	d001      	beq.n	8002212 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 800220e:	2301      	movs	r3, #1
 8002210:	e1b8      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002216:	2b00      	cmp	r3, #0
 8002218:	d113      	bne.n	8002242 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800221a:	2300      	movs	r3, #0
 800221c:	623b      	str	r3, [r7, #32]
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	695b      	ldr	r3, [r3, #20]
 8002224:	623b      	str	r3, [r7, #32]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	699b      	ldr	r3, [r3, #24]
 800222c:	623b      	str	r3, [r7, #32]
 800222e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	681a      	ldr	r2, [r3, #0]
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800223e:	601a      	str	r2, [r3, #0]
 8002240:	e18c      	b.n	800255c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 8002242:	68fb      	ldr	r3, [r7, #12]
 8002244:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002246:	2b01      	cmp	r3, #1
 8002248:	d11b      	bne.n	8002282 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002258:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800225a:	2300      	movs	r3, #0
 800225c:	61fb      	str	r3, [r7, #28]
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	695b      	ldr	r3, [r3, #20]
 8002264:	61fb      	str	r3, [r7, #28]
 8002266:	68fb      	ldr	r3, [r7, #12]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	699b      	ldr	r3, [r3, #24]
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800227e:	601a      	str	r2, [r3, #0]
 8002280:	e16c      	b.n	800255c <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002286:	2b02      	cmp	r3, #2
 8002288:	d11b      	bne.n	80022c2 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	681a      	ldr	r2, [r3, #0]
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002298:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	681a      	ldr	r2, [r3, #0]
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80022a8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	68fb      	ldr	r3, [r7, #12]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	61bb      	str	r3, [r7, #24]
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	699b      	ldr	r3, [r3, #24]
 80022bc:	61bb      	str	r3, [r7, #24]
 80022be:	69bb      	ldr	r3, [r7, #24]
 80022c0:	e14c      	b.n	800255c <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80022c2:	68fb      	ldr	r3, [r7, #12]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68fb      	ldr	r3, [r7, #12]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80022d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80022d2:	2300      	movs	r3, #0
 80022d4:	617b      	str	r3, [r7, #20]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	695b      	ldr	r3, [r3, #20]
 80022dc:	617b      	str	r3, [r7, #20]
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	699b      	ldr	r3, [r3, #24]
 80022e4:	617b      	str	r3, [r7, #20]
 80022e6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80022e8:	e138      	b.n	800255c <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022ee:	2b03      	cmp	r3, #3
 80022f0:	f200 80f1 	bhi.w	80024d6 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80022f8:	2b01      	cmp	r3, #1
 80022fa:	d123      	bne.n	8002344 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022fc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022fe:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002300:	68f8      	ldr	r0, [r7, #12]
 8002302:	f000 fbfb 	bl	8002afc <I2C_WaitOnRXNEFlagUntilTimeout>
 8002306:	4603      	mov	r3, r0
 8002308:	2b00      	cmp	r3, #0
 800230a:	d001      	beq.n	8002310 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e139      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	691a      	ldr	r2, [r3, #16]
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	b2d2      	uxtb	r2, r2
 800231c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	68fb      	ldr	r3, [r7, #12]
 8002326:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800232c:	3b01      	subs	r3, #1
 800232e:	b29a      	uxth	r2, r3
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002338:	b29b      	uxth	r3, r3
 800233a:	3b01      	subs	r3, #1
 800233c:	b29a      	uxth	r2, r3
 800233e:	68fb      	ldr	r3, [r7, #12]
 8002340:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002342:	e10b      	b.n	800255c <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	2b02      	cmp	r3, #2
 800234a:	d14e      	bne.n	80023ea <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800234c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800234e:	9300      	str	r3, [sp, #0]
 8002350:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002352:	2200      	movs	r2, #0
 8002354:	4906      	ldr	r1, [pc, #24]	; (8002370 <HAL_I2C_Master_Receive+0x22c>)
 8002356:	68f8      	ldr	r0, [r7, #12]
 8002358:	f000 fa78 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 800235c:	4603      	mov	r3, r0
 800235e:	2b00      	cmp	r3, #0
 8002360:	d008      	beq.n	8002374 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002362:	2301      	movs	r3, #1
 8002364:	e10e      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
 8002366:	bf00      	nop
 8002368:	00100002 	.word	0x00100002
 800236c:	ffff0000 	.word	0xffff0000
 8002370:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	681a      	ldr	r2, [r3, #0]
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002382:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	691a      	ldr	r2, [r3, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800238e:	b2d2      	uxtb	r2, r2
 8002390:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002396:	1c5a      	adds	r2, r3, #1
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023a0:	3b01      	subs	r3, #1
 80023a2:	b29a      	uxth	r2, r3
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023a8:	68fb      	ldr	r3, [r7, #12]
 80023aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023ac:	b29b      	uxth	r3, r3
 80023ae:	3b01      	subs	r3, #1
 80023b0:	b29a      	uxth	r2, r3
 80023b2:	68fb      	ldr	r3, [r7, #12]
 80023b4:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	691a      	ldr	r2, [r3, #16]
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c0:	b2d2      	uxtb	r2, r2
 80023c2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023c8:	1c5a      	adds	r2, r3, #1
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80023d2:	3b01      	subs	r3, #1
 80023d4:	b29a      	uxth	r2, r3
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80023de:	b29b      	uxth	r3, r3
 80023e0:	3b01      	subs	r3, #1
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	855a      	strh	r2, [r3, #42]	; 0x2a
 80023e8:	e0b8      	b.n	800255c <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80023ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80023ec:	9300      	str	r3, [sp, #0]
 80023ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80023f0:	2200      	movs	r2, #0
 80023f2:	4966      	ldr	r1, [pc, #408]	; (800258c <HAL_I2C_Master_Receive+0x448>)
 80023f4:	68f8      	ldr	r0, [r7, #12]
 80023f6:	f000 fa29 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80023fa:	4603      	mov	r3, r0
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d001      	beq.n	8002404 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002400:	2301      	movs	r3, #1
 8002402:	e0bf      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002412:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	691a      	ldr	r2, [r3, #16]
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800241e:	b2d2      	uxtb	r2, r2
 8002420:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002426:	1c5a      	adds	r2, r3, #1
 8002428:	68fb      	ldr	r3, [r7, #12]
 800242a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002430:	3b01      	subs	r3, #1
 8002432:	b29a      	uxth	r2, r3
 8002434:	68fb      	ldr	r3, [r7, #12]
 8002436:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800243c:	b29b      	uxth	r3, r3
 800243e:	3b01      	subs	r3, #1
 8002440:	b29a      	uxth	r2, r3
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002446:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002448:	9300      	str	r3, [sp, #0]
 800244a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800244c:	2200      	movs	r2, #0
 800244e:	494f      	ldr	r1, [pc, #316]	; (800258c <HAL_I2C_Master_Receive+0x448>)
 8002450:	68f8      	ldr	r0, [r7, #12]
 8002452:	f000 f9fb 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002456:	4603      	mov	r3, r0
 8002458:	2b00      	cmp	r3, #0
 800245a:	d001      	beq.n	8002460 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 800245c:	2301      	movs	r3, #1
 800245e:	e091      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002460:	68fb      	ldr	r3, [r7, #12]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	681a      	ldr	r2, [r3, #0]
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800246e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	691a      	ldr	r2, [r3, #16]
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800247a:	b2d2      	uxtb	r2, r2
 800247c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002482:	1c5a      	adds	r2, r3, #1
 8002484:	68fb      	ldr	r3, [r7, #12]
 8002486:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800248c:	3b01      	subs	r3, #1
 800248e:	b29a      	uxth	r2, r3
 8002490:	68fb      	ldr	r3, [r7, #12]
 8002492:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002498:	b29b      	uxth	r3, r3
 800249a:	3b01      	subs	r3, #1
 800249c:	b29a      	uxth	r2, r3
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	691a      	ldr	r2, [r3, #16]
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024ac:	b2d2      	uxtb	r2, r2
 80024ae:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024b4:	1c5a      	adds	r2, r3, #1
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80024be:	3b01      	subs	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	68fb      	ldr	r3, [r7, #12]
 80024c4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80024ca:	b29b      	uxth	r3, r3
 80024cc:	3b01      	subs	r3, #1
 80024ce:	b29a      	uxth	r2, r3
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80024d4:	e042      	b.n	800255c <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80024d6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024d8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80024da:	68f8      	ldr	r0, [r7, #12]
 80024dc:	f000 fb0e 	bl	8002afc <I2C_WaitOnRXNEFlagUntilTimeout>
 80024e0:	4603      	mov	r3, r0
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d001      	beq.n	80024ea <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 80024e6:	2301      	movs	r3, #1
 80024e8:	e04c      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	691a      	ldr	r2, [r3, #16]
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f4:	b2d2      	uxtb	r2, r2
 80024f6:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024fc:	1c5a      	adds	r2, r3, #1
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002506:	3b01      	subs	r3, #1
 8002508:	b29a      	uxth	r2, r3
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002512:	b29b      	uxth	r3, r3
 8002514:	3b01      	subs	r3, #1
 8002516:	b29a      	uxth	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800251c:	68fb      	ldr	r3, [r7, #12]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	695b      	ldr	r3, [r3, #20]
 8002522:	f003 0304 	and.w	r3, r3, #4
 8002526:	2b04      	cmp	r3, #4
 8002528:	d118      	bne.n	800255c <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	691a      	ldr	r2, [r3, #16]
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	b2d2      	uxtb	r2, r2
 8002536:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800253c:	1c5a      	adds	r2, r3, #1
 800253e:	68fb      	ldr	r3, [r7, #12]
 8002540:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002546:	3b01      	subs	r3, #1
 8002548:	b29a      	uxth	r2, r3
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002552:	b29b      	uxth	r3, r3
 8002554:	3b01      	subs	r3, #1
 8002556:	b29a      	uxth	r2, r3
 8002558:	68fb      	ldr	r3, [r7, #12]
 800255a:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002560:	2b00      	cmp	r3, #0
 8002562:	f47f aec2 	bne.w	80022ea <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	2220      	movs	r2, #32
 800256a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	2200      	movs	r2, #0
 8002572:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 800257e:	2300      	movs	r3, #0
 8002580:	e000      	b.n	8002584 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8002582:	2302      	movs	r3, #2
  }
}
 8002584:	4618      	mov	r0, r3
 8002586:	3728      	adds	r7, #40	; 0x28
 8002588:	46bd      	mov	sp, r7
 800258a:	bd80      	pop	{r7, pc}
 800258c:	00010004 	.word	0x00010004

08002590 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(I2C_HandleTypeDef *hi2c)
{
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259e:	b2db      	uxtb	r3, r3
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	370c      	adds	r7, #12
 80025a4:	46bd      	mov	sp, r7
 80025a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025aa:	4770      	bx	lr

080025ac <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	b088      	sub	sp, #32
 80025b0:	af02      	add	r7, sp, #8
 80025b2:	60f8      	str	r0, [r7, #12]
 80025b4:	607a      	str	r2, [r7, #4]
 80025b6:	603b      	str	r3, [r7, #0]
 80025b8:	460b      	mov	r3, r1
 80025ba:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80025c2:	697b      	ldr	r3, [r7, #20]
 80025c4:	2b08      	cmp	r3, #8
 80025c6:	d006      	beq.n	80025d6 <I2C_MasterRequestWrite+0x2a>
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d003      	beq.n	80025d6 <I2C_MasterRequestWrite+0x2a>
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80025d4:	d108      	bne.n	80025e8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	681a      	ldr	r2, [r3, #0]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025e4:	601a      	str	r2, [r3, #0]
 80025e6:	e00b      	b.n	8002600 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025ec:	2b12      	cmp	r3, #18
 80025ee:	d107      	bne.n	8002600 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80025f0:	68fb      	ldr	r3, [r7, #12]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681a      	ldr	r2, [r3, #0]
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80025fe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002600:	683b      	ldr	r3, [r7, #0]
 8002602:	9300      	str	r3, [sp, #0]
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	2200      	movs	r2, #0
 8002608:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800260c:	68f8      	ldr	r0, [r7, #12]
 800260e:	f000 f91d 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002612:	4603      	mov	r3, r0
 8002614:	2b00      	cmp	r3, #0
 8002616:	d00d      	beq.n	8002634 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002622:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002626:	d103      	bne.n	8002630 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800262e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002630:	2303      	movs	r3, #3
 8002632:	e035      	b.n	80026a0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	691b      	ldr	r3, [r3, #16]
 8002638:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800263c:	d108      	bne.n	8002650 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800263e:	897b      	ldrh	r3, [r7, #10]
 8002640:	b2db      	uxtb	r3, r3
 8002642:	461a      	mov	r2, r3
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800264c:	611a      	str	r2, [r3, #16]
 800264e:	e01b      	b.n	8002688 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002650:	897b      	ldrh	r3, [r7, #10]
 8002652:	11db      	asrs	r3, r3, #7
 8002654:	b2db      	uxtb	r3, r3
 8002656:	f003 0306 	and.w	r3, r3, #6
 800265a:	b2db      	uxtb	r3, r3
 800265c:	f063 030f 	orn	r3, r3, #15
 8002660:	b2da      	uxtb	r2, r3
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002668:	683b      	ldr	r3, [r7, #0]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	490e      	ldr	r1, [pc, #56]	; (80026a8 <I2C_MasterRequestWrite+0xfc>)
 800266e:	68f8      	ldr	r0, [r7, #12]
 8002670:	f000 f943 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002674:	4603      	mov	r3, r0
 8002676:	2b00      	cmp	r3, #0
 8002678:	d001      	beq.n	800267e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e010      	b.n	80026a0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800267e:	897b      	ldrh	r3, [r7, #10]
 8002680:	b2da      	uxtb	r2, r3
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002688:	683b      	ldr	r3, [r7, #0]
 800268a:	687a      	ldr	r2, [r7, #4]
 800268c:	4907      	ldr	r1, [pc, #28]	; (80026ac <I2C_MasterRequestWrite+0x100>)
 800268e:	68f8      	ldr	r0, [r7, #12]
 8002690:	f000 f933 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002694:	4603      	mov	r3, r0
 8002696:	2b00      	cmp	r3, #0
 8002698:	d001      	beq.n	800269e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	e000      	b.n	80026a0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800269e:	2300      	movs	r3, #0
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}
 80026a8:	00010008 	.word	0x00010008
 80026ac:	00010002 	.word	0x00010002

080026b0 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b088      	sub	sp, #32
 80026b4:	af02      	add	r7, sp, #8
 80026b6:	60f8      	str	r0, [r7, #12]
 80026b8:	607a      	str	r2, [r7, #4]
 80026ba:	603b      	str	r3, [r7, #0]
 80026bc:	460b      	mov	r3, r1
 80026be:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80026c0:	68fb      	ldr	r3, [r7, #12]
 80026c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026c4:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	681a      	ldr	r2, [r3, #0]
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80026d4:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80026d6:	697b      	ldr	r3, [r7, #20]
 80026d8:	2b08      	cmp	r3, #8
 80026da:	d006      	beq.n	80026ea <I2C_MasterRequestRead+0x3a>
 80026dc:	697b      	ldr	r3, [r7, #20]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d003      	beq.n	80026ea <I2C_MasterRequestRead+0x3a>
 80026e2:	697b      	ldr	r3, [r7, #20]
 80026e4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80026e8:	d108      	bne.n	80026fc <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	681a      	ldr	r2, [r3, #0]
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80026f8:	601a      	str	r2, [r3, #0]
 80026fa:	e00b      	b.n	8002714 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002700:	2b11      	cmp	r3, #17
 8002702:	d107      	bne.n	8002714 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	68fb      	ldr	r3, [r7, #12]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002712:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	9300      	str	r3, [sp, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	2200      	movs	r2, #0
 800271c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002720:	68f8      	ldr	r0, [r7, #12]
 8002722:	f000 f893 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 8002726:	4603      	mov	r3, r0
 8002728:	2b00      	cmp	r3, #0
 800272a:	d00d      	beq.n	8002748 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002736:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800273a:	d103      	bne.n	8002744 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800273c:	68fb      	ldr	r3, [r7, #12]
 800273e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002742:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002744:	2303      	movs	r3, #3
 8002746:	e079      	b.n	800283c <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	691b      	ldr	r3, [r3, #16]
 800274c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002750:	d108      	bne.n	8002764 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8002752:	897b      	ldrh	r3, [r7, #10]
 8002754:	b2db      	uxtb	r3, r3
 8002756:	f043 0301 	orr.w	r3, r3, #1
 800275a:	b2da      	uxtb	r2, r3
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	611a      	str	r2, [r3, #16]
 8002762:	e05f      	b.n	8002824 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002764:	897b      	ldrh	r3, [r7, #10]
 8002766:	11db      	asrs	r3, r3, #7
 8002768:	b2db      	uxtb	r3, r3
 800276a:	f003 0306 	and.w	r3, r3, #6
 800276e:	b2db      	uxtb	r3, r3
 8002770:	f063 030f 	orn	r3, r3, #15
 8002774:	b2da      	uxtb	r2, r3
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	4930      	ldr	r1, [pc, #192]	; (8002844 <I2C_MasterRequestRead+0x194>)
 8002782:	68f8      	ldr	r0, [r7, #12]
 8002784:	f000 f8b9 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002788:	4603      	mov	r3, r0
 800278a:	2b00      	cmp	r3, #0
 800278c:	d001      	beq.n	8002792 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800278e:	2301      	movs	r3, #1
 8002790:	e054      	b.n	800283c <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002792:	897b      	ldrh	r3, [r7, #10]
 8002794:	b2da      	uxtb	r2, r3
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800279c:	683b      	ldr	r3, [r7, #0]
 800279e:	687a      	ldr	r2, [r7, #4]
 80027a0:	4929      	ldr	r1, [pc, #164]	; (8002848 <I2C_MasterRequestRead+0x198>)
 80027a2:	68f8      	ldr	r0, [r7, #12]
 80027a4:	f000 f8a9 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80027a8:	4603      	mov	r3, r0
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d001      	beq.n	80027b2 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e044      	b.n	800283c <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027b2:	2300      	movs	r3, #0
 80027b4:	613b      	str	r3, [r7, #16]
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	695b      	ldr	r3, [r3, #20]
 80027bc:	613b      	str	r3, [r7, #16]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681b      	ldr	r3, [r3, #0]
 80027c2:	699b      	ldr	r3, [r3, #24]
 80027c4:	613b      	str	r3, [r7, #16]
 80027c6:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80027c8:	68fb      	ldr	r3, [r7, #12]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681a      	ldr	r2, [r3, #0]
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027d6:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	9300      	str	r3, [sp, #0]
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	2200      	movs	r2, #0
 80027e0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80027e4:	68f8      	ldr	r0, [r7, #12]
 80027e6:	f000 f831 	bl	800284c <I2C_WaitOnFlagUntilTimeout>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d00d      	beq.n	800280c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80027fa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027fe:	d103      	bne.n	8002808 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002806:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8002808:	2303      	movs	r3, #3
 800280a:	e017      	b.n	800283c <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800280c:	897b      	ldrh	r3, [r7, #10]
 800280e:	11db      	asrs	r3, r3, #7
 8002810:	b2db      	uxtb	r3, r3
 8002812:	f003 0306 	and.w	r3, r3, #6
 8002816:	b2db      	uxtb	r3, r3
 8002818:	f063 030e 	orn	r3, r3, #14
 800281c:	b2da      	uxtb	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	687a      	ldr	r2, [r7, #4]
 8002828:	4907      	ldr	r1, [pc, #28]	; (8002848 <I2C_MasterRequestRead+0x198>)
 800282a:	68f8      	ldr	r0, [r7, #12]
 800282c:	f000 f865 	bl	80028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e000      	b.n	800283c <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 800283a:	2300      	movs	r3, #0
}
 800283c:	4618      	mov	r0, r3
 800283e:	3718      	adds	r7, #24
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	00010008 	.word	0x00010008
 8002848:	00010002 	.word	0x00010002

0800284c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800284c:	b580      	push	{r7, lr}
 800284e:	b084      	sub	sp, #16
 8002850:	af00      	add	r7, sp, #0
 8002852:	60f8      	str	r0, [r7, #12]
 8002854:	60b9      	str	r1, [r7, #8]
 8002856:	603b      	str	r3, [r7, #0]
 8002858:	4613      	mov	r3, r2
 800285a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800285c:	e025      	b.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002864:	d021      	beq.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002866:	f7fe ff2f 	bl	80016c8 <HAL_GetTick>
 800286a:	4602      	mov	r2, r0
 800286c:	69bb      	ldr	r3, [r7, #24]
 800286e:	1ad3      	subs	r3, r2, r3
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	429a      	cmp	r2, r3
 8002874:	d302      	bcc.n	800287c <I2C_WaitOnFlagUntilTimeout+0x30>
 8002876:	683b      	ldr	r3, [r7, #0]
 8002878:	2b00      	cmp	r3, #0
 800287a:	d116      	bne.n	80028aa <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2200      	movs	r2, #0
 8002880:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	2220      	movs	r2, #32
 8002886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	2200      	movs	r2, #0
 800288e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002892:	68fb      	ldr	r3, [r7, #12]
 8002894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002896:	f043 0220 	orr.w	r2, r3, #32
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	2200      	movs	r2, #0
 80028a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e023      	b.n	80028f2 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	0c1b      	lsrs	r3, r3, #16
 80028ae:	b2db      	uxtb	r3, r3
 80028b0:	2b01      	cmp	r3, #1
 80028b2:	d10d      	bne.n	80028d0 <I2C_WaitOnFlagUntilTimeout+0x84>
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	695b      	ldr	r3, [r3, #20]
 80028ba:	43da      	mvns	r2, r3
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	4013      	ands	r3, r2
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	bf0c      	ite	eq
 80028c6:	2301      	moveq	r3, #1
 80028c8:	2300      	movne	r3, #0
 80028ca:	b2db      	uxtb	r3, r3
 80028cc:	461a      	mov	r2, r3
 80028ce:	e00c      	b.n	80028ea <I2C_WaitOnFlagUntilTimeout+0x9e>
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699b      	ldr	r3, [r3, #24]
 80028d6:	43da      	mvns	r2, r3
 80028d8:	68bb      	ldr	r3, [r7, #8]
 80028da:	4013      	ands	r3, r2
 80028dc:	b29b      	uxth	r3, r3
 80028de:	2b00      	cmp	r3, #0
 80028e0:	bf0c      	ite	eq
 80028e2:	2301      	moveq	r3, #1
 80028e4:	2300      	movne	r3, #0
 80028e6:	b2db      	uxtb	r3, r3
 80028e8:	461a      	mov	r2, r3
 80028ea:	79fb      	ldrb	r3, [r7, #7]
 80028ec:	429a      	cmp	r2, r3
 80028ee:	d0b6      	beq.n	800285e <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80028f0:	2300      	movs	r3, #0
}
 80028f2:	4618      	mov	r0, r3
 80028f4:	3710      	adds	r7, #16
 80028f6:	46bd      	mov	sp, r7
 80028f8:	bd80      	pop	{r7, pc}

080028fa <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80028fa:	b580      	push	{r7, lr}
 80028fc:	b084      	sub	sp, #16
 80028fe:	af00      	add	r7, sp, #0
 8002900:	60f8      	str	r0, [r7, #12]
 8002902:	60b9      	str	r1, [r7, #8]
 8002904:	607a      	str	r2, [r7, #4]
 8002906:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002908:	e051      	b.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	695b      	ldr	r3, [r3, #20]
 8002910:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002914:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002918:	d123      	bne.n	8002962 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	681b      	ldr	r3, [r3, #0]
 800291e:	681a      	ldr	r2, [r3, #0]
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002928:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002932:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	2200      	movs	r2, #0
 8002938:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2220      	movs	r2, #32
 800293e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002942:	68fb      	ldr	r3, [r7, #12]
 8002944:	2200      	movs	r2, #0
 8002946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800294a:	68fb      	ldr	r3, [r7, #12]
 800294c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800294e:	f043 0204 	orr.w	r2, r3, #4
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	2200      	movs	r2, #0
 800295a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e046      	b.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002968:	d021      	beq.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800296a:	f7fe fead 	bl	80016c8 <HAL_GetTick>
 800296e:	4602      	mov	r2, r0
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	1ad3      	subs	r3, r2, r3
 8002974:	687a      	ldr	r2, [r7, #4]
 8002976:	429a      	cmp	r2, r3
 8002978:	d302      	bcc.n	8002980 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2b00      	cmp	r3, #0
 800297e:	d116      	bne.n	80029ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	2200      	movs	r2, #0
 8002984:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	2220      	movs	r2, #32
 800298a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	2200      	movs	r2, #0
 8002992:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002996:	68fb      	ldr	r3, [r7, #12]
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f043 0220 	orr.w	r2, r3, #32
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	2200      	movs	r2, #0
 80029a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e020      	b.n	80029f0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80029ae:	68bb      	ldr	r3, [r7, #8]
 80029b0:	0c1b      	lsrs	r3, r3, #16
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	d10c      	bne.n	80029d2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80029b8:	68fb      	ldr	r3, [r7, #12]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	695b      	ldr	r3, [r3, #20]
 80029be:	43da      	mvns	r2, r3
 80029c0:	68bb      	ldr	r3, [r7, #8]
 80029c2:	4013      	ands	r3, r2
 80029c4:	b29b      	uxth	r3, r3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	bf14      	ite	ne
 80029ca:	2301      	movne	r3, #1
 80029cc:	2300      	moveq	r3, #0
 80029ce:	b2db      	uxtb	r3, r3
 80029d0:	e00b      	b.n	80029ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	43da      	mvns	r2, r3
 80029da:	68bb      	ldr	r3, [r7, #8]
 80029dc:	4013      	ands	r3, r2
 80029de:	b29b      	uxth	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	bf14      	ite	ne
 80029e4:	2301      	movne	r3, #1
 80029e6:	2300      	moveq	r3, #0
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d18d      	bne.n	800290a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3710      	adds	r7, #16
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}

080029f8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b084      	sub	sp, #16
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a04:	e02d      	b.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a06:	68f8      	ldr	r0, [r7, #12]
 8002a08:	f000 f8ce 	bl	8002ba8 <I2C_IsAcknowledgeFailed>
 8002a0c:	4603      	mov	r3, r0
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d001      	beq.n	8002a16 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e02d      	b.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a1c:	d021      	beq.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002a1e:	f7fe fe53 	bl	80016c8 <HAL_GetTick>
 8002a22:	4602      	mov	r2, r0
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	1ad3      	subs	r3, r2, r3
 8002a28:	68ba      	ldr	r2, [r7, #8]
 8002a2a:	429a      	cmp	r2, r3
 8002a2c:	d302      	bcc.n	8002a34 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2b00      	cmp	r3, #0
 8002a32:	d116      	bne.n	8002a62 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	2200      	movs	r2, #0
 8002a38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2220      	movs	r2, #32
 8002a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a4e:	f043 0220 	orr.w	r2, r3, #32
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a56:	68fb      	ldr	r3, [r7, #12]
 8002a58:	2200      	movs	r2, #0
 8002a5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a5e:	2301      	movs	r3, #1
 8002a60:	e007      	b.n	8002a72 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002a62:	68fb      	ldr	r3, [r7, #12]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	695b      	ldr	r3, [r3, #20]
 8002a68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6c:	2b80      	cmp	r3, #128	; 0x80
 8002a6e:	d1ca      	bne.n	8002a06 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002a70:	2300      	movs	r3, #0
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3710      	adds	r7, #16
 8002a76:	46bd      	mov	sp, r7
 8002a78:	bd80      	pop	{r7, pc}

08002a7a <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002a7a:	b580      	push	{r7, lr}
 8002a7c:	b084      	sub	sp, #16
 8002a7e:	af00      	add	r7, sp, #0
 8002a80:	60f8      	str	r0, [r7, #12]
 8002a82:	60b9      	str	r1, [r7, #8]
 8002a84:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002a86:	e02d      	b.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002a88:	68f8      	ldr	r0, [r7, #12]
 8002a8a:	f000 f88d 	bl	8002ba8 <I2C_IsAcknowledgeFailed>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	d001      	beq.n	8002a98 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002a94:	2301      	movs	r3, #1
 8002a96:	e02d      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a9e:	d021      	beq.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002aa0:	f7fe fe12 	bl	80016c8 <HAL_GetTick>
 8002aa4:	4602      	mov	r2, r0
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	1ad3      	subs	r3, r2, r3
 8002aaa:	68ba      	ldr	r2, [r7, #8]
 8002aac:	429a      	cmp	r2, r3
 8002aae:	d302      	bcc.n	8002ab6 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d116      	bne.n	8002ae4 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	2220      	movs	r2, #32
 8002ac0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ac4:	68fb      	ldr	r3, [r7, #12]
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad0:	f043 0220 	orr.w	r2, r3, #32
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002ae0:	2301      	movs	r3, #1
 8002ae2:	e007      	b.n	8002af4 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	695b      	ldr	r3, [r3, #20]
 8002aea:	f003 0304 	and.w	r3, r3, #4
 8002aee:	2b04      	cmp	r3, #4
 8002af0:	d1ca      	bne.n	8002a88 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002af2:	2300      	movs	r3, #0
}
 8002af4:	4618      	mov	r0, r3
 8002af6:	3710      	adds	r7, #16
 8002af8:	46bd      	mov	sp, r7
 8002afa:	bd80      	pop	{r7, pc}

08002afc <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b084      	sub	sp, #16
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	60f8      	str	r0, [r7, #12]
 8002b04:	60b9      	str	r1, [r7, #8]
 8002b06:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b08:	e042      	b.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	695b      	ldr	r3, [r3, #20]
 8002b10:	f003 0310 	and.w	r3, r3, #16
 8002b14:	2b10      	cmp	r3, #16
 8002b16:	d119      	bne.n	8002b4c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	f06f 0210 	mvn.w	r2, #16
 8002b20:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	2220      	movs	r2, #32
 8002b2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	2200      	movs	r2, #0
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	2200      	movs	r2, #0
 8002b44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e029      	b.n	8002ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002b4c:	f7fe fdbc 	bl	80016c8 <HAL_GetTick>
 8002b50:	4602      	mov	r2, r0
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	1ad3      	subs	r3, r2, r3
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d302      	bcc.n	8002b62 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8002b5c:	68bb      	ldr	r3, [r7, #8]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d116      	bne.n	8002b90 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	2200      	movs	r2, #0
 8002b66:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002b68:	68fb      	ldr	r3, [r7, #12]
 8002b6a:	2220      	movs	r2, #32
 8002b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	2200      	movs	r2, #0
 8002b74:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b7c:	f043 0220 	orr.w	r2, r3, #32
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	2200      	movs	r2, #0
 8002b88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	e007      	b.n	8002ba0 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	695b      	ldr	r3, [r3, #20]
 8002b96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b9a:	2b40      	cmp	r3, #64	; 0x40
 8002b9c:	d1b5      	bne.n	8002b0a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8002b9e:	2300      	movs	r3, #0
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	3710      	adds	r7, #16
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bd80      	pop	{r7, pc}

08002ba8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002ba8:	b480      	push	{r7}
 8002baa:	b083      	sub	sp, #12
 8002bac:	af00      	add	r7, sp, #0
 8002bae:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	695b      	ldr	r3, [r3, #20]
 8002bb6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002bba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002bbe:	d11b      	bne.n	8002bf8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002bc8:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2220      	movs	r2, #32
 8002bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be4:	f043 0204 	orr.w	r2, r3, #4
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002bf4:	2301      	movs	r3, #1
 8002bf6:	e000      	b.n	8002bfa <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002bf8:	2300      	movs	r3, #0
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	370c      	adds	r7, #12
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <HAL_UART_MspInit>:
  *           - Peripheral's GPIO Configuration
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef *huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  GPIO_InitStruct;


  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable GPIO TX/RX clock */
  USARTx_TX_GPIO_CLK_ENABLE();
 8002c10:	2300      	movs	r3, #0
 8002c12:	613b      	str	r3, [r7, #16]
 8002c14:	4b23      	ldr	r3, [pc, #140]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c18:	4a22      	ldr	r2, [pc, #136]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c1a:	f043 0308 	orr.w	r3, r3, #8
 8002c1e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c20:	4b20      	ldr	r3, [pc, #128]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c24:	f003 0308 	and.w	r3, r3, #8
 8002c28:	613b      	str	r3, [r7, #16]
 8002c2a:	693b      	ldr	r3, [r7, #16]
  USARTx_RX_GPIO_CLK_ENABLE();
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	60fb      	str	r3, [r7, #12]
 8002c30:	4b1c      	ldr	r3, [pc, #112]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c34:	4a1b      	ldr	r2, [pc, #108]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c36:	f043 0308 	orr.w	r3, r3, #8
 8002c3a:	6313      	str	r3, [r2, #48]	; 0x30
 8002c3c:	4b19      	ldr	r3, [pc, #100]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c40:	f003 0308 	and.w	r3, r3, #8
 8002c44:	60fb      	str	r3, [r7, #12]
 8002c46:	68fb      	ldr	r3, [r7, #12]


  /* Enable USARTx clock */
  USARTx_CLK_ENABLE();
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60bb      	str	r3, [r7, #8]
 8002c4c:	4b15      	ldr	r3, [pc, #84]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c50:	4a14      	ldr	r2, [pc, #80]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c52:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002c56:	6413      	str	r3, [r2, #64]	; 0x40
 8002c58:	4b12      	ldr	r3, [pc, #72]	; (8002ca4 <HAL_UART_MspInit+0x9c>)
 8002c5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002c60:	60bb      	str	r3, [r7, #8]
 8002c62:	68bb      	ldr	r3, [r7, #8]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* UART TX GPIO pin configuration  */
  GPIO_InitStruct.Pin       = USARTx_TX_PIN;
 8002c64:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode      = GPIO_MODE_AF_PP;
 8002c6a:	2302      	movs	r3, #2
 8002c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull      = GPIO_PULLUP;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c72:	2303      	movs	r3, #3
 8002c74:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = USARTx_TX_AF;
 8002c76:	2307      	movs	r3, #7
 8002c78:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_TX_GPIO_PORT, &GPIO_InitStruct);
 8002c7a:	f107 0314 	add.w	r3, r7, #20
 8002c7e:	4619      	mov	r1, r3
 8002c80:	4809      	ldr	r0, [pc, #36]	; (8002ca8 <HAL_UART_MspInit+0xa0>)
 8002c82:	f7fe fe3f 	bl	8001904 <HAL_GPIO_Init>

  /* UART RX GPIO pin configuration  */
  GPIO_InitStruct.Pin = USARTx_RX_PIN;
 8002c86:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c8a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Alternate = USARTx_RX_AF;
 8002c8c:	2307      	movs	r3, #7
 8002c8e:	627b      	str	r3, [r7, #36]	; 0x24

  HAL_GPIO_Init(USARTx_RX_GPIO_PORT, &GPIO_InitStruct);
 8002c90:	f107 0314 	add.w	r3, r7, #20
 8002c94:	4619      	mov	r1, r3
 8002c96:	4804      	ldr	r0, [pc, #16]	; (8002ca8 <HAL_UART_MspInit+0xa0>)
 8002c98:	f7fe fe34 	bl	8001904 <HAL_GPIO_Init>
}
 8002c9c:	bf00      	nop
 8002c9e:	3728      	adds	r7, #40	; 0x28
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	bd80      	pop	{r7, pc}
 8002ca4:	40023800 	.word	0x40023800
 8002ca8:	40020c00 	.word	0x40020c00

08002cac <HAL_MspInit>:
  * @note   This function is called from HAL_Init() function to perform system
  *         level initialization (GPIOs, clock, DMA, interrupt).
  * @retval None
  */
void HAL_MspInit(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0

}
 8002cb0:	bf00      	nop
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb8:	4770      	bx	lr
	...

08002cbc <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b082      	sub	sp, #8
 8002cc0:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	603b      	str	r3, [r7, #0]
 8002cca:	4b20      	ldr	r3, [pc, #128]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002ccc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cce:	4a1f      	ldr	r2, [pc, #124]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002cd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002cd4:	6413      	str	r3, [r2, #64]	; 0x40
 8002cd6:	4b1d      	ldr	r3, [pc, #116]	; (8002d4c <HAL_PWREx_EnableOverDrive+0x90>)
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002cde:	603b      	str	r3, [r7, #0]
 8002ce0:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002ce2:	4b1b      	ldr	r3, [pc, #108]	; (8002d50 <HAL_PWREx_EnableOverDrive+0x94>)
 8002ce4:	2201      	movs	r2, #1
 8002ce6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ce8:	f7fe fcee 	bl	80016c8 <HAL_GetTick>
 8002cec:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002cee:	e009      	b.n	8002d04 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002cf0:	f7fe fcea 	bl	80016c8 <HAL_GetTick>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	1ad3      	subs	r3, r2, r3
 8002cfa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002cfe:	d901      	bls.n	8002d04 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8002d00:	2303      	movs	r3, #3
 8002d02:	e01f      	b.n	8002d44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002d04:	4b13      	ldr	r3, [pc, #76]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d06:	685b      	ldr	r3, [r3, #4]
 8002d08:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d0c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d10:	d1ee      	bne.n	8002cf0 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8002d12:	4b11      	ldr	r3, [pc, #68]	; (8002d58 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002d14:	2201      	movs	r2, #1
 8002d16:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002d18:	f7fe fcd6 	bl	80016c8 <HAL_GetTick>
 8002d1c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d1e:	e009      	b.n	8002d34 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002d20:	f7fe fcd2 	bl	80016c8 <HAL_GetTick>
 8002d24:	4602      	mov	r2, r0
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	1ad3      	subs	r3, r2, r3
 8002d2a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002d2e:	d901      	bls.n	8002d34 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8002d30:	2303      	movs	r3, #3
 8002d32:	e007      	b.n	8002d44 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002d34:	4b07      	ldr	r3, [pc, #28]	; (8002d54 <HAL_PWREx_EnableOverDrive+0x98>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002d40:	d1ee      	bne.n	8002d20 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
}
 8002d44:	4618      	mov	r0, r3
 8002d46:	3708      	adds	r7, #8
 8002d48:	46bd      	mov	sp, r7
 8002d4a:	bd80      	pop	{r7, pc}
 8002d4c:	40023800 	.word	0x40023800
 8002d50:	420e0040 	.word	0x420e0040
 8002d54:	40007000 	.word	0x40007000
 8002d58:	420e0044 	.word	0x420e0044

08002d5c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b086      	sub	sp, #24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e267      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	f003 0301 	and.w	r3, r3, #1
 8002d76:	2b00      	cmp	r3, #0
 8002d78:	d075      	beq.n	8002e66 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d7a:	4b88      	ldr	r3, [pc, #544]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	f003 030c 	and.w	r3, r3, #12
 8002d82:	2b04      	cmp	r3, #4
 8002d84:	d00c      	beq.n	8002da0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d86:	4b85      	ldr	r3, [pc, #532]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d112      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d92:	4b82      	ldr	r3, [pc, #520]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d9a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d9e:	d10b      	bne.n	8002db8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002da0:	4b7e      	ldr	r3, [pc, #504]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d05b      	beq.n	8002e64 <HAL_RCC_OscConfig+0x108>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d157      	bne.n	8002e64 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002db4:	2301      	movs	r3, #1
 8002db6:	e242      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002dc0:	d106      	bne.n	8002dd0 <HAL_RCC_OscConfig+0x74>
 8002dc2:	4b76      	ldr	r3, [pc, #472]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	4a75      	ldr	r2, [pc, #468]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002dcc:	6013      	str	r3, [r2, #0]
 8002dce:	e01d      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	685b      	ldr	r3, [r3, #4]
 8002dd4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x98>
 8002dda:	4b70      	ldr	r3, [pc, #448]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4a6f      	ldr	r2, [pc, #444]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002de4:	6013      	str	r3, [r2, #0]
 8002de6:	4b6d      	ldr	r3, [pc, #436]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a6c      	ldr	r2, [pc, #432]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002df0:	6013      	str	r3, [r2, #0]
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0xb0>
 8002df4:	4b69      	ldr	r3, [pc, #420]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a68      	ldr	r2, [pc, #416]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002dfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002dfe:	6013      	str	r3, [r2, #0]
 8002e00:	4b66      	ldr	r3, [pc, #408]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4a65      	ldr	r2, [pc, #404]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e06:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e0a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	685b      	ldr	r3, [r3, #4]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d013      	beq.n	8002e3c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e14:	f7fe fc58 	bl	80016c8 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e1a:	e008      	b.n	8002e2e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e1c:	f7fe fc54 	bl	80016c8 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	2b64      	cmp	r3, #100	; 0x64
 8002e28:	d901      	bls.n	8002e2e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002e2a:	2303      	movs	r3, #3
 8002e2c:	e207      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e2e:	4b5b      	ldr	r3, [pc, #364]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d0f0      	beq.n	8002e1c <HAL_RCC_OscConfig+0xc0>
 8002e3a:	e014      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002e3c:	f7fe fc44 	bl	80016c8 <HAL_GetTick>
 8002e40:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e42:	e008      	b.n	8002e56 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002e44:	f7fe fc40 	bl	80016c8 <HAL_GetTick>
 8002e48:	4602      	mov	r2, r0
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	1ad3      	subs	r3, r2, r3
 8002e4e:	2b64      	cmp	r3, #100	; 0x64
 8002e50:	d901      	bls.n	8002e56 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002e52:	2303      	movs	r3, #3
 8002e54:	e1f3      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002e56:	4b51      	ldr	r3, [pc, #324]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d1f0      	bne.n	8002e44 <HAL_RCC_OscConfig+0xe8>
 8002e62:	e000      	b.n	8002e66 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0302 	and.w	r3, r3, #2
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d063      	beq.n	8002f3a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e72:	4b4a      	ldr	r3, [pc, #296]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e74:	689b      	ldr	r3, [r3, #8]
 8002e76:	f003 030c 	and.w	r3, r3, #12
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d00b      	beq.n	8002e96 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e7e:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e80:	689b      	ldr	r3, [r3, #8]
 8002e82:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e86:	2b08      	cmp	r3, #8
 8002e88:	d11c      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e8a:	4b44      	ldr	r3, [pc, #272]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d116      	bne.n	8002ec4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e96:	4b41      	ldr	r3, [pc, #260]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f003 0302 	and.w	r3, r3, #2
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d005      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	68db      	ldr	r3, [r3, #12]
 8002ea6:	2b01      	cmp	r3, #1
 8002ea8:	d001      	beq.n	8002eae <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002eaa:	2301      	movs	r3, #1
 8002eac:	e1c7      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	691b      	ldr	r3, [r3, #16]
 8002eba:	00db      	lsls	r3, r3, #3
 8002ebc:	4937      	ldr	r1, [pc, #220]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002ec2:	e03a      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	68db      	ldr	r3, [r3, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d020      	beq.n	8002f0e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ecc:	4b34      	ldr	r3, [pc, #208]	; (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002ece:	2201      	movs	r2, #1
 8002ed0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ed2:	f7fe fbf9 	bl	80016c8 <HAL_GetTick>
 8002ed6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ed8:	e008      	b.n	8002eec <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eda:	f7fe fbf5 	bl	80016c8 <HAL_GetTick>
 8002ede:	4602      	mov	r2, r0
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1ad3      	subs	r3, r2, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d901      	bls.n	8002eec <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ee8:	2303      	movs	r3, #3
 8002eea:	e1a8      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002eec:	4b2b      	ldr	r3, [pc, #172]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f003 0302 	and.w	r3, r3, #2
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d0f0      	beq.n	8002eda <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ef8:	4b28      	ldr	r3, [pc, #160]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	00db      	lsls	r3, r3, #3
 8002f06:	4925      	ldr	r1, [pc, #148]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	600b      	str	r3, [r1, #0]
 8002f0c:	e015      	b.n	8002f3a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002f0e:	4b24      	ldr	r3, [pc, #144]	; (8002fa0 <HAL_RCC_OscConfig+0x244>)
 8002f10:	2200      	movs	r2, #0
 8002f12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f14:	f7fe fbd8 	bl	80016c8 <HAL_GetTick>
 8002f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f1a:	e008      	b.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002f1c:	f7fe fbd4 	bl	80016c8 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	693b      	ldr	r3, [r7, #16]
 8002f24:	1ad3      	subs	r3, r2, r3
 8002f26:	2b02      	cmp	r3, #2
 8002f28:	d901      	bls.n	8002f2e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002f2a:	2303      	movs	r3, #3
 8002f2c:	e187      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002f2e:	4b1b      	ldr	r3, [pc, #108]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 0302 	and.w	r3, r3, #2
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d1f0      	bne.n	8002f1c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0308 	and.w	r3, r3, #8
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d036      	beq.n	8002fb4 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	695b      	ldr	r3, [r3, #20]
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d016      	beq.n	8002f7c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002f4e:	4b15      	ldr	r3, [pc, #84]	; (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f50:	2201      	movs	r2, #1
 8002f52:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002f54:	f7fe fbb8 	bl	80016c8 <HAL_GetTick>
 8002f58:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f5a:	e008      	b.n	8002f6e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f5c:	f7fe fbb4 	bl	80016c8 <HAL_GetTick>
 8002f60:	4602      	mov	r2, r0
 8002f62:	693b      	ldr	r3, [r7, #16]
 8002f64:	1ad3      	subs	r3, r2, r3
 8002f66:	2b02      	cmp	r3, #2
 8002f68:	d901      	bls.n	8002f6e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002f6a:	2303      	movs	r3, #3
 8002f6c:	e167      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f6e:	4b0b      	ldr	r3, [pc, #44]	; (8002f9c <HAL_RCC_OscConfig+0x240>)
 8002f70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f72:	f003 0302 	and.w	r3, r3, #2
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d0f0      	beq.n	8002f5c <HAL_RCC_OscConfig+0x200>
 8002f7a:	e01b      	b.n	8002fb4 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f7c:	4b09      	ldr	r3, [pc, #36]	; (8002fa4 <HAL_RCC_OscConfig+0x248>)
 8002f7e:	2200      	movs	r2, #0
 8002f80:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f82:	f7fe fba1 	bl	80016c8 <HAL_GetTick>
 8002f86:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f88:	e00e      	b.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f8a:	f7fe fb9d 	bl	80016c8 <HAL_GetTick>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	693b      	ldr	r3, [r7, #16]
 8002f92:	1ad3      	subs	r3, r2, r3
 8002f94:	2b02      	cmp	r3, #2
 8002f96:	d907      	bls.n	8002fa8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	e150      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 8002f9c:	40023800 	.word	0x40023800
 8002fa0:	42470000 	.word	0x42470000
 8002fa4:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002fa8:	4b88      	ldr	r3, [pc, #544]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002faa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1ea      	bne.n	8002f8a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f003 0304 	and.w	r3, r3, #4
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	f000 8097 	beq.w	80030f0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002fc6:	4b81      	ldr	r3, [pc, #516]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d10f      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	60bb      	str	r3, [r7, #8]
 8002fd6:	4b7d      	ldr	r3, [pc, #500]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fda:	4a7c      	ldr	r2, [pc, #496]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fdc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fe0:	6413      	str	r3, [r2, #64]	; 0x40
 8002fe2:	4b7a      	ldr	r3, [pc, #488]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fe6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fea:	60bb      	str	r3, [r7, #8]
 8002fec:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff2:	4b77      	ldr	r3, [pc, #476]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d118      	bne.n	8003030 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002ffe:	4b74      	ldr	r3, [pc, #464]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	4a73      	ldr	r2, [pc, #460]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003004:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003008:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800300a:	f7fe fb5d 	bl	80016c8 <HAL_GetTick>
 800300e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003010:	e008      	b.n	8003024 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003012:	f7fe fb59 	bl	80016c8 <HAL_GetTick>
 8003016:	4602      	mov	r2, r0
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	1ad3      	subs	r3, r2, r3
 800301c:	2b02      	cmp	r3, #2
 800301e:	d901      	bls.n	8003024 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003020:	2303      	movs	r3, #3
 8003022:	e10c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003024:	4b6a      	ldr	r3, [pc, #424]	; (80031d0 <HAL_RCC_OscConfig+0x474>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800302c:	2b00      	cmp	r3, #0
 800302e:	d0f0      	beq.n	8003012 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689b      	ldr	r3, [r3, #8]
 8003034:	2b01      	cmp	r3, #1
 8003036:	d106      	bne.n	8003046 <HAL_RCC_OscConfig+0x2ea>
 8003038:	4b64      	ldr	r3, [pc, #400]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800303a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303c:	4a63      	ldr	r2, [pc, #396]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800303e:	f043 0301 	orr.w	r3, r3, #1
 8003042:	6713      	str	r3, [r2, #112]	; 0x70
 8003044:	e01c      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	689b      	ldr	r3, [r3, #8]
 800304a:	2b05      	cmp	r3, #5
 800304c:	d10c      	bne.n	8003068 <HAL_RCC_OscConfig+0x30c>
 800304e:	4b5f      	ldr	r3, [pc, #380]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003052:	4a5e      	ldr	r2, [pc, #376]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003054:	f043 0304 	orr.w	r3, r3, #4
 8003058:	6713      	str	r3, [r2, #112]	; 0x70
 800305a:	4b5c      	ldr	r3, [pc, #368]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800305c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800305e:	4a5b      	ldr	r2, [pc, #364]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003060:	f043 0301 	orr.w	r3, r3, #1
 8003064:	6713      	str	r3, [r2, #112]	; 0x70
 8003066:	e00b      	b.n	8003080 <HAL_RCC_OscConfig+0x324>
 8003068:	4b58      	ldr	r3, [pc, #352]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800306a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306c:	4a57      	ldr	r2, [pc, #348]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800306e:	f023 0301 	bic.w	r3, r3, #1
 8003072:	6713      	str	r3, [r2, #112]	; 0x70
 8003074:	4b55      	ldr	r3, [pc, #340]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003078:	4a54      	ldr	r2, [pc, #336]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 800307a:	f023 0304 	bic.w	r3, r3, #4
 800307e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	689b      	ldr	r3, [r3, #8]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d015      	beq.n	80030b4 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003088:	f7fe fb1e 	bl	80016c8 <HAL_GetTick>
 800308c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800308e:	e00a      	b.n	80030a6 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003090:	f7fe fb1a 	bl	80016c8 <HAL_GetTick>
 8003094:	4602      	mov	r2, r0
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	1ad3      	subs	r3, r2, r3
 800309a:	f241 3288 	movw	r2, #5000	; 0x1388
 800309e:	4293      	cmp	r3, r2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e0cb      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80030a6:	4b49      	ldr	r3, [pc, #292]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d0ee      	beq.n	8003090 <HAL_RCC_OscConfig+0x334>
 80030b2:	e014      	b.n	80030de <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030b4:	f7fe fb08 	bl	80016c8 <HAL_GetTick>
 80030b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030ba:	e00a      	b.n	80030d2 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80030bc:	f7fe fb04 	bl	80016c8 <HAL_GetTick>
 80030c0:	4602      	mov	r2, r0
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	1ad3      	subs	r3, r2, r3
 80030c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d901      	bls.n	80030d2 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80030ce:	2303      	movs	r3, #3
 80030d0:	e0b5      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80030d2:	4b3e      	ldr	r3, [pc, #248]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80030d6:	f003 0302 	and.w	r3, r3, #2
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d1ee      	bne.n	80030bc <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80030de:	7dfb      	ldrb	r3, [r7, #23]
 80030e0:	2b01      	cmp	r3, #1
 80030e2:	d105      	bne.n	80030f0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80030e4:	4b39      	ldr	r3, [pc, #228]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030e8:	4a38      	ldr	r2, [pc, #224]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80030ee:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	699b      	ldr	r3, [r3, #24]
 80030f4:	2b00      	cmp	r3, #0
 80030f6:	f000 80a1 	beq.w	800323c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80030fa:	4b34      	ldr	r3, [pc, #208]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80030fc:	689b      	ldr	r3, [r3, #8]
 80030fe:	f003 030c 	and.w	r3, r3, #12
 8003102:	2b08      	cmp	r3, #8
 8003104:	d05c      	beq.n	80031c0 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699b      	ldr	r3, [r3, #24]
 800310a:	2b02      	cmp	r3, #2
 800310c:	d141      	bne.n	8003192 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800310e:	4b31      	ldr	r3, [pc, #196]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003110:	2200      	movs	r2, #0
 8003112:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003114:	f7fe fad8 	bl	80016c8 <HAL_GetTick>
 8003118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800311a:	e008      	b.n	800312e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800311c:	f7fe fad4 	bl	80016c8 <HAL_GetTick>
 8003120:	4602      	mov	r2, r0
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	1ad3      	subs	r3, r2, r3
 8003126:	2b02      	cmp	r3, #2
 8003128:	d901      	bls.n	800312e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800312a:	2303      	movs	r3, #3
 800312c:	e087      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800312e:	4b27      	ldr	r3, [pc, #156]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003136:	2b00      	cmp	r3, #0
 8003138:	d1f0      	bne.n	800311c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	69da      	ldr	r2, [r3, #28]
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	6a1b      	ldr	r3, [r3, #32]
 8003142:	431a      	orrs	r2, r3
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003148:	019b      	lsls	r3, r3, #6
 800314a:	431a      	orrs	r2, r3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003150:	085b      	lsrs	r3, r3, #1
 8003152:	3b01      	subs	r3, #1
 8003154:	041b      	lsls	r3, r3, #16
 8003156:	431a      	orrs	r2, r3
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315c:	061b      	lsls	r3, r3, #24
 800315e:	491b      	ldr	r1, [pc, #108]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003160:	4313      	orrs	r3, r2
 8003162:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003164:	4b1b      	ldr	r3, [pc, #108]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003166:	2201      	movs	r2, #1
 8003168:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800316a:	f7fe faad 	bl	80016c8 <HAL_GetTick>
 800316e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003170:	e008      	b.n	8003184 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003172:	f7fe faa9 	bl	80016c8 <HAL_GetTick>
 8003176:	4602      	mov	r2, r0
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	1ad3      	subs	r3, r2, r3
 800317c:	2b02      	cmp	r3, #2
 800317e:	d901      	bls.n	8003184 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003180:	2303      	movs	r3, #3
 8003182:	e05c      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003184:	4b11      	ldr	r3, [pc, #68]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800318c:	2b00      	cmp	r3, #0
 800318e:	d0f0      	beq.n	8003172 <HAL_RCC_OscConfig+0x416>
 8003190:	e054      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003192:	4b10      	ldr	r3, [pc, #64]	; (80031d4 <HAL_RCC_OscConfig+0x478>)
 8003194:	2200      	movs	r2, #0
 8003196:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003198:	f7fe fa96 	bl	80016c8 <HAL_GetTick>
 800319c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800319e:	e008      	b.n	80031b2 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80031a0:	f7fe fa92 	bl	80016c8 <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	693b      	ldr	r3, [r7, #16]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	2b02      	cmp	r3, #2
 80031ac:	d901      	bls.n	80031b2 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80031ae:	2303      	movs	r3, #3
 80031b0:	e045      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031b2:	4b06      	ldr	r3, [pc, #24]	; (80031cc <HAL_RCC_OscConfig+0x470>)
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d1f0      	bne.n	80031a0 <HAL_RCC_OscConfig+0x444>
 80031be:	e03d      	b.n	800323c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	699b      	ldr	r3, [r3, #24]
 80031c4:	2b01      	cmp	r3, #1
 80031c6:	d107      	bne.n	80031d8 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80031c8:	2301      	movs	r3, #1
 80031ca:	e038      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
 80031cc:	40023800 	.word	0x40023800
 80031d0:	40007000 	.word	0x40007000
 80031d4:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80031d8:	4b1b      	ldr	r3, [pc, #108]	; (8003248 <HAL_RCC_OscConfig+0x4ec>)
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	699b      	ldr	r3, [r3, #24]
 80031e2:	2b01      	cmp	r3, #1
 80031e4:	d028      	beq.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031e6:	68fb      	ldr	r3, [r7, #12]
 80031e8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80031f0:	429a      	cmp	r2, r3
 80031f2:	d121      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80031fe:	429a      	cmp	r2, r3
 8003200:	d11a      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003208:	4013      	ands	r3, r2
 800320a:	687a      	ldr	r2, [r7, #4]
 800320c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800320e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003210:	4293      	cmp	r3, r2
 8003212:	d111      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800321e:	085b      	lsrs	r3, r3, #1
 8003220:	3b01      	subs	r3, #1
 8003222:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003224:	429a      	cmp	r2, r3
 8003226:	d107      	bne.n	8003238 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003232:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003234:	429a      	cmp	r2, r3
 8003236:	d001      	beq.n	800323c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003238:	2301      	movs	r3, #1
 800323a:	e000      	b.n	800323e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800323c:	2300      	movs	r3, #0
}
 800323e:	4618      	mov	r0, r3
 8003240:	3718      	adds	r7, #24
 8003242:	46bd      	mov	sp, r7
 8003244:	bd80      	pop	{r7, pc}
 8003246:	bf00      	nop
 8003248:	40023800 	.word	0x40023800

0800324c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b084      	sub	sp, #16
 8003250:	af00      	add	r7, sp, #0
 8003252:	6078      	str	r0, [r7, #4]
 8003254:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2b00      	cmp	r3, #0
 800325a:	d101      	bne.n	8003260 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800325c:	2301      	movs	r3, #1
 800325e:	e0cc      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003260:	4b68      	ldr	r3, [pc, #416]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f003 030f 	and.w	r3, r3, #15
 8003268:	683a      	ldr	r2, [r7, #0]
 800326a:	429a      	cmp	r2, r3
 800326c:	d90c      	bls.n	8003288 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800326e:	4b65      	ldr	r3, [pc, #404]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003270:	683a      	ldr	r2, [r7, #0]
 8003272:	b2d2      	uxtb	r2, r2
 8003274:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003276:	4b63      	ldr	r3, [pc, #396]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	683a      	ldr	r2, [r7, #0]
 8003280:	429a      	cmp	r2, r3
 8003282:	d001      	beq.n	8003288 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e0b8      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	f003 0302 	and.w	r3, r3, #2
 8003290:	2b00      	cmp	r3, #0
 8003292:	d020      	beq.n	80032d6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	f003 0304 	and.w	r3, r3, #4
 800329c:	2b00      	cmp	r3, #0
 800329e:	d005      	beq.n	80032ac <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80032a0:	4b59      	ldr	r3, [pc, #356]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a2:	689b      	ldr	r3, [r3, #8]
 80032a4:	4a58      	ldr	r2, [pc, #352]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032a6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80032aa:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	f003 0308 	and.w	r3, r3, #8
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d005      	beq.n	80032c4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80032b8:	4b53      	ldr	r3, [pc, #332]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ba:	689b      	ldr	r3, [r3, #8]
 80032bc:	4a52      	ldr	r2, [pc, #328]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032be:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80032c2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80032c4:	4b50      	ldr	r3, [pc, #320]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	494d      	ldr	r1, [pc, #308]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032d2:	4313      	orrs	r3, r2
 80032d4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0301 	and.w	r3, r3, #1
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d044      	beq.n	800336c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	685b      	ldr	r3, [r3, #4]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d107      	bne.n	80032fa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032ea:	4b47      	ldr	r3, [pc, #284]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d119      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e07f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	685b      	ldr	r3, [r3, #4]
 80032fe:	2b02      	cmp	r3, #2
 8003300:	d003      	beq.n	800330a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003306:	2b03      	cmp	r3, #3
 8003308:	d107      	bne.n	800331a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800330a:	4b3f      	ldr	r3, [pc, #252]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003312:	2b00      	cmp	r3, #0
 8003314:	d109      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003316:	2301      	movs	r3, #1
 8003318:	e06f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800331a:	4b3b      	ldr	r3, [pc, #236]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0302 	and.w	r3, r3, #2
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e067      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800332a:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800332c:	689b      	ldr	r3, [r3, #8]
 800332e:	f023 0203 	bic.w	r2, r3, #3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	4934      	ldr	r1, [pc, #208]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 8003338:	4313      	orrs	r3, r2
 800333a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800333c:	f7fe f9c4 	bl	80016c8 <HAL_GetTick>
 8003340:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003342:	e00a      	b.n	800335a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003344:	f7fe f9c0 	bl	80016c8 <HAL_GetTick>
 8003348:	4602      	mov	r2, r0
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	1ad3      	subs	r3, r2, r3
 800334e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003352:	4293      	cmp	r3, r2
 8003354:	d901      	bls.n	800335a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e04f      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800335a:	4b2b      	ldr	r3, [pc, #172]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 800335c:	689b      	ldr	r3, [r3, #8]
 800335e:	f003 020c 	and.w	r2, r3, #12
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	009b      	lsls	r3, r3, #2
 8003368:	429a      	cmp	r2, r3
 800336a:	d1eb      	bne.n	8003344 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800336c:	4b25      	ldr	r3, [pc, #148]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f003 030f 	and.w	r3, r3, #15
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d20c      	bcs.n	8003394 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800337a:	4b22      	ldr	r3, [pc, #136]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 800337c:	683a      	ldr	r2, [r7, #0]
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003382:	4b20      	ldr	r3, [pc, #128]	; (8003404 <HAL_RCC_ClockConfig+0x1b8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	683a      	ldr	r2, [r7, #0]
 800338c:	429a      	cmp	r2, r3
 800338e:	d001      	beq.n	8003394 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003390:	2301      	movs	r3, #1
 8003392:	e032      	b.n	80033fa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f003 0304 	and.w	r3, r3, #4
 800339c:	2b00      	cmp	r3, #0
 800339e:	d008      	beq.n	80033b2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80033a0:	4b19      	ldr	r3, [pc, #100]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033a2:	689b      	ldr	r3, [r3, #8]
 80033a4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	4916      	ldr	r1, [pc, #88]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ae:	4313      	orrs	r3, r2
 80033b0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f003 0308 	and.w	r3, r3, #8
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d009      	beq.n	80033d2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80033be:	4b12      	ldr	r3, [pc, #72]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	691b      	ldr	r3, [r3, #16]
 80033ca:	00db      	lsls	r3, r3, #3
 80033cc:	490e      	ldr	r1, [pc, #56]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033ce:	4313      	orrs	r3, r2
 80033d0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80033d2:	f000 f821 	bl	8003418 <HAL_RCC_GetSysClockFreq>
 80033d6:	4602      	mov	r2, r0
 80033d8:	4b0b      	ldr	r3, [pc, #44]	; (8003408 <HAL_RCC_ClockConfig+0x1bc>)
 80033da:	689b      	ldr	r3, [r3, #8]
 80033dc:	091b      	lsrs	r3, r3, #4
 80033de:	f003 030f 	and.w	r3, r3, #15
 80033e2:	490a      	ldr	r1, [pc, #40]	; (800340c <HAL_RCC_ClockConfig+0x1c0>)
 80033e4:	5ccb      	ldrb	r3, [r1, r3]
 80033e6:	fa22 f303 	lsr.w	r3, r2, r3
 80033ea:	4a09      	ldr	r2, [pc, #36]	; (8003410 <HAL_RCC_ClockConfig+0x1c4>)
 80033ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80033ee:	4b09      	ldr	r3, [pc, #36]	; (8003414 <HAL_RCC_ClockConfig+0x1c8>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4618      	mov	r0, r3
 80033f4:	f7fe f924 	bl	8001640 <HAL_InitTick>

  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3710      	adds	r7, #16
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023c00 	.word	0x40023c00
 8003408:	40023800 	.word	0x40023800
 800340c:	08004f44 	.word	0x08004f44
 8003410:	200000d0 	.word	0x200000d0
 8003414:	200000d4 	.word	0x200000d4

08003418 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003418:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800341c:	b094      	sub	sp, #80	; 0x50
 800341e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003420:	2300      	movs	r3, #0
 8003422:	647b      	str	r3, [r7, #68]	; 0x44
 8003424:	2300      	movs	r3, #0
 8003426:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003428:	2300      	movs	r3, #0
 800342a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 800342c:	2300      	movs	r3, #0
 800342e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003430:	4b79      	ldr	r3, [pc, #484]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	f003 030c 	and.w	r3, r3, #12
 8003438:	2b08      	cmp	r3, #8
 800343a:	d00d      	beq.n	8003458 <HAL_RCC_GetSysClockFreq+0x40>
 800343c:	2b08      	cmp	r3, #8
 800343e:	f200 80e1 	bhi.w	8003604 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003442:	2b00      	cmp	r3, #0
 8003444:	d002      	beq.n	800344c <HAL_RCC_GetSysClockFreq+0x34>
 8003446:	2b04      	cmp	r3, #4
 8003448:	d003      	beq.n	8003452 <HAL_RCC_GetSysClockFreq+0x3a>
 800344a:	e0db      	b.n	8003604 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800344c:	4b73      	ldr	r3, [pc, #460]	; (800361c <HAL_RCC_GetSysClockFreq+0x204>)
 800344e:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003450:	e0db      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003452:	4b73      	ldr	r3, [pc, #460]	; (8003620 <HAL_RCC_GetSysClockFreq+0x208>)
 8003454:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003456:	e0d8      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003458:	4b6f      	ldr	r3, [pc, #444]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003460:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003462:	4b6d      	ldr	r3, [pc, #436]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003464:	685b      	ldr	r3, [r3, #4]
 8003466:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800346a:	2b00      	cmp	r3, #0
 800346c:	d063      	beq.n	8003536 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800346e:	4b6a      	ldr	r3, [pc, #424]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	099b      	lsrs	r3, r3, #6
 8003474:	2200      	movs	r2, #0
 8003476:	63bb      	str	r3, [r7, #56]	; 0x38
 8003478:	63fa      	str	r2, [r7, #60]	; 0x3c
 800347a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800347c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003480:	633b      	str	r3, [r7, #48]	; 0x30
 8003482:	2300      	movs	r3, #0
 8003484:	637b      	str	r3, [r7, #52]	; 0x34
 8003486:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800348a:	4622      	mov	r2, r4
 800348c:	462b      	mov	r3, r5
 800348e:	f04f 0000 	mov.w	r0, #0
 8003492:	f04f 0100 	mov.w	r1, #0
 8003496:	0159      	lsls	r1, r3, #5
 8003498:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800349c:	0150      	lsls	r0, r2, #5
 800349e:	4602      	mov	r2, r0
 80034a0:	460b      	mov	r3, r1
 80034a2:	4621      	mov	r1, r4
 80034a4:	1a51      	subs	r1, r2, r1
 80034a6:	6139      	str	r1, [r7, #16]
 80034a8:	4629      	mov	r1, r5
 80034aa:	eb63 0301 	sbc.w	r3, r3, r1
 80034ae:	617b      	str	r3, [r7, #20]
 80034b0:	f04f 0200 	mov.w	r2, #0
 80034b4:	f04f 0300 	mov.w	r3, #0
 80034b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80034bc:	4659      	mov	r1, fp
 80034be:	018b      	lsls	r3, r1, #6
 80034c0:	4651      	mov	r1, sl
 80034c2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80034c6:	4651      	mov	r1, sl
 80034c8:	018a      	lsls	r2, r1, #6
 80034ca:	4651      	mov	r1, sl
 80034cc:	ebb2 0801 	subs.w	r8, r2, r1
 80034d0:	4659      	mov	r1, fp
 80034d2:	eb63 0901 	sbc.w	r9, r3, r1
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	f04f 0300 	mov.w	r3, #0
 80034de:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80034e2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80034e6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80034ea:	4690      	mov	r8, r2
 80034ec:	4699      	mov	r9, r3
 80034ee:	4623      	mov	r3, r4
 80034f0:	eb18 0303 	adds.w	r3, r8, r3
 80034f4:	60bb      	str	r3, [r7, #8]
 80034f6:	462b      	mov	r3, r5
 80034f8:	eb49 0303 	adc.w	r3, r9, r3
 80034fc:	60fb      	str	r3, [r7, #12]
 80034fe:	f04f 0200 	mov.w	r2, #0
 8003502:	f04f 0300 	mov.w	r3, #0
 8003506:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800350a:	4629      	mov	r1, r5
 800350c:	024b      	lsls	r3, r1, #9
 800350e:	4621      	mov	r1, r4
 8003510:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003514:	4621      	mov	r1, r4
 8003516:	024a      	lsls	r2, r1, #9
 8003518:	4610      	mov	r0, r2
 800351a:	4619      	mov	r1, r3
 800351c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800351e:	2200      	movs	r2, #0
 8003520:	62bb      	str	r3, [r7, #40]	; 0x28
 8003522:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003524:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003528:	f7fc feb2 	bl	8000290 <__aeabi_uldivmod>
 800352c:	4602      	mov	r2, r0
 800352e:	460b      	mov	r3, r1
 8003530:	4613      	mov	r3, r2
 8003532:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003534:	e058      	b.n	80035e8 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003536:	4b38      	ldr	r3, [pc, #224]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	099b      	lsrs	r3, r3, #6
 800353c:	2200      	movs	r2, #0
 800353e:	4618      	mov	r0, r3
 8003540:	4611      	mov	r1, r2
 8003542:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003546:	623b      	str	r3, [r7, #32]
 8003548:	2300      	movs	r3, #0
 800354a:	627b      	str	r3, [r7, #36]	; 0x24
 800354c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003550:	4642      	mov	r2, r8
 8003552:	464b      	mov	r3, r9
 8003554:	f04f 0000 	mov.w	r0, #0
 8003558:	f04f 0100 	mov.w	r1, #0
 800355c:	0159      	lsls	r1, r3, #5
 800355e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003562:	0150      	lsls	r0, r2, #5
 8003564:	4602      	mov	r2, r0
 8003566:	460b      	mov	r3, r1
 8003568:	4641      	mov	r1, r8
 800356a:	ebb2 0a01 	subs.w	sl, r2, r1
 800356e:	4649      	mov	r1, r9
 8003570:	eb63 0b01 	sbc.w	fp, r3, r1
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003580:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003584:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003588:	ebb2 040a 	subs.w	r4, r2, sl
 800358c:	eb63 050b 	sbc.w	r5, r3, fp
 8003590:	f04f 0200 	mov.w	r2, #0
 8003594:	f04f 0300 	mov.w	r3, #0
 8003598:	00eb      	lsls	r3, r5, #3
 800359a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800359e:	00e2      	lsls	r2, r4, #3
 80035a0:	4614      	mov	r4, r2
 80035a2:	461d      	mov	r5, r3
 80035a4:	4643      	mov	r3, r8
 80035a6:	18e3      	adds	r3, r4, r3
 80035a8:	603b      	str	r3, [r7, #0]
 80035aa:	464b      	mov	r3, r9
 80035ac:	eb45 0303 	adc.w	r3, r5, r3
 80035b0:	607b      	str	r3, [r7, #4]
 80035b2:	f04f 0200 	mov.w	r2, #0
 80035b6:	f04f 0300 	mov.w	r3, #0
 80035ba:	e9d7 4500 	ldrd	r4, r5, [r7]
 80035be:	4629      	mov	r1, r5
 80035c0:	028b      	lsls	r3, r1, #10
 80035c2:	4621      	mov	r1, r4
 80035c4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80035c8:	4621      	mov	r1, r4
 80035ca:	028a      	lsls	r2, r1, #10
 80035cc:	4610      	mov	r0, r2
 80035ce:	4619      	mov	r1, r3
 80035d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80035d2:	2200      	movs	r2, #0
 80035d4:	61bb      	str	r3, [r7, #24]
 80035d6:	61fa      	str	r2, [r7, #28]
 80035d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80035dc:	f7fc fe58 	bl	8000290 <__aeabi_uldivmod>
 80035e0:	4602      	mov	r2, r0
 80035e2:	460b      	mov	r3, r1
 80035e4:	4613      	mov	r3, r2
 80035e6:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80035e8:	4b0b      	ldr	r3, [pc, #44]	; (8003618 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ea:	685b      	ldr	r3, [r3, #4]
 80035ec:	0c1b      	lsrs	r3, r3, #16
 80035ee:	f003 0303 	and.w	r3, r3, #3
 80035f2:	3301      	adds	r3, #1
 80035f4:	005b      	lsls	r3, r3, #1
 80035f6:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80035f8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80035fa:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80035fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003600:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003602:	e002      	b.n	800360a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003604:	4b05      	ldr	r3, [pc, #20]	; (800361c <HAL_RCC_GetSysClockFreq+0x204>)
 8003606:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003608:	bf00      	nop
    }
  }
  return sysclockfreq;
 800360a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800360c:	4618      	mov	r0, r3
 800360e:	3750      	adds	r7, #80	; 0x50
 8003610:	46bd      	mov	sp, r7
 8003612:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003616:	bf00      	nop
 8003618:	40023800 	.word	0x40023800
 800361c:	00f42400 	.word	0x00f42400
 8003620:	007a1200 	.word	0x007a1200

08003624 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003624:	b480      	push	{r7}
 8003626:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003628:	4b03      	ldr	r3, [pc, #12]	; (8003638 <HAL_RCC_GetHCLKFreq+0x14>)
 800362a:	681b      	ldr	r3, [r3, #0]
}
 800362c:	4618      	mov	r0, r3
 800362e:	46bd      	mov	sp, r7
 8003630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003634:	4770      	bx	lr
 8003636:	bf00      	nop
 8003638:	200000d0 	.word	0x200000d0

0800363c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800363c:	b580      	push	{r7, lr}
 800363e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003640:	f7ff fff0 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 8003644:	4602      	mov	r2, r0
 8003646:	4b05      	ldr	r3, [pc, #20]	; (800365c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	0a9b      	lsrs	r3, r3, #10
 800364c:	f003 0307 	and.w	r3, r3, #7
 8003650:	4903      	ldr	r1, [pc, #12]	; (8003660 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003652:	5ccb      	ldrb	r3, [r1, r3]
 8003654:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003658:	4618      	mov	r0, r3
 800365a:	bd80      	pop	{r7, pc}
 800365c:	40023800 	.word	0x40023800
 8003660:	08004f54 	.word	0x08004f54

08003664 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003664:	b580      	push	{r7, lr}
 8003666:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003668:	f7ff ffdc 	bl	8003624 <HAL_RCC_GetHCLKFreq>
 800366c:	4602      	mov	r2, r0
 800366e:	4b05      	ldr	r3, [pc, #20]	; (8003684 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	0b5b      	lsrs	r3, r3, #13
 8003674:	f003 0307 	and.w	r3, r3, #7
 8003678:	4903      	ldr	r1, [pc, #12]	; (8003688 <HAL_RCC_GetPCLK2Freq+0x24>)
 800367a:	5ccb      	ldrb	r3, [r1, r3]
 800367c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003680:	4618      	mov	r0, r3
 8003682:	bd80      	pop	{r7, pc}
 8003684:	40023800 	.word	0x40023800
 8003688:	08004f54 	.word	0x08004f54

0800368c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b082      	sub	sp, #8
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d101      	bne.n	800369e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800369a:	2301      	movs	r3, #1
 800369c:	e083      	b.n	80037a6 <HAL_SPI_Init+0x11a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d108      	bne.n	80036b8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	685b      	ldr	r3, [r3, #4]
 80036aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80036ae:	d009      	beq.n	80036c4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	61da      	str	r2, [r3, #28]
 80036b6:	e005      	b.n	80036c4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2200      	movs	r2, #0
 80036c2:	615a      	str	r2, [r3, #20]
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80036ca:	b2db      	uxtb	r3, r3
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d106      	bne.n	80036de <HAL_SPI_Init+0x52>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	2200      	movs	r2, #0
 80036d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036d8:	6878      	ldr	r0, [r7, #4]
 80036da:	f7fd fb47 	bl	8000d6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	2202      	movs	r2, #2
 80036e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	681a      	ldr	r2, [r3, #0]
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036f4:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	685b      	ldr	r3, [r3, #4]
 80036fa:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	689b      	ldr	r3, [r3, #8]
 8003702:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003706:	431a      	orrs	r2, r3
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003710:	431a      	orrs	r2, r3
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	691b      	ldr	r3, [r3, #16]
 8003716:	f003 0302 	and.w	r3, r3, #2
 800371a:	431a      	orrs	r2, r3
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	695b      	ldr	r3, [r3, #20]
 8003720:	f003 0301 	and.w	r3, r3, #1
 8003724:	431a      	orrs	r2, r3
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	699b      	ldr	r3, [r3, #24]
 800372a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800372e:	431a      	orrs	r2, r3
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	69db      	ldr	r3, [r3, #28]
 8003734:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003738:	431a      	orrs	r2, r3
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6a1b      	ldr	r3, [r3, #32]
 800373e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003742:	ea42 0103 	orr.w	r1, r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800374a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	430a      	orrs	r2, r1
 8003754:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	699b      	ldr	r3, [r3, #24]
 800375a:	0c1b      	lsrs	r3, r3, #16
 800375c:	f003 0104 	and.w	r1, r3, #4
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003764:	f003 0210 	and.w	r2, r3, #16
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	430a      	orrs	r2, r1
 800376e:	605a      	str	r2, [r3, #4]

#if (USE_SPI_CRC != 0U)
  /*---------------------------- SPIx CRCPOLY Configuration ------------------*/
  /* Configure : CRC Polynomial */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003774:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003778:	d105      	bne.n	8003786 <HAL_SPI_Init+0xfa>
  {
    WRITE_REG(hspi->Instance->CRCPR, (hspi->Init.CRCPolynomial & SPI_CRCPR_CRCPOLY_Msk));
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	b292      	uxth	r2, r2
 8003784:	611a      	str	r2, [r3, #16]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	69da      	ldr	r2, [r3, #28]
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003794:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	2200      	movs	r2, #0
 800379a:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	2201      	movs	r2, #1
 80037a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3708      	adds	r7, #8
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b088      	sub	sp, #32
 80037b2:	af00      	add	r7, sp, #0
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	603b      	str	r3, [r7, #0]
 80037ba:	4613      	mov	r3, r2
 80037bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80037be:	2300      	movs	r3, #0
 80037c0:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d101      	bne.n	80037d0 <HAL_SPI_Transmit+0x22>
 80037cc:	2302      	movs	r3, #2
 80037ce:	e148      	b.n	8003a62 <HAL_SPI_Transmit+0x2b4>
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80037d8:	f7fd ff76 	bl	80016c8 <HAL_GetTick>
 80037dc:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80037de:	88fb      	ldrh	r3, [r7, #6]
 80037e0:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b01      	cmp	r3, #1
 80037ec:	d002      	beq.n	80037f4 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80037ee:	2302      	movs	r3, #2
 80037f0:	77fb      	strb	r3, [r7, #31]
    goto error;
 80037f2:	e12d      	b.n	8003a50 <HAL_SPI_Transmit+0x2a2>
  }

  if ((pData == NULL) || (Size == 0U))
 80037f4:	68bb      	ldr	r3, [r7, #8]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d002      	beq.n	8003800 <HAL_SPI_Transmit+0x52>
 80037fa:	88fb      	ldrh	r3, [r7, #6]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d102      	bne.n	8003806 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003804:	e124      	b.n	8003a50 <HAL_SPI_Transmit+0x2a2>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2203      	movs	r2, #3
 800380a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	68ba      	ldr	r2, [r7, #8]
 8003818:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	88fa      	ldrh	r2, [r7, #6]
 800381e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003820:	68fb      	ldr	r3, [r7, #12]
 8003822:	88fa      	ldrh	r2, [r7, #6]
 8003824:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003826:	68fb      	ldr	r3, [r7, #12]
 8003828:	2200      	movs	r2, #0
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	2200      	movs	r2, #0
 8003830:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	2200      	movs	r2, #0
 8003836:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	2200      	movs	r2, #0
 800383c:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800384c:	d10f      	bne.n	800386e <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	681a      	ldr	r2, [r3, #0]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800385c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	681a      	ldr	r2, [r3, #0]
 8003864:	68fb      	ldr	r3, [r7, #12]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800386c:	601a      	str	r2, [r3, #0]
  }

#if (USE_SPI_CRC != 0U)
  /* Reset CRC Calculation */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003876:	d10f      	bne.n	8003898 <HAL_SPI_Transmit+0xea>
  {
    SPI_RESET_CRC(hspi);
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	681a      	ldr	r2, [r3, #0]
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003886:	601a      	str	r2, [r3, #0]
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	681a      	ldr	r2, [r3, #0]
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003896:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80038a2:	2b40      	cmp	r3, #64	; 0x40
 80038a4:	d007      	beq.n	80038b6 <HAL_SPI_Transmit+0x108>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	681a      	ldr	r2, [r3, #0]
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80038b4:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	68db      	ldr	r3, [r3, #12]
 80038ba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80038be:	d14b      	bne.n	8003958 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	685b      	ldr	r3, [r3, #4]
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d002      	beq.n	80038ce <HAL_SPI_Transmit+0x120>
 80038c8:	8afb      	ldrh	r3, [r7, #22]
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d13e      	bne.n	800394c <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	881a      	ldrh	r2, [r3, #0]
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	1c9a      	adds	r2, r3, #2
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038e8:	b29b      	uxth	r3, r3
 80038ea:	3b01      	subs	r3, #1
 80038ec:	b29a      	uxth	r2, r3
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80038f2:	e02b      	b.n	800394c <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0302 	and.w	r3, r3, #2
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d112      	bne.n	8003928 <HAL_SPI_Transmit+0x17a>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003906:	881a      	ldrh	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003912:	1c9a      	adds	r2, r3, #2
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800391c:	b29b      	uxth	r3, r3
 800391e:	3b01      	subs	r3, #1
 8003920:	b29a      	uxth	r2, r3
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	86da      	strh	r2, [r3, #54]	; 0x36
 8003926:	e011      	b.n	800394c <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003928:	f7fd fece 	bl	80016c8 <HAL_GetTick>
 800392c:	4602      	mov	r2, r0
 800392e:	69bb      	ldr	r3, [r7, #24]
 8003930:	1ad3      	subs	r3, r2, r3
 8003932:	683a      	ldr	r2, [r7, #0]
 8003934:	429a      	cmp	r2, r3
 8003936:	d803      	bhi.n	8003940 <HAL_SPI_Transmit+0x192>
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800393e:	d102      	bne.n	8003946 <HAL_SPI_Transmit+0x198>
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	2b00      	cmp	r3, #0
 8003944:	d102      	bne.n	800394c <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8003946:	2303      	movs	r3, #3
 8003948:	77fb      	strb	r3, [r7, #31]
          goto error;
 800394a:	e081      	b.n	8003a50 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003950:	b29b      	uxth	r3, r3
 8003952:	2b00      	cmp	r3, #0
 8003954:	d1ce      	bne.n	80038f4 <HAL_SPI_Transmit+0x146>
 8003956:	e04c      	b.n	80039f2 <HAL_SPI_Transmit+0x244>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <HAL_SPI_Transmit+0x1b8>
 8003960:	8afb      	ldrh	r3, [r7, #22]
 8003962:	2b01      	cmp	r3, #1
 8003964:	d140      	bne.n	80039e8 <HAL_SPI_Transmit+0x23a>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	330c      	adds	r3, #12
 8003970:	7812      	ldrb	r2, [r2, #0]
 8003972:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003978:	1c5a      	adds	r2, r3, #1
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003982:	b29b      	uxth	r3, r3
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800398c:	e02c      	b.n	80039e8 <HAL_SPI_Transmit+0x23a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	689b      	ldr	r3, [r3, #8]
 8003994:	f003 0302 	and.w	r3, r3, #2
 8003998:	2b02      	cmp	r3, #2
 800399a:	d113      	bne.n	80039c4 <HAL_SPI_Transmit+0x216>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	330c      	adds	r3, #12
 80039a6:	7812      	ldrb	r2, [r2, #0]
 80039a8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039ae:	1c5a      	adds	r2, r3, #1
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039b8:	b29b      	uxth	r3, r3
 80039ba:	3b01      	subs	r3, #1
 80039bc:	b29a      	uxth	r2, r3
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	86da      	strh	r2, [r3, #54]	; 0x36
 80039c2:	e011      	b.n	80039e8 <HAL_SPI_Transmit+0x23a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80039c4:	f7fd fe80 	bl	80016c8 <HAL_GetTick>
 80039c8:	4602      	mov	r2, r0
 80039ca:	69bb      	ldr	r3, [r7, #24]
 80039cc:	1ad3      	subs	r3, r2, r3
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d803      	bhi.n	80039dc <HAL_SPI_Transmit+0x22e>
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039da:	d102      	bne.n	80039e2 <HAL_SPI_Transmit+0x234>
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d102      	bne.n	80039e8 <HAL_SPI_Transmit+0x23a>
        {
          errorcode = HAL_TIMEOUT;
 80039e2:	2303      	movs	r3, #3
 80039e4:	77fb      	strb	r3, [r7, #31]
          goto error;
 80039e6:	e033      	b.n	8003a50 <HAL_SPI_Transmit+0x2a2>
    while (hspi->TxXferCount > 0U)
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80039ec:	b29b      	uxth	r3, r3
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d1cd      	bne.n	800398e <HAL_SPI_Transmit+0x1e0>
      }
    }
  }
#if (USE_SPI_CRC != 0U)
  /* Enable CRC Transmission */
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80039fa:	d107      	bne.n	8003a0c <HAL_SPI_Transmit+0x25e>
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	681a      	ldr	r2, [r3, #0]
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8003a0a:	601a      	str	r2, [r3, #0]
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a0c:	69ba      	ldr	r2, [r7, #24]
 8003a0e:	6839      	ldr	r1, [r7, #0]
 8003a10:	68f8      	ldr	r0, [r7, #12]
 8003a12:	f000 f8c1 	bl	8003b98 <SPI_EndRxTxTransaction>
 8003a16:	4603      	mov	r3, r0
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d002      	beq.n	8003a22 <HAL_SPI_Transmit+0x274>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	2220      	movs	r2, #32
 8003a20:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	689b      	ldr	r3, [r3, #8]
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d10a      	bne.n	8003a40 <HAL_SPI_Transmit+0x292>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	613b      	str	r3, [r7, #16]
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	68db      	ldr	r3, [r3, #12]
 8003a34:	613b      	str	r3, [r7, #16]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	689b      	ldr	r3, [r3, #8]
 8003a3c:	613b      	str	r3, [r7, #16]
 8003a3e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d002      	beq.n	8003a4e <HAL_SPI_Transmit+0x2a0>
  {
    errorcode = HAL_ERROR;
 8003a48:	2301      	movs	r3, #1
 8003a4a:	77fb      	strb	r3, [r7, #31]
 8003a4c:	e000      	b.n	8003a50 <HAL_SPI_Transmit+0x2a2>
  }

error:
 8003a4e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2201      	movs	r2, #1
 8003a54:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003a60:	7ffb      	ldrb	r3, [r7, #31]
}
 8003a62:	4618      	mov	r0, r3
 8003a64:	3720      	adds	r7, #32
 8003a66:	46bd      	mov	sp, r7
 8003a68:	bd80      	pop	{r7, pc}

08003a6a <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8003a6a:	b480      	push	{r7}
 8003a6c:	b083      	sub	sp, #12
 8003a6e:	af00      	add	r7, sp, #0
 8003a70:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a78:	b2db      	uxtb	r3, r3
}
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	370c      	adds	r7, #12
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a84:	4770      	bx	lr
	...

08003a88 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003a88:	b580      	push	{r7, lr}
 8003a8a:	b088      	sub	sp, #32
 8003a8c:	af00      	add	r7, sp, #0
 8003a8e:	60f8      	str	r0, [r7, #12]
 8003a90:	60b9      	str	r1, [r7, #8]
 8003a92:	603b      	str	r3, [r7, #0]
 8003a94:	4613      	mov	r3, r2
 8003a96:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003a98:	f7fd fe16 	bl	80016c8 <HAL_GetTick>
 8003a9c:	4602      	mov	r2, r0
 8003a9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003aa0:	1a9b      	subs	r3, r3, r2
 8003aa2:	683a      	ldr	r2, [r7, #0]
 8003aa4:	4413      	add	r3, r2
 8003aa6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003aa8:	f7fd fe0e 	bl	80016c8 <HAL_GetTick>
 8003aac:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003aae:	4b39      	ldr	r3, [pc, #228]	; (8003b94 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	015b      	lsls	r3, r3, #5
 8003ab4:	0d1b      	lsrs	r3, r3, #20
 8003ab6:	69fa      	ldr	r2, [r7, #28]
 8003ab8:	fb02 f303 	mul.w	r3, r2, r3
 8003abc:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003abe:	e054      	b.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ac6:	d050      	beq.n	8003b6a <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003ac8:	f7fd fdfe 	bl	80016c8 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	69bb      	ldr	r3, [r7, #24]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	69fa      	ldr	r2, [r7, #28]
 8003ad4:	429a      	cmp	r2, r3
 8003ad6:	d902      	bls.n	8003ade <SPI_WaitFlagStateUntilTimeout+0x56>
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d13d      	bne.n	8003b5a <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	685a      	ldr	r2, [r3, #4]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003aec:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003af6:	d111      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003b00:	d004      	beq.n	8003b0c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003b0a:	d107      	bne.n	8003b1c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	681a      	ldr	r2, [r3, #0]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003b1a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b20:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b24:	d10f      	bne.n	8003b46 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	681a      	ldr	r2, [r3, #0]
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b34:	601a      	str	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	681a      	ldr	r2, [r3, #0]
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	681b      	ldr	r3, [r3, #0]
 8003b40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b44:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	2201      	movs	r2, #1
 8003b4a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	2200      	movs	r2, #0
 8003b52:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003b56:	2303      	movs	r3, #3
 8003b58:	e017      	b.n	8003b8a <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if(count == 0U)
 8003b5a:	697b      	ldr	r3, [r7, #20]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003b60:	2300      	movs	r3, #0
 8003b62:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003b64:	697b      	ldr	r3, [r7, #20]
 8003b66:	3b01      	subs	r3, #1
 8003b68:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	4013      	ands	r3, r2
 8003b74:	68ba      	ldr	r2, [r7, #8]
 8003b76:	429a      	cmp	r2, r3
 8003b78:	bf0c      	ite	eq
 8003b7a:	2301      	moveq	r3, #1
 8003b7c:	2300      	movne	r3, #0
 8003b7e:	b2db      	uxtb	r3, r3
 8003b80:	461a      	mov	r2, r3
 8003b82:	79fb      	ldrb	r3, [r7, #7]
 8003b84:	429a      	cmp	r2, r3
 8003b86:	d19b      	bne.n	8003ac0 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003b88:	2300      	movs	r3, #0
}
 8003b8a:	4618      	mov	r0, r3
 8003b8c:	3720      	adds	r7, #32
 8003b8e:	46bd      	mov	sp, r7
 8003b90:	bd80      	pop	{r7, pc}
 8003b92:	bf00      	nop
 8003b94:	200000d0 	.word	0x200000d0

08003b98 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003b98:	b580      	push	{r7, lr}
 8003b9a:	b088      	sub	sp, #32
 8003b9c:	af02      	add	r7, sp, #8
 8003b9e:	60f8      	str	r0, [r7, #12]
 8003ba0:	60b9      	str	r1, [r7, #8]
 8003ba2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ba4:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <SPI_EndRxTxTransaction+0x7c>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1b      	ldr	r2, [pc, #108]	; (8003c18 <SPI_EndRxTxTransaction+0x80>)
 8003baa:	fba2 2303 	umull	r2, r3, r2, r3
 8003bae:	0d5b      	lsrs	r3, r3, #21
 8003bb0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003bb4:	fb02 f303 	mul.w	r3, r2, r3
 8003bb8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	685b      	ldr	r3, [r3, #4]
 8003bbe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003bc2:	d112      	bne.n	8003bea <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	68bb      	ldr	r3, [r7, #8]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	2180      	movs	r1, #128	; 0x80
 8003bce:	68f8      	ldr	r0, [r7, #12]
 8003bd0:	f7ff ff5a 	bl	8003a88 <SPI_WaitFlagStateUntilTimeout>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d016      	beq.n	8003c08 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003bde:	f043 0220 	orr.w	r2, r3, #32
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e00f      	b.n	8003c0a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003bea:	697b      	ldr	r3, [r7, #20]
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d00a      	beq.n	8003c06 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003bf0:	697b      	ldr	r3, [r7, #20]
 8003bf2:	3b01      	subs	r3, #1
 8003bf4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	689b      	ldr	r3, [r3, #8]
 8003bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c00:	2b80      	cmp	r3, #128	; 0x80
 8003c02:	d0f2      	beq.n	8003bea <SPI_EndRxTxTransaction+0x52>
 8003c04:	e000      	b.n	8003c08 <SPI_EndRxTxTransaction+0x70>
        break;
 8003c06:	bf00      	nop
  }

  return HAL_OK;
 8003c08:	2300      	movs	r3, #0
}
 8003c0a:	4618      	mov	r0, r3
 8003c0c:	3718      	adds	r7, #24
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}
 8003c12:	bf00      	nop
 8003c14:	200000d0 	.word	0x200000d0
 8003c18:	165e9f81 	.word	0x165e9f81

08003c1c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c1c:	b580      	push	{r7, lr}
 8003c1e:	b082      	sub	sp, #8
 8003c20:	af00      	add	r7, sp, #0
 8003c22:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	2b00      	cmp	r3, #0
 8003c28:	d101      	bne.n	8003c2e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c2a:	2301      	movs	r3, #1
 8003c2c:	e03f      	b.n	8003cae <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c34:	b2db      	uxtb	r3, r3
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d106      	bne.n	8003c48 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2200      	movs	r2, #0
 8003c3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7fe ffe0 	bl	8002c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2224      	movs	r2, #36	; 0x24
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	68da      	ldr	r2, [r3, #12]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003c5e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003c60:	6878      	ldr	r0, [r7, #4]
 8003c62:	f000 f947 	bl	8003ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	691a      	ldr	r2, [r3, #16]
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c74:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	695a      	ldr	r2, [r3, #20]
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c84:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	68da      	ldr	r2, [r3, #12]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003c94:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2220      	movs	r2, #32
 8003ca0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2220      	movs	r2, #32
 8003ca8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003cac:	2300      	movs	r3, #0
}
 8003cae:	4618      	mov	r0, r3
 8003cb0:	3708      	adds	r7, #8
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bd80      	pop	{r7, pc}

08003cb6 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003cb6:	b580      	push	{r7, lr}
 8003cb8:	b08a      	sub	sp, #40	; 0x28
 8003cba:	af02      	add	r7, sp, #8
 8003cbc:	60f8      	str	r0, [r7, #12]
 8003cbe:	60b9      	str	r1, [r7, #8]
 8003cc0:	603b      	str	r3, [r7, #0]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	2b20      	cmp	r3, #32
 8003cd4:	d17c      	bne.n	8003dd0 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003cd6:	68bb      	ldr	r3, [r7, #8]
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d002      	beq.n	8003ce2 <HAL_UART_Transmit+0x2c>
 8003cdc:	88fb      	ldrh	r3, [r7, #6]
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d101      	bne.n	8003ce6 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003ce2:	2301      	movs	r3, #1
 8003ce4:	e075      	b.n	8003dd2 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003cec:	2b01      	cmp	r3, #1
 8003cee:	d101      	bne.n	8003cf4 <HAL_UART_Transmit+0x3e>
 8003cf0:	2302      	movs	r3, #2
 8003cf2:	e06e      	b.n	8003dd2 <HAL_UART_Transmit+0x11c>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	2201      	movs	r2, #1
 8003cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	2200      	movs	r2, #0
 8003d00:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003d02:	68fb      	ldr	r3, [r7, #12]
 8003d04:	2221      	movs	r2, #33	; 0x21
 8003d06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003d0a:	f7fd fcdd 	bl	80016c8 <HAL_GetTick>
 8003d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	88fa      	ldrh	r2, [r7, #6]
 8003d14:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	88fa      	ldrh	r2, [r7, #6]
 8003d1a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	689b      	ldr	r3, [r3, #8]
 8003d20:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d24:	d108      	bne.n	8003d38 <HAL_UART_Transmit+0x82>
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	691b      	ldr	r3, [r3, #16]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d104      	bne.n	8003d38 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003d2e:	2300      	movs	r3, #0
 8003d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	61bb      	str	r3, [r7, #24]
 8003d36:	e003      	b.n	8003d40 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003d38:	68bb      	ldr	r3, [r7, #8]
 8003d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	2200      	movs	r2, #0
 8003d44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003d48:	e02a      	b.n	8003da0 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003d4a:	683b      	ldr	r3, [r7, #0]
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	2200      	movs	r2, #0
 8003d52:	2180      	movs	r1, #128	; 0x80
 8003d54:	68f8      	ldr	r0, [r7, #12]
 8003d56:	f000 f85e 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	2b00      	cmp	r3, #0
 8003d5e:	d001      	beq.n	8003d64 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003d60:	2303      	movs	r3, #3
 8003d62:	e036      	b.n	8003dd2 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003d64:	69fb      	ldr	r3, [r7, #28]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d10b      	bne.n	8003d82 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003d6a:	69bb      	ldr	r3, [r7, #24]
 8003d6c:	881b      	ldrh	r3, [r3, #0]
 8003d6e:	461a      	mov	r2, r3
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003d78:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003d7a:	69bb      	ldr	r3, [r7, #24]
 8003d7c:	3302      	adds	r3, #2
 8003d7e:	61bb      	str	r3, [r7, #24]
 8003d80:	e007      	b.n	8003d92 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	781a      	ldrb	r2, [r3, #0]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003d8c:	69fb      	ldr	r3, [r7, #28]
 8003d8e:	3301      	adds	r3, #1
 8003d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	3b01      	subs	r3, #1
 8003d9a:	b29a      	uxth	r2, r3
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003da4:	b29b      	uxth	r3, r3
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d1cf      	bne.n	8003d4a <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	9300      	str	r3, [sp, #0]
 8003dae:	697b      	ldr	r3, [r7, #20]
 8003db0:	2200      	movs	r2, #0
 8003db2:	2140      	movs	r1, #64	; 0x40
 8003db4:	68f8      	ldr	r0, [r7, #12]
 8003db6:	f000 f82e 	bl	8003e16 <UART_WaitOnFlagUntilTimeout>
 8003dba:	4603      	mov	r3, r0
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003dc0:	2303      	movs	r3, #3
 8003dc2:	e006      	b.n	8003dd2 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	2220      	movs	r2, #32
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
 8003dce:	e000      	b.n	8003dd2 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003dd0:	2302      	movs	r3, #2
  }
}
 8003dd2:	4618      	mov	r0, r3
 8003dd4:	3720      	adds	r7, #32
 8003dd6:	46bd      	mov	sp, r7
 8003dd8:	bd80      	pop	{r7, pc}

08003dda <HAL_UART_GetState>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(UART_HandleTypeDef *huart)
{
 8003dda:	b480      	push	{r7}
 8003ddc:	b085      	sub	sp, #20
 8003dde:	af00      	add	r7, sp, #0
 8003de0:	6078      	str	r0, [r7, #4]
  uint32_t temp1 = 0x00U, temp2 = 0x00U;
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
 8003de6:	2300      	movs	r3, #0
 8003de8:	60bb      	str	r3, [r7, #8]
  temp1 = huart->gState;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dfa:	b2db      	uxtb	r3, r3
 8003dfc:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	b2da      	uxtb	r2, r3
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	4313      	orrs	r3, r2
 8003e08:	b2db      	uxtb	r3, r3
}
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	3714      	adds	r7, #20
 8003e0e:	46bd      	mov	sp, r7
 8003e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e14:	4770      	bx	lr

08003e16 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b090      	sub	sp, #64	; 0x40
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	603b      	str	r3, [r7, #0]
 8003e22:	4613      	mov	r3, r2
 8003e24:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003e26:	e050      	b.n	8003eca <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e28:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e2a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e2e:	d04c      	beq.n	8003eca <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003e30:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d007      	beq.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x30>
 8003e36:	f7fd fc47 	bl	80016c8 <HAL_GetTick>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	1ad3      	subs	r3, r2, r3
 8003e40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8003e42:	429a      	cmp	r2, r3
 8003e44:	d241      	bcs.n	8003eca <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	330c      	adds	r3, #12
 8003e4c:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e50:	e853 3f00 	ldrex	r3, [r3]
 8003e54:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8003e56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e58:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8003e5c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	330c      	adds	r3, #12
 8003e64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003e66:	637a      	str	r2, [r7, #52]	; 0x34
 8003e68:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e6a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8003e6c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003e6e:	e841 2300 	strex	r3, r2, [r1]
 8003e72:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8003e74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d1e5      	bne.n	8003e46 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	3314      	adds	r3, #20
 8003e80:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e82:	697b      	ldr	r3, [r7, #20]
 8003e84:	e853 3f00 	ldrex	r3, [r3]
 8003e88:	613b      	str	r3, [r7, #16]
   return(result);
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	f023 0301 	bic.w	r3, r3, #1
 8003e90:	63bb      	str	r3, [r7, #56]	; 0x38
 8003e92:	68fb      	ldr	r3, [r7, #12]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	3314      	adds	r3, #20
 8003e98:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8003e9a:	623a      	str	r2, [r7, #32]
 8003e9c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e9e:	69f9      	ldr	r1, [r7, #28]
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	e841 2300 	strex	r3, r2, [r1]
 8003ea6:	61bb      	str	r3, [r7, #24]
   return(result);
 8003ea8:	69bb      	ldr	r3, [r7, #24]
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d1e5      	bne.n	8003e7a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	2220      	movs	r2, #32
 8003eb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2220      	movs	r2, #32
 8003eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8003ec6:	2303      	movs	r3, #3
 8003ec8:	e00f      	b.n	8003eea <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	68bb      	ldr	r3, [r7, #8]
 8003ed2:	4013      	ands	r3, r2
 8003ed4:	68ba      	ldr	r2, [r7, #8]
 8003ed6:	429a      	cmp	r2, r3
 8003ed8:	bf0c      	ite	eq
 8003eda:	2301      	moveq	r3, #1
 8003edc:	2300      	movne	r3, #0
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	461a      	mov	r2, r3
 8003ee2:	79fb      	ldrb	r3, [r7, #7]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d09f      	beq.n	8003e28 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003ee8:	2300      	movs	r3, #0
}
 8003eea:	4618      	mov	r0, r3
 8003eec:	3740      	adds	r7, #64	; 0x40
 8003eee:	46bd      	mov	sp, r7
 8003ef0:	bd80      	pop	{r7, pc}
	...

08003ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ef8:	b0c0      	sub	sp, #256	; 0x100
 8003efa:	af00      	add	r7, sp, #0
 8003efc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f10:	68d9      	ldr	r1, [r3, #12]
 8003f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	ea40 0301 	orr.w	r3, r0, r1
 8003f1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f22:	689a      	ldr	r2, [r3, #8]
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	691b      	ldr	r3, [r3, #16]
 8003f2a:	431a      	orrs	r2, r3
 8003f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f30:	695b      	ldr	r3, [r3, #20]
 8003f32:	431a      	orrs	r2, r3
 8003f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f38:	69db      	ldr	r3, [r3, #28]
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003f4c:	f021 010c 	bic.w	r1, r1, #12
 8003f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003f5a:	430b      	orrs	r3, r1
 8003f5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f6e:	6999      	ldr	r1, [r3, #24]
 8003f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f74:	681a      	ldr	r2, [r3, #0]
 8003f76:	ea40 0301 	orr.w	r3, r0, r1
 8003f7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f80:	681a      	ldr	r2, [r3, #0]
 8003f82:	4b8f      	ldr	r3, [pc, #572]	; (80041c0 <UART_SetConfig+0x2cc>)
 8003f84:	429a      	cmp	r2, r3
 8003f86:	d005      	beq.n	8003f94 <UART_SetConfig+0xa0>
 8003f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f8c:	681a      	ldr	r2, [r3, #0]
 8003f8e:	4b8d      	ldr	r3, [pc, #564]	; (80041c4 <UART_SetConfig+0x2d0>)
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d104      	bne.n	8003f9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003f94:	f7ff fb66 	bl	8003664 <HAL_RCC_GetPCLK2Freq>
 8003f98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003f9c:	e003      	b.n	8003fa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003f9e:	f7ff fb4d 	bl	800363c <HAL_RCC_GetPCLK1Freq>
 8003fa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003faa:	69db      	ldr	r3, [r3, #28]
 8003fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003fb0:	f040 810c 	bne.w	80041cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003fb8:	2200      	movs	r2, #0
 8003fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003fbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003fc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003fc6:	4622      	mov	r2, r4
 8003fc8:	462b      	mov	r3, r5
 8003fca:	1891      	adds	r1, r2, r2
 8003fcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8003fce:	415b      	adcs	r3, r3
 8003fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003fd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003fd6:	4621      	mov	r1, r4
 8003fd8:	eb12 0801 	adds.w	r8, r2, r1
 8003fdc:	4629      	mov	r1, r5
 8003fde:	eb43 0901 	adc.w	r9, r3, r1
 8003fe2:	f04f 0200 	mov.w	r2, #0
 8003fe6:	f04f 0300 	mov.w	r3, #0
 8003fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4623      	mov	r3, r4
 8003ffc:	eb18 0303 	adds.w	r3, r8, r3
 8004000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004004:	462b      	mov	r3, r5
 8004006:	eb49 0303 	adc.w	r3, r9, r3
 800400a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800400e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004012:	685b      	ldr	r3, [r3, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800401a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800401e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004022:	460b      	mov	r3, r1
 8004024:	18db      	adds	r3, r3, r3
 8004026:	653b      	str	r3, [r7, #80]	; 0x50
 8004028:	4613      	mov	r3, r2
 800402a:	eb42 0303 	adc.w	r3, r2, r3
 800402e:	657b      	str	r3, [r7, #84]	; 0x54
 8004030:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004034:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004038:	f7fc f92a 	bl	8000290 <__aeabi_uldivmod>
 800403c:	4602      	mov	r2, r0
 800403e:	460b      	mov	r3, r1
 8004040:	4b61      	ldr	r3, [pc, #388]	; (80041c8 <UART_SetConfig+0x2d4>)
 8004042:	fba3 2302 	umull	r2, r3, r3, r2
 8004046:	095b      	lsrs	r3, r3, #5
 8004048:	011c      	lsls	r4, r3, #4
 800404a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800404e:	2200      	movs	r2, #0
 8004050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004054:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004058:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800405c:	4642      	mov	r2, r8
 800405e:	464b      	mov	r3, r9
 8004060:	1891      	adds	r1, r2, r2
 8004062:	64b9      	str	r1, [r7, #72]	; 0x48
 8004064:	415b      	adcs	r3, r3
 8004066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004068:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800406c:	4641      	mov	r1, r8
 800406e:	eb12 0a01 	adds.w	sl, r2, r1
 8004072:	4649      	mov	r1, r9
 8004074:	eb43 0b01 	adc.w	fp, r3, r1
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004084:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800408c:	4692      	mov	sl, r2
 800408e:	469b      	mov	fp, r3
 8004090:	4643      	mov	r3, r8
 8004092:	eb1a 0303 	adds.w	r3, sl, r3
 8004096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800409a:	464b      	mov	r3, r9
 800409c:	eb4b 0303 	adc.w	r3, fp, r3
 80040a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80040a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2200      	movs	r2, #0
 80040ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80040b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80040b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80040b8:	460b      	mov	r3, r1
 80040ba:	18db      	adds	r3, r3, r3
 80040bc:	643b      	str	r3, [r7, #64]	; 0x40
 80040be:	4613      	mov	r3, r2
 80040c0:	eb42 0303 	adc.w	r3, r2, r3
 80040c4:	647b      	str	r3, [r7, #68]	; 0x44
 80040c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80040ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80040ce:	f7fc f8df 	bl	8000290 <__aeabi_uldivmod>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4611      	mov	r1, r2
 80040d8:	4b3b      	ldr	r3, [pc, #236]	; (80041c8 <UART_SetConfig+0x2d4>)
 80040da:	fba3 2301 	umull	r2, r3, r3, r1
 80040de:	095b      	lsrs	r3, r3, #5
 80040e0:	2264      	movs	r2, #100	; 0x64
 80040e2:	fb02 f303 	mul.w	r3, r2, r3
 80040e6:	1acb      	subs	r3, r1, r3
 80040e8:	00db      	lsls	r3, r3, #3
 80040ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80040ee:	4b36      	ldr	r3, [pc, #216]	; (80041c8 <UART_SetConfig+0x2d4>)
 80040f0:	fba3 2302 	umull	r2, r3, r3, r2
 80040f4:	095b      	lsrs	r3, r3, #5
 80040f6:	005b      	lsls	r3, r3, #1
 80040f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80040fc:	441c      	add	r4, r3
 80040fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004102:	2200      	movs	r2, #0
 8004104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004108:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800410c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004110:	4642      	mov	r2, r8
 8004112:	464b      	mov	r3, r9
 8004114:	1891      	adds	r1, r2, r2
 8004116:	63b9      	str	r1, [r7, #56]	; 0x38
 8004118:	415b      	adcs	r3, r3
 800411a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800411c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004120:	4641      	mov	r1, r8
 8004122:	1851      	adds	r1, r2, r1
 8004124:	6339      	str	r1, [r7, #48]	; 0x30
 8004126:	4649      	mov	r1, r9
 8004128:	414b      	adcs	r3, r1
 800412a:	637b      	str	r3, [r7, #52]	; 0x34
 800412c:	f04f 0200 	mov.w	r2, #0
 8004130:	f04f 0300 	mov.w	r3, #0
 8004134:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004138:	4659      	mov	r1, fp
 800413a:	00cb      	lsls	r3, r1, #3
 800413c:	4651      	mov	r1, sl
 800413e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004142:	4651      	mov	r1, sl
 8004144:	00ca      	lsls	r2, r1, #3
 8004146:	4610      	mov	r0, r2
 8004148:	4619      	mov	r1, r3
 800414a:	4603      	mov	r3, r0
 800414c:	4642      	mov	r2, r8
 800414e:	189b      	adds	r3, r3, r2
 8004150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004154:	464b      	mov	r3, r9
 8004156:	460a      	mov	r2, r1
 8004158:	eb42 0303 	adc.w	r3, r2, r3
 800415c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004164:	685b      	ldr	r3, [r3, #4]
 8004166:	2200      	movs	r2, #0
 8004168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800416c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004174:	460b      	mov	r3, r1
 8004176:	18db      	adds	r3, r3, r3
 8004178:	62bb      	str	r3, [r7, #40]	; 0x28
 800417a:	4613      	mov	r3, r2
 800417c:	eb42 0303 	adc.w	r3, r2, r3
 8004180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800418a:	f7fc f881 	bl	8000290 <__aeabi_uldivmod>
 800418e:	4602      	mov	r2, r0
 8004190:	460b      	mov	r3, r1
 8004192:	4b0d      	ldr	r3, [pc, #52]	; (80041c8 <UART_SetConfig+0x2d4>)
 8004194:	fba3 1302 	umull	r1, r3, r3, r2
 8004198:	095b      	lsrs	r3, r3, #5
 800419a:	2164      	movs	r1, #100	; 0x64
 800419c:	fb01 f303 	mul.w	r3, r1, r3
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	00db      	lsls	r3, r3, #3
 80041a4:	3332      	adds	r3, #50	; 0x32
 80041a6:	4a08      	ldr	r2, [pc, #32]	; (80041c8 <UART_SetConfig+0x2d4>)
 80041a8:	fba2 2303 	umull	r2, r3, r2, r3
 80041ac:	095b      	lsrs	r3, r3, #5
 80041ae:	f003 0207 	and.w	r2, r3, #7
 80041b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	4422      	add	r2, r4
 80041ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80041bc:	e106      	b.n	80043cc <UART_SetConfig+0x4d8>
 80041be:	bf00      	nop
 80041c0:	40011000 	.word	0x40011000
 80041c4:	40011400 	.word	0x40011400
 80041c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80041d0:	2200      	movs	r2, #0
 80041d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80041d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80041da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80041de:	4642      	mov	r2, r8
 80041e0:	464b      	mov	r3, r9
 80041e2:	1891      	adds	r1, r2, r2
 80041e4:	6239      	str	r1, [r7, #32]
 80041e6:	415b      	adcs	r3, r3
 80041e8:	627b      	str	r3, [r7, #36]	; 0x24
 80041ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80041ee:	4641      	mov	r1, r8
 80041f0:	1854      	adds	r4, r2, r1
 80041f2:	4649      	mov	r1, r9
 80041f4:	eb43 0501 	adc.w	r5, r3, r1
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	f04f 0300 	mov.w	r3, #0
 8004200:	00eb      	lsls	r3, r5, #3
 8004202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004206:	00e2      	lsls	r2, r4, #3
 8004208:	4614      	mov	r4, r2
 800420a:	461d      	mov	r5, r3
 800420c:	4643      	mov	r3, r8
 800420e:	18e3      	adds	r3, r4, r3
 8004210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004214:	464b      	mov	r3, r9
 8004216:	eb45 0303 	adc.w	r3, r5, r3
 800421a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800421e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004222:	685b      	ldr	r3, [r3, #4]
 8004224:	2200      	movs	r2, #0
 8004226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800422a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800422e:	f04f 0200 	mov.w	r2, #0
 8004232:	f04f 0300 	mov.w	r3, #0
 8004236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800423a:	4629      	mov	r1, r5
 800423c:	008b      	lsls	r3, r1, #2
 800423e:	4621      	mov	r1, r4
 8004240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004244:	4621      	mov	r1, r4
 8004246:	008a      	lsls	r2, r1, #2
 8004248:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800424c:	f7fc f820 	bl	8000290 <__aeabi_uldivmod>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4b60      	ldr	r3, [pc, #384]	; (80043d8 <UART_SetConfig+0x4e4>)
 8004256:	fba3 2302 	umull	r2, r3, r3, r2
 800425a:	095b      	lsrs	r3, r3, #5
 800425c:	011c      	lsls	r4, r3, #4
 800425e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004262:	2200      	movs	r2, #0
 8004264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004268:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800426c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004270:	4642      	mov	r2, r8
 8004272:	464b      	mov	r3, r9
 8004274:	1891      	adds	r1, r2, r2
 8004276:	61b9      	str	r1, [r7, #24]
 8004278:	415b      	adcs	r3, r3
 800427a:	61fb      	str	r3, [r7, #28]
 800427c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004280:	4641      	mov	r1, r8
 8004282:	1851      	adds	r1, r2, r1
 8004284:	6139      	str	r1, [r7, #16]
 8004286:	4649      	mov	r1, r9
 8004288:	414b      	adcs	r3, r1
 800428a:	617b      	str	r3, [r7, #20]
 800428c:	f04f 0200 	mov.w	r2, #0
 8004290:	f04f 0300 	mov.w	r3, #0
 8004294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004298:	4659      	mov	r1, fp
 800429a:	00cb      	lsls	r3, r1, #3
 800429c:	4651      	mov	r1, sl
 800429e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042a2:	4651      	mov	r1, sl
 80042a4:	00ca      	lsls	r2, r1, #3
 80042a6:	4610      	mov	r0, r2
 80042a8:	4619      	mov	r1, r3
 80042aa:	4603      	mov	r3, r0
 80042ac:	4642      	mov	r2, r8
 80042ae:	189b      	adds	r3, r3, r2
 80042b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80042b4:	464b      	mov	r3, r9
 80042b6:	460a      	mov	r2, r1
 80042b8:	eb42 0303 	adc.w	r3, r2, r3
 80042bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80042c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042c4:	685b      	ldr	r3, [r3, #4]
 80042c6:	2200      	movs	r2, #0
 80042c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80042ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80042cc:	f04f 0200 	mov.w	r2, #0
 80042d0:	f04f 0300 	mov.w	r3, #0
 80042d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80042d8:	4649      	mov	r1, r9
 80042da:	008b      	lsls	r3, r1, #2
 80042dc:	4641      	mov	r1, r8
 80042de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042e2:	4641      	mov	r1, r8
 80042e4:	008a      	lsls	r2, r1, #2
 80042e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80042ea:	f7fb ffd1 	bl	8000290 <__aeabi_uldivmod>
 80042ee:	4602      	mov	r2, r0
 80042f0:	460b      	mov	r3, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	4b38      	ldr	r3, [pc, #224]	; (80043d8 <UART_SetConfig+0x4e4>)
 80042f6:	fba3 2301 	umull	r2, r3, r3, r1
 80042fa:	095b      	lsrs	r3, r3, #5
 80042fc:	2264      	movs	r2, #100	; 0x64
 80042fe:	fb02 f303 	mul.w	r3, r2, r3
 8004302:	1acb      	subs	r3, r1, r3
 8004304:	011b      	lsls	r3, r3, #4
 8004306:	3332      	adds	r3, #50	; 0x32
 8004308:	4a33      	ldr	r2, [pc, #204]	; (80043d8 <UART_SetConfig+0x4e4>)
 800430a:	fba2 2303 	umull	r2, r3, r2, r3
 800430e:	095b      	lsrs	r3, r3, #5
 8004310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004314:	441c      	add	r4, r3
 8004316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800431a:	2200      	movs	r2, #0
 800431c:	673b      	str	r3, [r7, #112]	; 0x70
 800431e:	677a      	str	r2, [r7, #116]	; 0x74
 8004320:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004324:	4642      	mov	r2, r8
 8004326:	464b      	mov	r3, r9
 8004328:	1891      	adds	r1, r2, r2
 800432a:	60b9      	str	r1, [r7, #8]
 800432c:	415b      	adcs	r3, r3
 800432e:	60fb      	str	r3, [r7, #12]
 8004330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004334:	4641      	mov	r1, r8
 8004336:	1851      	adds	r1, r2, r1
 8004338:	6039      	str	r1, [r7, #0]
 800433a:	4649      	mov	r1, r9
 800433c:	414b      	adcs	r3, r1
 800433e:	607b      	str	r3, [r7, #4]
 8004340:	f04f 0200 	mov.w	r2, #0
 8004344:	f04f 0300 	mov.w	r3, #0
 8004348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800434c:	4659      	mov	r1, fp
 800434e:	00cb      	lsls	r3, r1, #3
 8004350:	4651      	mov	r1, sl
 8004352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004356:	4651      	mov	r1, sl
 8004358:	00ca      	lsls	r2, r1, #3
 800435a:	4610      	mov	r0, r2
 800435c:	4619      	mov	r1, r3
 800435e:	4603      	mov	r3, r0
 8004360:	4642      	mov	r2, r8
 8004362:	189b      	adds	r3, r3, r2
 8004364:	66bb      	str	r3, [r7, #104]	; 0x68
 8004366:	464b      	mov	r3, r9
 8004368:	460a      	mov	r2, r1
 800436a:	eb42 0303 	adc.w	r3, r2, r3
 800436e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004374:	685b      	ldr	r3, [r3, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	663b      	str	r3, [r7, #96]	; 0x60
 800437a:	667a      	str	r2, [r7, #100]	; 0x64
 800437c:	f04f 0200 	mov.w	r2, #0
 8004380:	f04f 0300 	mov.w	r3, #0
 8004384:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004388:	4649      	mov	r1, r9
 800438a:	008b      	lsls	r3, r1, #2
 800438c:	4641      	mov	r1, r8
 800438e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004392:	4641      	mov	r1, r8
 8004394:	008a      	lsls	r2, r1, #2
 8004396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800439a:	f7fb ff79 	bl	8000290 <__aeabi_uldivmod>
 800439e:	4602      	mov	r2, r0
 80043a0:	460b      	mov	r3, r1
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <UART_SetConfig+0x4e4>)
 80043a4:	fba3 1302 	umull	r1, r3, r3, r2
 80043a8:	095b      	lsrs	r3, r3, #5
 80043aa:	2164      	movs	r1, #100	; 0x64
 80043ac:	fb01 f303 	mul.w	r3, r1, r3
 80043b0:	1ad3      	subs	r3, r2, r3
 80043b2:	011b      	lsls	r3, r3, #4
 80043b4:	3332      	adds	r3, #50	; 0x32
 80043b6:	4a08      	ldr	r2, [pc, #32]	; (80043d8 <UART_SetConfig+0x4e4>)
 80043b8:	fba2 2303 	umull	r2, r3, r2, r3
 80043bc:	095b      	lsrs	r3, r3, #5
 80043be:	f003 020f 	and.w	r2, r3, #15
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4422      	add	r2, r4
 80043ca:	609a      	str	r2, [r3, #8]
}
 80043cc:	bf00      	nop
 80043ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80043d2:	46bd      	mov	sp, r7
 80043d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043d8:	51eb851f 	.word	0x51eb851f

080043dc <main>:
/**
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void) {
 80043dc:	b580      	push	{r7, lr}
 80043de:	b084      	sub	sp, #16
 80043e0:	af00      	add	r7, sp, #0
	delay_t button_timer;
	uint8_t button_taps = 0;
 80043e2:	2300      	movs	r3, #0
 80043e4:	73fb      	strb	r3, [r7, #15]
         duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and 
         handled in milliseconds basis.
       - Set NVIC Group Priority to 4
       - Low Level Initialization
	 */
	HAL_Init();
 80043e6:	f7fd f90f 	bl	8001608 <HAL_Init>

	/* Configure the system clock to 180 MHz */
	SystemClock_Config();
 80043ea:	f000 f86b 	bl	80044c4 <SystemClock_Config>

	/* Initialize BSP Led for LED1 */
	BSP_LED_Init(LED1);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f7fc ff9a 	bl	8001328 <BSP_LED_Init>
	BSP_LED_Init(LED2);
 80043f4:	2001      	movs	r0, #1
 80043f6:	f7fc ff97 	bl	8001328 <BSP_LED_Init>

	/* Initialize the I2C, SPI and UART peripherals*/
	communication_peripherals_init();
 80043fa:	f000 f840 	bl	800447e <communication_peripherals_init>

	/* Initialize FSM */
	FSM_init();
 80043fe:	f000 f823 	bl	8004448 <FSM_init>

	/* Initialize delay timer for button taps*/
	delay_init(&button_timer, BUTTON_TAPS_TIME);
 8004402:	463b      	mov	r3, r7
 8004404:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8004408:	4618      	mov	r0, r3
 800440a:	f7fc fed0 	bl	80011ae <delay_init>

	/* Infinite loop */
	while (1) {

		debounce_FSM_update();
 800440e:	f7fc fe47 	bl	80010a0 <debounce_FSM_update>
		coordinates_FSM_update();
 8004412:	f7fc f905 	bl	8000620 <coordinates_FSM_update>

		if (read_button()) {
 8004416:	f7fc fea9 	bl	800116c <read_button>
 800441a:	4603      	mov	r3, r0
 800441c:	2b00      	cmp	r3, #0
 800441e:	d002      	beq.n	8004426 <main+0x4a>
			button_taps++;
 8004420:	7bfb      	ldrb	r3, [r7, #15]
 8004422:	3301      	adds	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
		}

		if(button_taps>0) {
 8004426:	7bfb      	ldrb	r3, [r7, #15]
 8004428:	2b00      	cmp	r3, #0
 800442a:	d0f0      	beq.n	800440e <main+0x32>
			if (delay_read(&button_timer)) {
 800442c:	463b      	mov	r3, r7
 800442e:	4618      	mov	r0, r3
 8004430:	f7fc fed8 	bl	80011e4 <delay_read>
 8004434:	4603      	mov	r3, r0
 8004436:	2b00      	cmp	r3, #0
 8004438:	d0e9      	beq.n	800440e <main+0x32>
				sensitivity_FSM_update(button_taps);
 800443a:	7bfb      	ldrb	r3, [r7, #15]
 800443c:	4618      	mov	r0, r3
 800443e:	f7fc fa65 	bl	800090c <sensitivity_FSM_update>
				button_taps = 0;
 8004442:	2300      	movs	r3, #0
 8004444:	73fb      	strb	r3, [r7, #15]
		debounce_FSM_update();
 8004446:	e7e2      	b.n	800440e <main+0x32>

08004448 <FSM_init>:
  *         If initialization of any FSM fails, Error_Handler() is called.
  *
  * @param  None
  * @retval None
  */
static void FSM_init(void) {
 8004448:	b580      	push	{r7, lr}
 800444a:	af00      	add	r7, sp, #0

	debounce_FSM_init(DEBOUNCE_TIME);
 800444c:	2028      	movs	r0, #40	; 0x28
 800444e:	f7fc fdff 	bl	8001050 <debounce_FSM_init>

	if (!sensitivity_FSM_init()) {
 8004452:	f7fc fa41 	bl	80008d8 <sensitivity_FSM_init>
 8004456:	4603      	mov	r3, r0
 8004458:	f083 0301 	eor.w	r3, r3, #1
 800445c:	b2db      	uxtb	r3, r3
 800445e:	2b00      	cmp	r3, #0
 8004460:	d001      	beq.n	8004466 <FSM_init+0x1e>
		Error_Handler();
 8004462:	f000 f891 	bl	8004588 <Error_Handler>
	}

	if (!coordinates_FSM_init()) {
 8004466:	f7fc f891 	bl	800058c <coordinates_FSM_init>
 800446a:	4603      	mov	r3, r0
 800446c:	f083 0301 	eor.w	r3, r3, #1
 8004470:	b2db      	uxtb	r3, r3
 8004472:	2b00      	cmp	r3, #0
 8004474:	d001      	beq.n	800447a <FSM_init+0x32>
		Error_Handler();
 8004476:	f000 f887 	bl	8004588 <Error_Handler>
	}

}
 800447a:	bf00      	nop
 800447c:	bd80      	pop	{r7, pc}

0800447e <communication_peripherals_init>:
  *         If initialization of any peripheral fails, Error_Handler() is called.
  *
  * @param  None
  * @retval None
  */
static void communication_peripherals_init(void) {
 800447e:	b580      	push	{r7, lr}
 8004480:	af00      	add	r7, sp, #0
	if (!uart_init()) {
 8004482:	f7fc fee3 	bl	800124c <uart_init>
 8004486:	4603      	mov	r3, r0
 8004488:	f083 0301 	eor.w	r3, r3, #1
 800448c:	b2db      	uxtb	r3, r3
 800448e:	2b00      	cmp	r3, #0
 8004490:	d001      	beq.n	8004496 <communication_peripherals_init+0x18>
		Error_Handler();
 8004492:	f000 f879 	bl	8004588 <Error_Handler>
	}

	if (!adlx345_I2C_init()) {
 8004496:	f7fc fac3 	bl	8000a20 <adlx345_I2C_init>
 800449a:	4603      	mov	r3, r0
 800449c:	f083 0301 	eor.w	r3, r3, #1
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d001      	beq.n	80044aa <communication_peripherals_init+0x2c>
		Error_Handler();
 80044a6:	f000 f86f 	bl	8004588 <Error_Handler>
	}

	if (!max7219_SPI_init()) {
 80044aa:	f7fc fc0b 	bl	8000cc4 <max7219_SPI_init>
 80044ae:	4603      	mov	r3, r0
 80044b0:	f083 0301 	eor.w	r3, r3, #1
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d001      	beq.n	80044be <communication_peripherals_init+0x40>
		Error_Handler();
 80044ba:	f000 f865 	bl	8004588 <Error_Handler>
	}
}
 80044be:	bf00      	nop
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <SystemClock_Config>:
 *            Flash Latency(WS)              = 5
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80044c4:	b580      	push	{r7, lr}
 80044c6:	b094      	sub	sp, #80	; 0x50
 80044c8:	af00      	add	r7, sp, #0
	RCC_ClkInitTypeDef RCC_ClkInitStruct;
	RCC_OscInitTypeDef RCC_OscInitStruct;

	/* Enable Power Control clock */
	__HAL_RCC_PWR_CLK_ENABLE();
 80044ca:	2300      	movs	r3, #0
 80044cc:	60bb      	str	r3, [r7, #8]
 80044ce:	4b2c      	ldr	r3, [pc, #176]	; (8004580 <SystemClock_Config+0xbc>)
 80044d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044d2:	4a2b      	ldr	r2, [pc, #172]	; (8004580 <SystemClock_Config+0xbc>)
 80044d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044d8:	6413      	str	r3, [r2, #64]	; 0x40
 80044da:	4b29      	ldr	r3, [pc, #164]	; (8004580 <SystemClock_Config+0xbc>)
 80044dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e2:	60bb      	str	r3, [r7, #8]
 80044e4:	68bb      	ldr	r3, [r7, #8]

	/* The voltage scaling allows optimizing the power consumption when the device is
     clocked below the maximum system frequency, to update the voltage scaling value 
     regarding system frequency refer to product datasheet.  */
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80044e6:	2300      	movs	r3, #0
 80044e8:	607b      	str	r3, [r7, #4]
 80044ea:	4b26      	ldr	r3, [pc, #152]	; (8004584 <SystemClock_Config+0xc0>)
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	4a25      	ldr	r2, [pc, #148]	; (8004584 <SystemClock_Config+0xc0>)
 80044f0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80044f4:	6013      	str	r3, [r2, #0]
 80044f6:	4b23      	ldr	r3, [pc, #140]	; (8004584 <SystemClock_Config+0xc0>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80044fe:	607b      	str	r3, [r7, #4]
 8004500:	687b      	ldr	r3, [r7, #4]

	/* Enable HSE Oscillator and activate PLL with HSE as source */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004502:	2301      	movs	r3, #1
 8004504:	60fb      	str	r3, [r7, #12]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8004506:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800450a:	613b      	str	r3, [r7, #16]
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800450c:	2302      	movs	r3, #2
 800450e:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004510:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8004514:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLM = 8;
 8004516:	2308      	movs	r3, #8
 8004518:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.PLL.PLLN = 360;
 800451a:	f44f 73b4 	mov.w	r3, #360	; 0x168
 800451e:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004520:	2302      	movs	r3, #2
 8004522:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLQ = 7;
 8004524:	2307      	movs	r3, #7
 8004526:	63bb      	str	r3, [r7, #56]	; 0x38
	if(HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004528:	f107 030c 	add.w	r3, r7, #12
 800452c:	4618      	mov	r0, r3
 800452e:	f7fe fc15 	bl	8002d5c <HAL_RCC_OscConfig>
 8004532:	4603      	mov	r3, r0
 8004534:	2b00      	cmp	r3, #0
 8004536:	d001      	beq.n	800453c <SystemClock_Config+0x78>
	{
		/* Initialization Error */
		Error_Handler();
 8004538:	f000 f826 	bl	8004588 <Error_Handler>
	}

	if(HAL_PWREx_EnableOverDrive() != HAL_OK)
 800453c:	f7fe fbbe 	bl	8002cbc <HAL_PWREx_EnableOverDrive>
 8004540:	4603      	mov	r3, r0
 8004542:	2b00      	cmp	r3, #0
 8004544:	d001      	beq.n	800454a <SystemClock_Config+0x86>
	{
		/* Initialization Error */
		Error_Handler();
 8004546:	f000 f81f 	bl	8004588 <Error_Handler>
	}

	/* Select PLL as system clock source and configure the HCLK, PCLK1 and PCLK2
     clocks dividers */
	RCC_ClkInitStruct.ClockType = (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2);
 800454a:	230f      	movs	r3, #15
 800454c:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800454e:	2302      	movs	r3, #2
 8004550:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8004552:	2300      	movs	r3, #0
 8004554:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8004556:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800455a:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800455c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004560:	64fb      	str	r3, [r7, #76]	; 0x4c

	if(HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8004562:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8004566:	2105      	movs	r1, #5
 8004568:	4618      	mov	r0, r3
 800456a:	f7fe fe6f 	bl	800324c <HAL_RCC_ClockConfig>
 800456e:	4603      	mov	r3, r0
 8004570:	2b00      	cmp	r3, #0
 8004572:	d001      	beq.n	8004578 <SystemClock_Config+0xb4>
	{
		/* Initialization Error */
		Error_Handler();
 8004574:	f000 f808 	bl	8004588 <Error_Handler>
	}
}
 8004578:	bf00      	nop
 800457a:	3750      	adds	r7, #80	; 0x50
 800457c:	46bd      	mov	sp, r7
 800457e:	bd80      	pop	{r7, pc}
 8004580:	40023800 	.word	0x40023800
 8004584:	40007000 	.word	0x40007000

08004588 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
static void Error_Handler(void)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	af00      	add	r7, sp, #0
	/* Turn LED2 on */
	BSP_LED_On(LED2);
 800458c:	2001      	movs	r0, #1
 800458e:	f7fc ff1b 	bl	80013c8 <BSP_LED_On>
	while (1)
 8004592:	e7fe      	b.n	8004592 <Error_Handler+0xa>

08004594 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8004594:	f8df d034 	ldr.w	sp, [pc, #52]	; 80045cc <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8004598:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 800459a:	e003      	b.n	80045a4 <LoopCopyDataInit>

0800459c <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 800459c:	4b0c      	ldr	r3, [pc, #48]	; (80045d0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 800459e:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80045a0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80045a2:	3104      	adds	r1, #4

080045a4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80045a4:	480b      	ldr	r0, [pc, #44]	; (80045d4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80045a6:	4b0c      	ldr	r3, [pc, #48]	; (80045d8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80045a8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80045aa:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80045ac:	d3f6      	bcc.n	800459c <CopyDataInit>
  ldr  r2, =_sbss
 80045ae:	4a0b      	ldr	r2, [pc, #44]	; (80045dc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80045b0:	e002      	b.n	80045b8 <LoopFillZerobss>

080045b2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80045b2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80045b4:	f842 3b04 	str.w	r3, [r2], #4

080045b8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80045b8:	4b09      	ldr	r3, [pc, #36]	; (80045e0 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80045ba:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80045bc:	d3f9      	bcc.n	80045b2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80045be:	f7fc ff89 	bl	80014d4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80045c2:	f000 f837 	bl	8004634 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80045c6:	f7ff ff09 	bl	80043dc <main>
  bx  lr    
 80045ca:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80045cc:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80045d0:	08004fa0 	.word	0x08004fa0
  ldr  r0, =_sdata
 80045d4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80045d8:	2000012c 	.word	0x2000012c
  ldr  r2, =_sbss
 80045dc:	2000012c 	.word	0x2000012c
  ldr  r3, = _ebss
 80045e0:	200003b0 	.word	0x200003b0

080045e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80045e4:	e7fe      	b.n	80045e4 <ADC_IRQHandler>
	...

080045e8 <siprintf>:
 80045e8:	b40e      	push	{r1, r2, r3}
 80045ea:	b500      	push	{lr}
 80045ec:	b09c      	sub	sp, #112	; 0x70
 80045ee:	ab1d      	add	r3, sp, #116	; 0x74
 80045f0:	9002      	str	r0, [sp, #8]
 80045f2:	9006      	str	r0, [sp, #24]
 80045f4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80045f8:	4809      	ldr	r0, [pc, #36]	; (8004620 <siprintf+0x38>)
 80045fa:	9107      	str	r1, [sp, #28]
 80045fc:	9104      	str	r1, [sp, #16]
 80045fe:	4909      	ldr	r1, [pc, #36]	; (8004624 <siprintf+0x3c>)
 8004600:	f853 2b04 	ldr.w	r2, [r3], #4
 8004604:	9105      	str	r1, [sp, #20]
 8004606:	6800      	ldr	r0, [r0, #0]
 8004608:	9301      	str	r3, [sp, #4]
 800460a:	a902      	add	r1, sp, #8
 800460c:	f000 f98a 	bl	8004924 <_svfiprintf_r>
 8004610:	9b02      	ldr	r3, [sp, #8]
 8004612:	2200      	movs	r2, #0
 8004614:	701a      	strb	r2, [r3, #0]
 8004616:	b01c      	add	sp, #112	; 0x70
 8004618:	f85d eb04 	ldr.w	lr, [sp], #4
 800461c:	b003      	add	sp, #12
 800461e:	4770      	bx	lr
 8004620:	20000128 	.word	0x20000128
 8004624:	ffff0208 	.word	0xffff0208

08004628 <__errno>:
 8004628:	4b01      	ldr	r3, [pc, #4]	; (8004630 <__errno+0x8>)
 800462a:	6818      	ldr	r0, [r3, #0]
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	20000128 	.word	0x20000128

08004634 <__libc_init_array>:
 8004634:	b570      	push	{r4, r5, r6, lr}
 8004636:	4d0d      	ldr	r5, [pc, #52]	; (800466c <__libc_init_array+0x38>)
 8004638:	4c0d      	ldr	r4, [pc, #52]	; (8004670 <__libc_init_array+0x3c>)
 800463a:	1b64      	subs	r4, r4, r5
 800463c:	10a4      	asrs	r4, r4, #2
 800463e:	2600      	movs	r6, #0
 8004640:	42a6      	cmp	r6, r4
 8004642:	d109      	bne.n	8004658 <__libc_init_array+0x24>
 8004644:	4d0b      	ldr	r5, [pc, #44]	; (8004674 <__libc_init_array+0x40>)
 8004646:	4c0c      	ldr	r4, [pc, #48]	; (8004678 <__libc_init_array+0x44>)
 8004648:	f000 fc6a 	bl	8004f20 <_init>
 800464c:	1b64      	subs	r4, r4, r5
 800464e:	10a4      	asrs	r4, r4, #2
 8004650:	2600      	movs	r6, #0
 8004652:	42a6      	cmp	r6, r4
 8004654:	d105      	bne.n	8004662 <__libc_init_array+0x2e>
 8004656:	bd70      	pop	{r4, r5, r6, pc}
 8004658:	f855 3b04 	ldr.w	r3, [r5], #4
 800465c:	4798      	blx	r3
 800465e:	3601      	adds	r6, #1
 8004660:	e7ee      	b.n	8004640 <__libc_init_array+0xc>
 8004662:	f855 3b04 	ldr.w	r3, [r5], #4
 8004666:	4798      	blx	r3
 8004668:	3601      	adds	r6, #1
 800466a:	e7f2      	b.n	8004652 <__libc_init_array+0x1e>
 800466c:	08004f98 	.word	0x08004f98
 8004670:	08004f98 	.word	0x08004f98
 8004674:	08004f98 	.word	0x08004f98
 8004678:	08004f9c 	.word	0x08004f9c

0800467c <__retarget_lock_acquire_recursive>:
 800467c:	4770      	bx	lr

0800467e <__retarget_lock_release_recursive>:
 800467e:	4770      	bx	lr

08004680 <_free_r>:
 8004680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8004682:	2900      	cmp	r1, #0
 8004684:	d044      	beq.n	8004710 <_free_r+0x90>
 8004686:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800468a:	9001      	str	r0, [sp, #4]
 800468c:	2b00      	cmp	r3, #0
 800468e:	f1a1 0404 	sub.w	r4, r1, #4
 8004692:	bfb8      	it	lt
 8004694:	18e4      	addlt	r4, r4, r3
 8004696:	f000 f8df 	bl	8004858 <__malloc_lock>
 800469a:	4a1e      	ldr	r2, [pc, #120]	; (8004714 <_free_r+0x94>)
 800469c:	9801      	ldr	r0, [sp, #4]
 800469e:	6813      	ldr	r3, [r2, #0]
 80046a0:	b933      	cbnz	r3, 80046b0 <_free_r+0x30>
 80046a2:	6063      	str	r3, [r4, #4]
 80046a4:	6014      	str	r4, [r2, #0]
 80046a6:	b003      	add	sp, #12
 80046a8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80046ac:	f000 b8da 	b.w	8004864 <__malloc_unlock>
 80046b0:	42a3      	cmp	r3, r4
 80046b2:	d908      	bls.n	80046c6 <_free_r+0x46>
 80046b4:	6825      	ldr	r5, [r4, #0]
 80046b6:	1961      	adds	r1, r4, r5
 80046b8:	428b      	cmp	r3, r1
 80046ba:	bf01      	itttt	eq
 80046bc:	6819      	ldreq	r1, [r3, #0]
 80046be:	685b      	ldreq	r3, [r3, #4]
 80046c0:	1949      	addeq	r1, r1, r5
 80046c2:	6021      	streq	r1, [r4, #0]
 80046c4:	e7ed      	b.n	80046a2 <_free_r+0x22>
 80046c6:	461a      	mov	r2, r3
 80046c8:	685b      	ldr	r3, [r3, #4]
 80046ca:	b10b      	cbz	r3, 80046d0 <_free_r+0x50>
 80046cc:	42a3      	cmp	r3, r4
 80046ce:	d9fa      	bls.n	80046c6 <_free_r+0x46>
 80046d0:	6811      	ldr	r1, [r2, #0]
 80046d2:	1855      	adds	r5, r2, r1
 80046d4:	42a5      	cmp	r5, r4
 80046d6:	d10b      	bne.n	80046f0 <_free_r+0x70>
 80046d8:	6824      	ldr	r4, [r4, #0]
 80046da:	4421      	add	r1, r4
 80046dc:	1854      	adds	r4, r2, r1
 80046de:	42a3      	cmp	r3, r4
 80046e0:	6011      	str	r1, [r2, #0]
 80046e2:	d1e0      	bne.n	80046a6 <_free_r+0x26>
 80046e4:	681c      	ldr	r4, [r3, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	6053      	str	r3, [r2, #4]
 80046ea:	440c      	add	r4, r1
 80046ec:	6014      	str	r4, [r2, #0]
 80046ee:	e7da      	b.n	80046a6 <_free_r+0x26>
 80046f0:	d902      	bls.n	80046f8 <_free_r+0x78>
 80046f2:	230c      	movs	r3, #12
 80046f4:	6003      	str	r3, [r0, #0]
 80046f6:	e7d6      	b.n	80046a6 <_free_r+0x26>
 80046f8:	6825      	ldr	r5, [r4, #0]
 80046fa:	1961      	adds	r1, r4, r5
 80046fc:	428b      	cmp	r3, r1
 80046fe:	bf04      	itt	eq
 8004700:	6819      	ldreq	r1, [r3, #0]
 8004702:	685b      	ldreq	r3, [r3, #4]
 8004704:	6063      	str	r3, [r4, #4]
 8004706:	bf04      	itt	eq
 8004708:	1949      	addeq	r1, r1, r5
 800470a:	6021      	streq	r1, [r4, #0]
 800470c:	6054      	str	r4, [r2, #4]
 800470e:	e7ca      	b.n	80046a6 <_free_r+0x26>
 8004710:	b003      	add	sp, #12
 8004712:	bd30      	pop	{r4, r5, pc}
 8004714:	200003a8 	.word	0x200003a8

08004718 <sbrk_aligned>:
 8004718:	b570      	push	{r4, r5, r6, lr}
 800471a:	4e0e      	ldr	r6, [pc, #56]	; (8004754 <sbrk_aligned+0x3c>)
 800471c:	460c      	mov	r4, r1
 800471e:	6831      	ldr	r1, [r6, #0]
 8004720:	4605      	mov	r5, r0
 8004722:	b911      	cbnz	r1, 800472a <sbrk_aligned+0x12>
 8004724:	f000 fba6 	bl	8004e74 <_sbrk_r>
 8004728:	6030      	str	r0, [r6, #0]
 800472a:	4621      	mov	r1, r4
 800472c:	4628      	mov	r0, r5
 800472e:	f000 fba1 	bl	8004e74 <_sbrk_r>
 8004732:	1c43      	adds	r3, r0, #1
 8004734:	d00a      	beq.n	800474c <sbrk_aligned+0x34>
 8004736:	1cc4      	adds	r4, r0, #3
 8004738:	f024 0403 	bic.w	r4, r4, #3
 800473c:	42a0      	cmp	r0, r4
 800473e:	d007      	beq.n	8004750 <sbrk_aligned+0x38>
 8004740:	1a21      	subs	r1, r4, r0
 8004742:	4628      	mov	r0, r5
 8004744:	f000 fb96 	bl	8004e74 <_sbrk_r>
 8004748:	3001      	adds	r0, #1
 800474a:	d101      	bne.n	8004750 <sbrk_aligned+0x38>
 800474c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8004750:	4620      	mov	r0, r4
 8004752:	bd70      	pop	{r4, r5, r6, pc}
 8004754:	200003ac 	.word	0x200003ac

08004758 <_malloc_r>:
 8004758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800475c:	1ccd      	adds	r5, r1, #3
 800475e:	f025 0503 	bic.w	r5, r5, #3
 8004762:	3508      	adds	r5, #8
 8004764:	2d0c      	cmp	r5, #12
 8004766:	bf38      	it	cc
 8004768:	250c      	movcc	r5, #12
 800476a:	2d00      	cmp	r5, #0
 800476c:	4607      	mov	r7, r0
 800476e:	db01      	blt.n	8004774 <_malloc_r+0x1c>
 8004770:	42a9      	cmp	r1, r5
 8004772:	d905      	bls.n	8004780 <_malloc_r+0x28>
 8004774:	230c      	movs	r3, #12
 8004776:	603b      	str	r3, [r7, #0]
 8004778:	2600      	movs	r6, #0
 800477a:	4630      	mov	r0, r6
 800477c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004780:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8004854 <_malloc_r+0xfc>
 8004784:	f000 f868 	bl	8004858 <__malloc_lock>
 8004788:	f8d8 3000 	ldr.w	r3, [r8]
 800478c:	461c      	mov	r4, r3
 800478e:	bb5c      	cbnz	r4, 80047e8 <_malloc_r+0x90>
 8004790:	4629      	mov	r1, r5
 8004792:	4638      	mov	r0, r7
 8004794:	f7ff ffc0 	bl	8004718 <sbrk_aligned>
 8004798:	1c43      	adds	r3, r0, #1
 800479a:	4604      	mov	r4, r0
 800479c:	d155      	bne.n	800484a <_malloc_r+0xf2>
 800479e:	f8d8 4000 	ldr.w	r4, [r8]
 80047a2:	4626      	mov	r6, r4
 80047a4:	2e00      	cmp	r6, #0
 80047a6:	d145      	bne.n	8004834 <_malloc_r+0xdc>
 80047a8:	2c00      	cmp	r4, #0
 80047aa:	d048      	beq.n	800483e <_malloc_r+0xe6>
 80047ac:	6823      	ldr	r3, [r4, #0]
 80047ae:	4631      	mov	r1, r6
 80047b0:	4638      	mov	r0, r7
 80047b2:	eb04 0903 	add.w	r9, r4, r3
 80047b6:	f000 fb5d 	bl	8004e74 <_sbrk_r>
 80047ba:	4581      	cmp	r9, r0
 80047bc:	d13f      	bne.n	800483e <_malloc_r+0xe6>
 80047be:	6821      	ldr	r1, [r4, #0]
 80047c0:	1a6d      	subs	r5, r5, r1
 80047c2:	4629      	mov	r1, r5
 80047c4:	4638      	mov	r0, r7
 80047c6:	f7ff ffa7 	bl	8004718 <sbrk_aligned>
 80047ca:	3001      	adds	r0, #1
 80047cc:	d037      	beq.n	800483e <_malloc_r+0xe6>
 80047ce:	6823      	ldr	r3, [r4, #0]
 80047d0:	442b      	add	r3, r5
 80047d2:	6023      	str	r3, [r4, #0]
 80047d4:	f8d8 3000 	ldr.w	r3, [r8]
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d038      	beq.n	800484e <_malloc_r+0xf6>
 80047dc:	685a      	ldr	r2, [r3, #4]
 80047de:	42a2      	cmp	r2, r4
 80047e0:	d12b      	bne.n	800483a <_malloc_r+0xe2>
 80047e2:	2200      	movs	r2, #0
 80047e4:	605a      	str	r2, [r3, #4]
 80047e6:	e00f      	b.n	8004808 <_malloc_r+0xb0>
 80047e8:	6822      	ldr	r2, [r4, #0]
 80047ea:	1b52      	subs	r2, r2, r5
 80047ec:	d41f      	bmi.n	800482e <_malloc_r+0xd6>
 80047ee:	2a0b      	cmp	r2, #11
 80047f0:	d917      	bls.n	8004822 <_malloc_r+0xca>
 80047f2:	1961      	adds	r1, r4, r5
 80047f4:	42a3      	cmp	r3, r4
 80047f6:	6025      	str	r5, [r4, #0]
 80047f8:	bf18      	it	ne
 80047fa:	6059      	strne	r1, [r3, #4]
 80047fc:	6863      	ldr	r3, [r4, #4]
 80047fe:	bf08      	it	eq
 8004800:	f8c8 1000 	streq.w	r1, [r8]
 8004804:	5162      	str	r2, [r4, r5]
 8004806:	604b      	str	r3, [r1, #4]
 8004808:	4638      	mov	r0, r7
 800480a:	f104 060b 	add.w	r6, r4, #11
 800480e:	f000 f829 	bl	8004864 <__malloc_unlock>
 8004812:	f026 0607 	bic.w	r6, r6, #7
 8004816:	1d23      	adds	r3, r4, #4
 8004818:	1af2      	subs	r2, r6, r3
 800481a:	d0ae      	beq.n	800477a <_malloc_r+0x22>
 800481c:	1b9b      	subs	r3, r3, r6
 800481e:	50a3      	str	r3, [r4, r2]
 8004820:	e7ab      	b.n	800477a <_malloc_r+0x22>
 8004822:	42a3      	cmp	r3, r4
 8004824:	6862      	ldr	r2, [r4, #4]
 8004826:	d1dd      	bne.n	80047e4 <_malloc_r+0x8c>
 8004828:	f8c8 2000 	str.w	r2, [r8]
 800482c:	e7ec      	b.n	8004808 <_malloc_r+0xb0>
 800482e:	4623      	mov	r3, r4
 8004830:	6864      	ldr	r4, [r4, #4]
 8004832:	e7ac      	b.n	800478e <_malloc_r+0x36>
 8004834:	4634      	mov	r4, r6
 8004836:	6876      	ldr	r6, [r6, #4]
 8004838:	e7b4      	b.n	80047a4 <_malloc_r+0x4c>
 800483a:	4613      	mov	r3, r2
 800483c:	e7cc      	b.n	80047d8 <_malloc_r+0x80>
 800483e:	230c      	movs	r3, #12
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4638      	mov	r0, r7
 8004844:	f000 f80e 	bl	8004864 <__malloc_unlock>
 8004848:	e797      	b.n	800477a <_malloc_r+0x22>
 800484a:	6025      	str	r5, [r4, #0]
 800484c:	e7dc      	b.n	8004808 <_malloc_r+0xb0>
 800484e:	605b      	str	r3, [r3, #4]
 8004850:	deff      	udf	#255	; 0xff
 8004852:	bf00      	nop
 8004854:	200003a8 	.word	0x200003a8

08004858 <__malloc_lock>:
 8004858:	4801      	ldr	r0, [pc, #4]	; (8004860 <__malloc_lock+0x8>)
 800485a:	f7ff bf0f 	b.w	800467c <__retarget_lock_acquire_recursive>
 800485e:	bf00      	nop
 8004860:	200003a4 	.word	0x200003a4

08004864 <__malloc_unlock>:
 8004864:	4801      	ldr	r0, [pc, #4]	; (800486c <__malloc_unlock+0x8>)
 8004866:	f7ff bf0a 	b.w	800467e <__retarget_lock_release_recursive>
 800486a:	bf00      	nop
 800486c:	200003a4 	.word	0x200003a4

08004870 <__ssputs_r>:
 8004870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004874:	688e      	ldr	r6, [r1, #8]
 8004876:	461f      	mov	r7, r3
 8004878:	42be      	cmp	r6, r7
 800487a:	680b      	ldr	r3, [r1, #0]
 800487c:	4682      	mov	sl, r0
 800487e:	460c      	mov	r4, r1
 8004880:	4690      	mov	r8, r2
 8004882:	d82c      	bhi.n	80048de <__ssputs_r+0x6e>
 8004884:	898a      	ldrh	r2, [r1, #12]
 8004886:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800488a:	d026      	beq.n	80048da <__ssputs_r+0x6a>
 800488c:	6965      	ldr	r5, [r4, #20]
 800488e:	6909      	ldr	r1, [r1, #16]
 8004890:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004894:	eba3 0901 	sub.w	r9, r3, r1
 8004898:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800489c:	1c7b      	adds	r3, r7, #1
 800489e:	444b      	add	r3, r9
 80048a0:	106d      	asrs	r5, r5, #1
 80048a2:	429d      	cmp	r5, r3
 80048a4:	bf38      	it	cc
 80048a6:	461d      	movcc	r5, r3
 80048a8:	0553      	lsls	r3, r2, #21
 80048aa:	d527      	bpl.n	80048fc <__ssputs_r+0x8c>
 80048ac:	4629      	mov	r1, r5
 80048ae:	f7ff ff53 	bl	8004758 <_malloc_r>
 80048b2:	4606      	mov	r6, r0
 80048b4:	b360      	cbz	r0, 8004910 <__ssputs_r+0xa0>
 80048b6:	6921      	ldr	r1, [r4, #16]
 80048b8:	464a      	mov	r2, r9
 80048ba:	f000 faeb 	bl	8004e94 <memcpy>
 80048be:	89a3      	ldrh	r3, [r4, #12]
 80048c0:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80048c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80048c8:	81a3      	strh	r3, [r4, #12]
 80048ca:	6126      	str	r6, [r4, #16]
 80048cc:	6165      	str	r5, [r4, #20]
 80048ce:	444e      	add	r6, r9
 80048d0:	eba5 0509 	sub.w	r5, r5, r9
 80048d4:	6026      	str	r6, [r4, #0]
 80048d6:	60a5      	str	r5, [r4, #8]
 80048d8:	463e      	mov	r6, r7
 80048da:	42be      	cmp	r6, r7
 80048dc:	d900      	bls.n	80048e0 <__ssputs_r+0x70>
 80048de:	463e      	mov	r6, r7
 80048e0:	6820      	ldr	r0, [r4, #0]
 80048e2:	4632      	mov	r2, r6
 80048e4:	4641      	mov	r1, r8
 80048e6:	f000 faab 	bl	8004e40 <memmove>
 80048ea:	68a3      	ldr	r3, [r4, #8]
 80048ec:	1b9b      	subs	r3, r3, r6
 80048ee:	60a3      	str	r3, [r4, #8]
 80048f0:	6823      	ldr	r3, [r4, #0]
 80048f2:	4433      	add	r3, r6
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	2000      	movs	r0, #0
 80048f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80048fc:	462a      	mov	r2, r5
 80048fe:	f000 fad7 	bl	8004eb0 <_realloc_r>
 8004902:	4606      	mov	r6, r0
 8004904:	2800      	cmp	r0, #0
 8004906:	d1e0      	bne.n	80048ca <__ssputs_r+0x5a>
 8004908:	6921      	ldr	r1, [r4, #16]
 800490a:	4650      	mov	r0, sl
 800490c:	f7ff feb8 	bl	8004680 <_free_r>
 8004910:	230c      	movs	r3, #12
 8004912:	f8ca 3000 	str.w	r3, [sl]
 8004916:	89a3      	ldrh	r3, [r4, #12]
 8004918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800491c:	81a3      	strh	r3, [r4, #12]
 800491e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004922:	e7e9      	b.n	80048f8 <__ssputs_r+0x88>

08004924 <_svfiprintf_r>:
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	4698      	mov	r8, r3
 800492a:	898b      	ldrh	r3, [r1, #12]
 800492c:	061b      	lsls	r3, r3, #24
 800492e:	b09d      	sub	sp, #116	; 0x74
 8004930:	4607      	mov	r7, r0
 8004932:	460d      	mov	r5, r1
 8004934:	4614      	mov	r4, r2
 8004936:	d50e      	bpl.n	8004956 <_svfiprintf_r+0x32>
 8004938:	690b      	ldr	r3, [r1, #16]
 800493a:	b963      	cbnz	r3, 8004956 <_svfiprintf_r+0x32>
 800493c:	2140      	movs	r1, #64	; 0x40
 800493e:	f7ff ff0b 	bl	8004758 <_malloc_r>
 8004942:	6028      	str	r0, [r5, #0]
 8004944:	6128      	str	r0, [r5, #16]
 8004946:	b920      	cbnz	r0, 8004952 <_svfiprintf_r+0x2e>
 8004948:	230c      	movs	r3, #12
 800494a:	603b      	str	r3, [r7, #0]
 800494c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004950:	e0d0      	b.n	8004af4 <_svfiprintf_r+0x1d0>
 8004952:	2340      	movs	r3, #64	; 0x40
 8004954:	616b      	str	r3, [r5, #20]
 8004956:	2300      	movs	r3, #0
 8004958:	9309      	str	r3, [sp, #36]	; 0x24
 800495a:	2320      	movs	r3, #32
 800495c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004960:	f8cd 800c 	str.w	r8, [sp, #12]
 8004964:	2330      	movs	r3, #48	; 0x30
 8004966:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8004b0c <_svfiprintf_r+0x1e8>
 800496a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800496e:	f04f 0901 	mov.w	r9, #1
 8004972:	4623      	mov	r3, r4
 8004974:	469a      	mov	sl, r3
 8004976:	f813 2b01 	ldrb.w	r2, [r3], #1
 800497a:	b10a      	cbz	r2, 8004980 <_svfiprintf_r+0x5c>
 800497c:	2a25      	cmp	r2, #37	; 0x25
 800497e:	d1f9      	bne.n	8004974 <_svfiprintf_r+0x50>
 8004980:	ebba 0b04 	subs.w	fp, sl, r4
 8004984:	d00b      	beq.n	800499e <_svfiprintf_r+0x7a>
 8004986:	465b      	mov	r3, fp
 8004988:	4622      	mov	r2, r4
 800498a:	4629      	mov	r1, r5
 800498c:	4638      	mov	r0, r7
 800498e:	f7ff ff6f 	bl	8004870 <__ssputs_r>
 8004992:	3001      	adds	r0, #1
 8004994:	f000 80a9 	beq.w	8004aea <_svfiprintf_r+0x1c6>
 8004998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800499a:	445a      	add	r2, fp
 800499c:	9209      	str	r2, [sp, #36]	; 0x24
 800499e:	f89a 3000 	ldrb.w	r3, [sl]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	f000 80a1 	beq.w	8004aea <_svfiprintf_r+0x1c6>
 80049a8:	2300      	movs	r3, #0
 80049aa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80049ae:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80049b2:	f10a 0a01 	add.w	sl, sl, #1
 80049b6:	9304      	str	r3, [sp, #16]
 80049b8:	9307      	str	r3, [sp, #28]
 80049ba:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80049be:	931a      	str	r3, [sp, #104]	; 0x68
 80049c0:	4654      	mov	r4, sl
 80049c2:	2205      	movs	r2, #5
 80049c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80049c8:	4850      	ldr	r0, [pc, #320]	; (8004b0c <_svfiprintf_r+0x1e8>)
 80049ca:	f7fb fc11 	bl	80001f0 <memchr>
 80049ce:	9a04      	ldr	r2, [sp, #16]
 80049d0:	b9d8      	cbnz	r0, 8004a0a <_svfiprintf_r+0xe6>
 80049d2:	06d0      	lsls	r0, r2, #27
 80049d4:	bf44      	itt	mi
 80049d6:	2320      	movmi	r3, #32
 80049d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049dc:	0711      	lsls	r1, r2, #28
 80049de:	bf44      	itt	mi
 80049e0:	232b      	movmi	r3, #43	; 0x2b
 80049e2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80049e6:	f89a 3000 	ldrb.w	r3, [sl]
 80049ea:	2b2a      	cmp	r3, #42	; 0x2a
 80049ec:	d015      	beq.n	8004a1a <_svfiprintf_r+0xf6>
 80049ee:	9a07      	ldr	r2, [sp, #28]
 80049f0:	4654      	mov	r4, sl
 80049f2:	2000      	movs	r0, #0
 80049f4:	f04f 0c0a 	mov.w	ip, #10
 80049f8:	4621      	mov	r1, r4
 80049fa:	f811 3b01 	ldrb.w	r3, [r1], #1
 80049fe:	3b30      	subs	r3, #48	; 0x30
 8004a00:	2b09      	cmp	r3, #9
 8004a02:	d94d      	bls.n	8004aa0 <_svfiprintf_r+0x17c>
 8004a04:	b1b0      	cbz	r0, 8004a34 <_svfiprintf_r+0x110>
 8004a06:	9207      	str	r2, [sp, #28]
 8004a08:	e014      	b.n	8004a34 <_svfiprintf_r+0x110>
 8004a0a:	eba0 0308 	sub.w	r3, r0, r8
 8004a0e:	fa09 f303 	lsl.w	r3, r9, r3
 8004a12:	4313      	orrs	r3, r2
 8004a14:	9304      	str	r3, [sp, #16]
 8004a16:	46a2      	mov	sl, r4
 8004a18:	e7d2      	b.n	80049c0 <_svfiprintf_r+0x9c>
 8004a1a:	9b03      	ldr	r3, [sp, #12]
 8004a1c:	1d19      	adds	r1, r3, #4
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	9103      	str	r1, [sp, #12]
 8004a22:	2b00      	cmp	r3, #0
 8004a24:	bfbb      	ittet	lt
 8004a26:	425b      	neglt	r3, r3
 8004a28:	f042 0202 	orrlt.w	r2, r2, #2
 8004a2c:	9307      	strge	r3, [sp, #28]
 8004a2e:	9307      	strlt	r3, [sp, #28]
 8004a30:	bfb8      	it	lt
 8004a32:	9204      	strlt	r2, [sp, #16]
 8004a34:	7823      	ldrb	r3, [r4, #0]
 8004a36:	2b2e      	cmp	r3, #46	; 0x2e
 8004a38:	d10c      	bne.n	8004a54 <_svfiprintf_r+0x130>
 8004a3a:	7863      	ldrb	r3, [r4, #1]
 8004a3c:	2b2a      	cmp	r3, #42	; 0x2a
 8004a3e:	d134      	bne.n	8004aaa <_svfiprintf_r+0x186>
 8004a40:	9b03      	ldr	r3, [sp, #12]
 8004a42:	1d1a      	adds	r2, r3, #4
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	9203      	str	r2, [sp, #12]
 8004a48:	2b00      	cmp	r3, #0
 8004a4a:	bfb8      	it	lt
 8004a4c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 8004a50:	3402      	adds	r4, #2
 8004a52:	9305      	str	r3, [sp, #20]
 8004a54:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8004b1c <_svfiprintf_r+0x1f8>
 8004a58:	7821      	ldrb	r1, [r4, #0]
 8004a5a:	2203      	movs	r2, #3
 8004a5c:	4650      	mov	r0, sl
 8004a5e:	f7fb fbc7 	bl	80001f0 <memchr>
 8004a62:	b138      	cbz	r0, 8004a74 <_svfiprintf_r+0x150>
 8004a64:	9b04      	ldr	r3, [sp, #16]
 8004a66:	eba0 000a 	sub.w	r0, r0, sl
 8004a6a:	2240      	movs	r2, #64	; 0x40
 8004a6c:	4082      	lsls	r2, r0
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	3401      	adds	r4, #1
 8004a72:	9304      	str	r3, [sp, #16]
 8004a74:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004a78:	4825      	ldr	r0, [pc, #148]	; (8004b10 <_svfiprintf_r+0x1ec>)
 8004a7a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8004a7e:	2206      	movs	r2, #6
 8004a80:	f7fb fbb6 	bl	80001f0 <memchr>
 8004a84:	2800      	cmp	r0, #0
 8004a86:	d038      	beq.n	8004afa <_svfiprintf_r+0x1d6>
 8004a88:	4b22      	ldr	r3, [pc, #136]	; (8004b14 <_svfiprintf_r+0x1f0>)
 8004a8a:	bb1b      	cbnz	r3, 8004ad4 <_svfiprintf_r+0x1b0>
 8004a8c:	9b03      	ldr	r3, [sp, #12]
 8004a8e:	3307      	adds	r3, #7
 8004a90:	f023 0307 	bic.w	r3, r3, #7
 8004a94:	3308      	adds	r3, #8
 8004a96:	9303      	str	r3, [sp, #12]
 8004a98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a9a:	4433      	add	r3, r6
 8004a9c:	9309      	str	r3, [sp, #36]	; 0x24
 8004a9e:	e768      	b.n	8004972 <_svfiprintf_r+0x4e>
 8004aa0:	fb0c 3202 	mla	r2, ip, r2, r3
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	2001      	movs	r0, #1
 8004aa8:	e7a6      	b.n	80049f8 <_svfiprintf_r+0xd4>
 8004aaa:	2300      	movs	r3, #0
 8004aac:	3401      	adds	r4, #1
 8004aae:	9305      	str	r3, [sp, #20]
 8004ab0:	4619      	mov	r1, r3
 8004ab2:	f04f 0c0a 	mov.w	ip, #10
 8004ab6:	4620      	mov	r0, r4
 8004ab8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004abc:	3a30      	subs	r2, #48	; 0x30
 8004abe:	2a09      	cmp	r2, #9
 8004ac0:	d903      	bls.n	8004aca <_svfiprintf_r+0x1a6>
 8004ac2:	2b00      	cmp	r3, #0
 8004ac4:	d0c6      	beq.n	8004a54 <_svfiprintf_r+0x130>
 8004ac6:	9105      	str	r1, [sp, #20]
 8004ac8:	e7c4      	b.n	8004a54 <_svfiprintf_r+0x130>
 8004aca:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ace:	4604      	mov	r4, r0
 8004ad0:	2301      	movs	r3, #1
 8004ad2:	e7f0      	b.n	8004ab6 <_svfiprintf_r+0x192>
 8004ad4:	ab03      	add	r3, sp, #12
 8004ad6:	9300      	str	r3, [sp, #0]
 8004ad8:	462a      	mov	r2, r5
 8004ada:	4b0f      	ldr	r3, [pc, #60]	; (8004b18 <_svfiprintf_r+0x1f4>)
 8004adc:	a904      	add	r1, sp, #16
 8004ade:	4638      	mov	r0, r7
 8004ae0:	f3af 8000 	nop.w
 8004ae4:	1c42      	adds	r2, r0, #1
 8004ae6:	4606      	mov	r6, r0
 8004ae8:	d1d6      	bne.n	8004a98 <_svfiprintf_r+0x174>
 8004aea:	89ab      	ldrh	r3, [r5, #12]
 8004aec:	065b      	lsls	r3, r3, #25
 8004aee:	f53f af2d 	bmi.w	800494c <_svfiprintf_r+0x28>
 8004af2:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004af4:	b01d      	add	sp, #116	; 0x74
 8004af6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004afa:	ab03      	add	r3, sp, #12
 8004afc:	9300      	str	r3, [sp, #0]
 8004afe:	462a      	mov	r2, r5
 8004b00:	4b05      	ldr	r3, [pc, #20]	; (8004b18 <_svfiprintf_r+0x1f4>)
 8004b02:	a904      	add	r1, sp, #16
 8004b04:	4638      	mov	r0, r7
 8004b06:	f000 f879 	bl	8004bfc <_printf_i>
 8004b0a:	e7eb      	b.n	8004ae4 <_svfiprintf_r+0x1c0>
 8004b0c:	08004f5c 	.word	0x08004f5c
 8004b10:	08004f66 	.word	0x08004f66
 8004b14:	00000000 	.word	0x00000000
 8004b18:	08004871 	.word	0x08004871
 8004b1c:	08004f62 	.word	0x08004f62

08004b20 <_printf_common>:
 8004b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004b24:	4616      	mov	r6, r2
 8004b26:	4699      	mov	r9, r3
 8004b28:	688a      	ldr	r2, [r1, #8]
 8004b2a:	690b      	ldr	r3, [r1, #16]
 8004b2c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004b30:	4293      	cmp	r3, r2
 8004b32:	bfb8      	it	lt
 8004b34:	4613      	movlt	r3, r2
 8004b36:	6033      	str	r3, [r6, #0]
 8004b38:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004b3c:	4607      	mov	r7, r0
 8004b3e:	460c      	mov	r4, r1
 8004b40:	b10a      	cbz	r2, 8004b46 <_printf_common+0x26>
 8004b42:	3301      	adds	r3, #1
 8004b44:	6033      	str	r3, [r6, #0]
 8004b46:	6823      	ldr	r3, [r4, #0]
 8004b48:	0699      	lsls	r1, r3, #26
 8004b4a:	bf42      	ittt	mi
 8004b4c:	6833      	ldrmi	r3, [r6, #0]
 8004b4e:	3302      	addmi	r3, #2
 8004b50:	6033      	strmi	r3, [r6, #0]
 8004b52:	6825      	ldr	r5, [r4, #0]
 8004b54:	f015 0506 	ands.w	r5, r5, #6
 8004b58:	d106      	bne.n	8004b68 <_printf_common+0x48>
 8004b5a:	f104 0a19 	add.w	sl, r4, #25
 8004b5e:	68e3      	ldr	r3, [r4, #12]
 8004b60:	6832      	ldr	r2, [r6, #0]
 8004b62:	1a9b      	subs	r3, r3, r2
 8004b64:	42ab      	cmp	r3, r5
 8004b66:	dc26      	bgt.n	8004bb6 <_printf_common+0x96>
 8004b68:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b6c:	1e13      	subs	r3, r2, #0
 8004b6e:	6822      	ldr	r2, [r4, #0]
 8004b70:	bf18      	it	ne
 8004b72:	2301      	movne	r3, #1
 8004b74:	0692      	lsls	r2, r2, #26
 8004b76:	d42b      	bmi.n	8004bd0 <_printf_common+0xb0>
 8004b78:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b7c:	4649      	mov	r1, r9
 8004b7e:	4638      	mov	r0, r7
 8004b80:	47c0      	blx	r8
 8004b82:	3001      	adds	r0, #1
 8004b84:	d01e      	beq.n	8004bc4 <_printf_common+0xa4>
 8004b86:	6823      	ldr	r3, [r4, #0]
 8004b88:	6922      	ldr	r2, [r4, #16]
 8004b8a:	f003 0306 	and.w	r3, r3, #6
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	bf02      	ittt	eq
 8004b92:	68e5      	ldreq	r5, [r4, #12]
 8004b94:	6833      	ldreq	r3, [r6, #0]
 8004b96:	1aed      	subeq	r5, r5, r3
 8004b98:	68a3      	ldr	r3, [r4, #8]
 8004b9a:	bf0c      	ite	eq
 8004b9c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004ba0:	2500      	movne	r5, #0
 8004ba2:	4293      	cmp	r3, r2
 8004ba4:	bfc4      	itt	gt
 8004ba6:	1a9b      	subgt	r3, r3, r2
 8004ba8:	18ed      	addgt	r5, r5, r3
 8004baa:	2600      	movs	r6, #0
 8004bac:	341a      	adds	r4, #26
 8004bae:	42b5      	cmp	r5, r6
 8004bb0:	d11a      	bne.n	8004be8 <_printf_common+0xc8>
 8004bb2:	2000      	movs	r0, #0
 8004bb4:	e008      	b.n	8004bc8 <_printf_common+0xa8>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	4652      	mov	r2, sl
 8004bba:	4649      	mov	r1, r9
 8004bbc:	4638      	mov	r0, r7
 8004bbe:	47c0      	blx	r8
 8004bc0:	3001      	adds	r0, #1
 8004bc2:	d103      	bne.n	8004bcc <_printf_common+0xac>
 8004bc4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004bc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004bcc:	3501      	adds	r5, #1
 8004bce:	e7c6      	b.n	8004b5e <_printf_common+0x3e>
 8004bd0:	18e1      	adds	r1, r4, r3
 8004bd2:	1c5a      	adds	r2, r3, #1
 8004bd4:	2030      	movs	r0, #48	; 0x30
 8004bd6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004bda:	4422      	add	r2, r4
 8004bdc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004be0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004be4:	3302      	adds	r3, #2
 8004be6:	e7c7      	b.n	8004b78 <_printf_common+0x58>
 8004be8:	2301      	movs	r3, #1
 8004bea:	4622      	mov	r2, r4
 8004bec:	4649      	mov	r1, r9
 8004bee:	4638      	mov	r0, r7
 8004bf0:	47c0      	blx	r8
 8004bf2:	3001      	adds	r0, #1
 8004bf4:	d0e6      	beq.n	8004bc4 <_printf_common+0xa4>
 8004bf6:	3601      	adds	r6, #1
 8004bf8:	e7d9      	b.n	8004bae <_printf_common+0x8e>
	...

08004bfc <_printf_i>:
 8004bfc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004c00:	7e0f      	ldrb	r7, [r1, #24]
 8004c02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004c04:	2f78      	cmp	r7, #120	; 0x78
 8004c06:	4691      	mov	r9, r2
 8004c08:	4680      	mov	r8, r0
 8004c0a:	460c      	mov	r4, r1
 8004c0c:	469a      	mov	sl, r3
 8004c0e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004c12:	d807      	bhi.n	8004c24 <_printf_i+0x28>
 8004c14:	2f62      	cmp	r7, #98	; 0x62
 8004c16:	d80a      	bhi.n	8004c2e <_printf_i+0x32>
 8004c18:	2f00      	cmp	r7, #0
 8004c1a:	f000 80d4 	beq.w	8004dc6 <_printf_i+0x1ca>
 8004c1e:	2f58      	cmp	r7, #88	; 0x58
 8004c20:	f000 80c0 	beq.w	8004da4 <_printf_i+0x1a8>
 8004c24:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c28:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004c2c:	e03a      	b.n	8004ca4 <_printf_i+0xa8>
 8004c2e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004c32:	2b15      	cmp	r3, #21
 8004c34:	d8f6      	bhi.n	8004c24 <_printf_i+0x28>
 8004c36:	a101      	add	r1, pc, #4	; (adr r1, 8004c3c <_printf_i+0x40>)
 8004c38:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004c3c:	08004c95 	.word	0x08004c95
 8004c40:	08004ca9 	.word	0x08004ca9
 8004c44:	08004c25 	.word	0x08004c25
 8004c48:	08004c25 	.word	0x08004c25
 8004c4c:	08004c25 	.word	0x08004c25
 8004c50:	08004c25 	.word	0x08004c25
 8004c54:	08004ca9 	.word	0x08004ca9
 8004c58:	08004c25 	.word	0x08004c25
 8004c5c:	08004c25 	.word	0x08004c25
 8004c60:	08004c25 	.word	0x08004c25
 8004c64:	08004c25 	.word	0x08004c25
 8004c68:	08004dad 	.word	0x08004dad
 8004c6c:	08004cd5 	.word	0x08004cd5
 8004c70:	08004d67 	.word	0x08004d67
 8004c74:	08004c25 	.word	0x08004c25
 8004c78:	08004c25 	.word	0x08004c25
 8004c7c:	08004dcf 	.word	0x08004dcf
 8004c80:	08004c25 	.word	0x08004c25
 8004c84:	08004cd5 	.word	0x08004cd5
 8004c88:	08004c25 	.word	0x08004c25
 8004c8c:	08004c25 	.word	0x08004c25
 8004c90:	08004d6f 	.word	0x08004d6f
 8004c94:	682b      	ldr	r3, [r5, #0]
 8004c96:	1d1a      	adds	r2, r3, #4
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	602a      	str	r2, [r5, #0]
 8004c9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004ca0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004ca4:	2301      	movs	r3, #1
 8004ca6:	e09f      	b.n	8004de8 <_printf_i+0x1ec>
 8004ca8:	6820      	ldr	r0, [r4, #0]
 8004caa:	682b      	ldr	r3, [r5, #0]
 8004cac:	0607      	lsls	r7, r0, #24
 8004cae:	f103 0104 	add.w	r1, r3, #4
 8004cb2:	6029      	str	r1, [r5, #0]
 8004cb4:	d501      	bpl.n	8004cba <_printf_i+0xbe>
 8004cb6:	681e      	ldr	r6, [r3, #0]
 8004cb8:	e003      	b.n	8004cc2 <_printf_i+0xc6>
 8004cba:	0646      	lsls	r6, r0, #25
 8004cbc:	d5fb      	bpl.n	8004cb6 <_printf_i+0xba>
 8004cbe:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004cc2:	2e00      	cmp	r6, #0
 8004cc4:	da03      	bge.n	8004cce <_printf_i+0xd2>
 8004cc6:	232d      	movs	r3, #45	; 0x2d
 8004cc8:	4276      	negs	r6, r6
 8004cca:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004cce:	485a      	ldr	r0, [pc, #360]	; (8004e38 <_printf_i+0x23c>)
 8004cd0:	230a      	movs	r3, #10
 8004cd2:	e012      	b.n	8004cfa <_printf_i+0xfe>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	6820      	ldr	r0, [r4, #0]
 8004cd8:	1d19      	adds	r1, r3, #4
 8004cda:	6029      	str	r1, [r5, #0]
 8004cdc:	0605      	lsls	r5, r0, #24
 8004cde:	d501      	bpl.n	8004ce4 <_printf_i+0xe8>
 8004ce0:	681e      	ldr	r6, [r3, #0]
 8004ce2:	e002      	b.n	8004cea <_printf_i+0xee>
 8004ce4:	0641      	lsls	r1, r0, #25
 8004ce6:	d5fb      	bpl.n	8004ce0 <_printf_i+0xe4>
 8004ce8:	881e      	ldrh	r6, [r3, #0]
 8004cea:	4853      	ldr	r0, [pc, #332]	; (8004e38 <_printf_i+0x23c>)
 8004cec:	2f6f      	cmp	r7, #111	; 0x6f
 8004cee:	bf0c      	ite	eq
 8004cf0:	2308      	moveq	r3, #8
 8004cf2:	230a      	movne	r3, #10
 8004cf4:	2100      	movs	r1, #0
 8004cf6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004cfa:	6865      	ldr	r5, [r4, #4]
 8004cfc:	60a5      	str	r5, [r4, #8]
 8004cfe:	2d00      	cmp	r5, #0
 8004d00:	bfa2      	ittt	ge
 8004d02:	6821      	ldrge	r1, [r4, #0]
 8004d04:	f021 0104 	bicge.w	r1, r1, #4
 8004d08:	6021      	strge	r1, [r4, #0]
 8004d0a:	b90e      	cbnz	r6, 8004d10 <_printf_i+0x114>
 8004d0c:	2d00      	cmp	r5, #0
 8004d0e:	d04b      	beq.n	8004da8 <_printf_i+0x1ac>
 8004d10:	4615      	mov	r5, r2
 8004d12:	fbb6 f1f3 	udiv	r1, r6, r3
 8004d16:	fb03 6711 	mls	r7, r3, r1, r6
 8004d1a:	5dc7      	ldrb	r7, [r0, r7]
 8004d1c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004d20:	4637      	mov	r7, r6
 8004d22:	42bb      	cmp	r3, r7
 8004d24:	460e      	mov	r6, r1
 8004d26:	d9f4      	bls.n	8004d12 <_printf_i+0x116>
 8004d28:	2b08      	cmp	r3, #8
 8004d2a:	d10b      	bne.n	8004d44 <_printf_i+0x148>
 8004d2c:	6823      	ldr	r3, [r4, #0]
 8004d2e:	07de      	lsls	r6, r3, #31
 8004d30:	d508      	bpl.n	8004d44 <_printf_i+0x148>
 8004d32:	6923      	ldr	r3, [r4, #16]
 8004d34:	6861      	ldr	r1, [r4, #4]
 8004d36:	4299      	cmp	r1, r3
 8004d38:	bfde      	ittt	le
 8004d3a:	2330      	movle	r3, #48	; 0x30
 8004d3c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004d40:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8004d44:	1b52      	subs	r2, r2, r5
 8004d46:	6122      	str	r2, [r4, #16]
 8004d48:	f8cd a000 	str.w	sl, [sp]
 8004d4c:	464b      	mov	r3, r9
 8004d4e:	aa03      	add	r2, sp, #12
 8004d50:	4621      	mov	r1, r4
 8004d52:	4640      	mov	r0, r8
 8004d54:	f7ff fee4 	bl	8004b20 <_printf_common>
 8004d58:	3001      	adds	r0, #1
 8004d5a:	d14a      	bne.n	8004df2 <_printf_i+0x1f6>
 8004d5c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8004d60:	b004      	add	sp, #16
 8004d62:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d66:	6823      	ldr	r3, [r4, #0]
 8004d68:	f043 0320 	orr.w	r3, r3, #32
 8004d6c:	6023      	str	r3, [r4, #0]
 8004d6e:	4833      	ldr	r0, [pc, #204]	; (8004e3c <_printf_i+0x240>)
 8004d70:	2778      	movs	r7, #120	; 0x78
 8004d72:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d76:	6823      	ldr	r3, [r4, #0]
 8004d78:	6829      	ldr	r1, [r5, #0]
 8004d7a:	061f      	lsls	r7, r3, #24
 8004d7c:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d80:	d402      	bmi.n	8004d88 <_printf_i+0x18c>
 8004d82:	065f      	lsls	r7, r3, #25
 8004d84:	bf48      	it	mi
 8004d86:	b2b6      	uxthmi	r6, r6
 8004d88:	07df      	lsls	r7, r3, #31
 8004d8a:	bf48      	it	mi
 8004d8c:	f043 0320 	orrmi.w	r3, r3, #32
 8004d90:	6029      	str	r1, [r5, #0]
 8004d92:	bf48      	it	mi
 8004d94:	6023      	strmi	r3, [r4, #0]
 8004d96:	b91e      	cbnz	r6, 8004da0 <_printf_i+0x1a4>
 8004d98:	6823      	ldr	r3, [r4, #0]
 8004d9a:	f023 0320 	bic.w	r3, r3, #32
 8004d9e:	6023      	str	r3, [r4, #0]
 8004da0:	2310      	movs	r3, #16
 8004da2:	e7a7      	b.n	8004cf4 <_printf_i+0xf8>
 8004da4:	4824      	ldr	r0, [pc, #144]	; (8004e38 <_printf_i+0x23c>)
 8004da6:	e7e4      	b.n	8004d72 <_printf_i+0x176>
 8004da8:	4615      	mov	r5, r2
 8004daa:	e7bd      	b.n	8004d28 <_printf_i+0x12c>
 8004dac:	682b      	ldr	r3, [r5, #0]
 8004dae:	6826      	ldr	r6, [r4, #0]
 8004db0:	6961      	ldr	r1, [r4, #20]
 8004db2:	1d18      	adds	r0, r3, #4
 8004db4:	6028      	str	r0, [r5, #0]
 8004db6:	0635      	lsls	r5, r6, #24
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	d501      	bpl.n	8004dc0 <_printf_i+0x1c4>
 8004dbc:	6019      	str	r1, [r3, #0]
 8004dbe:	e002      	b.n	8004dc6 <_printf_i+0x1ca>
 8004dc0:	0670      	lsls	r0, r6, #25
 8004dc2:	d5fb      	bpl.n	8004dbc <_printf_i+0x1c0>
 8004dc4:	8019      	strh	r1, [r3, #0]
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	6123      	str	r3, [r4, #16]
 8004dca:	4615      	mov	r5, r2
 8004dcc:	e7bc      	b.n	8004d48 <_printf_i+0x14c>
 8004dce:	682b      	ldr	r3, [r5, #0]
 8004dd0:	1d1a      	adds	r2, r3, #4
 8004dd2:	602a      	str	r2, [r5, #0]
 8004dd4:	681d      	ldr	r5, [r3, #0]
 8004dd6:	6862      	ldr	r2, [r4, #4]
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4628      	mov	r0, r5
 8004ddc:	f7fb fa08 	bl	80001f0 <memchr>
 8004de0:	b108      	cbz	r0, 8004de6 <_printf_i+0x1ea>
 8004de2:	1b40      	subs	r0, r0, r5
 8004de4:	6060      	str	r0, [r4, #4]
 8004de6:	6863      	ldr	r3, [r4, #4]
 8004de8:	6123      	str	r3, [r4, #16]
 8004dea:	2300      	movs	r3, #0
 8004dec:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004df0:	e7aa      	b.n	8004d48 <_printf_i+0x14c>
 8004df2:	6923      	ldr	r3, [r4, #16]
 8004df4:	462a      	mov	r2, r5
 8004df6:	4649      	mov	r1, r9
 8004df8:	4640      	mov	r0, r8
 8004dfa:	47d0      	blx	sl
 8004dfc:	3001      	adds	r0, #1
 8004dfe:	d0ad      	beq.n	8004d5c <_printf_i+0x160>
 8004e00:	6823      	ldr	r3, [r4, #0]
 8004e02:	079b      	lsls	r3, r3, #30
 8004e04:	d413      	bmi.n	8004e2e <_printf_i+0x232>
 8004e06:	68e0      	ldr	r0, [r4, #12]
 8004e08:	9b03      	ldr	r3, [sp, #12]
 8004e0a:	4298      	cmp	r0, r3
 8004e0c:	bfb8      	it	lt
 8004e0e:	4618      	movlt	r0, r3
 8004e10:	e7a6      	b.n	8004d60 <_printf_i+0x164>
 8004e12:	2301      	movs	r3, #1
 8004e14:	4632      	mov	r2, r6
 8004e16:	4649      	mov	r1, r9
 8004e18:	4640      	mov	r0, r8
 8004e1a:	47d0      	blx	sl
 8004e1c:	3001      	adds	r0, #1
 8004e1e:	d09d      	beq.n	8004d5c <_printf_i+0x160>
 8004e20:	3501      	adds	r5, #1
 8004e22:	68e3      	ldr	r3, [r4, #12]
 8004e24:	9903      	ldr	r1, [sp, #12]
 8004e26:	1a5b      	subs	r3, r3, r1
 8004e28:	42ab      	cmp	r3, r5
 8004e2a:	dcf2      	bgt.n	8004e12 <_printf_i+0x216>
 8004e2c:	e7eb      	b.n	8004e06 <_printf_i+0x20a>
 8004e2e:	2500      	movs	r5, #0
 8004e30:	f104 0619 	add.w	r6, r4, #25
 8004e34:	e7f5      	b.n	8004e22 <_printf_i+0x226>
 8004e36:	bf00      	nop
 8004e38:	08004f6d 	.word	0x08004f6d
 8004e3c:	08004f7e 	.word	0x08004f7e

08004e40 <memmove>:
 8004e40:	4288      	cmp	r0, r1
 8004e42:	b510      	push	{r4, lr}
 8004e44:	eb01 0402 	add.w	r4, r1, r2
 8004e48:	d902      	bls.n	8004e50 <memmove+0x10>
 8004e4a:	4284      	cmp	r4, r0
 8004e4c:	4623      	mov	r3, r4
 8004e4e:	d807      	bhi.n	8004e60 <memmove+0x20>
 8004e50:	1e43      	subs	r3, r0, #1
 8004e52:	42a1      	cmp	r1, r4
 8004e54:	d008      	beq.n	8004e68 <memmove+0x28>
 8004e56:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004e5a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004e5e:	e7f8      	b.n	8004e52 <memmove+0x12>
 8004e60:	4402      	add	r2, r0
 8004e62:	4601      	mov	r1, r0
 8004e64:	428a      	cmp	r2, r1
 8004e66:	d100      	bne.n	8004e6a <memmove+0x2a>
 8004e68:	bd10      	pop	{r4, pc}
 8004e6a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004e6e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004e72:	e7f7      	b.n	8004e64 <memmove+0x24>

08004e74 <_sbrk_r>:
 8004e74:	b538      	push	{r3, r4, r5, lr}
 8004e76:	4d06      	ldr	r5, [pc, #24]	; (8004e90 <_sbrk_r+0x1c>)
 8004e78:	2300      	movs	r3, #0
 8004e7a:	4604      	mov	r4, r0
 8004e7c:	4608      	mov	r0, r1
 8004e7e:	602b      	str	r3, [r5, #0]
 8004e80:	f7fc fb8c 	bl	800159c <_sbrk>
 8004e84:	1c43      	adds	r3, r0, #1
 8004e86:	d102      	bne.n	8004e8e <_sbrk_r+0x1a>
 8004e88:	682b      	ldr	r3, [r5, #0]
 8004e8a:	b103      	cbz	r3, 8004e8e <_sbrk_r+0x1a>
 8004e8c:	6023      	str	r3, [r4, #0]
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
 8004e90:	200003a0 	.word	0x200003a0

08004e94 <memcpy>:
 8004e94:	440a      	add	r2, r1
 8004e96:	4291      	cmp	r1, r2
 8004e98:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8004e9c:	d100      	bne.n	8004ea0 <memcpy+0xc>
 8004e9e:	4770      	bx	lr
 8004ea0:	b510      	push	{r4, lr}
 8004ea2:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004ea6:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004eaa:	4291      	cmp	r1, r2
 8004eac:	d1f9      	bne.n	8004ea2 <memcpy+0xe>
 8004eae:	bd10      	pop	{r4, pc}

08004eb0 <_realloc_r>:
 8004eb0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004eb4:	4680      	mov	r8, r0
 8004eb6:	4614      	mov	r4, r2
 8004eb8:	460e      	mov	r6, r1
 8004eba:	b921      	cbnz	r1, 8004ec6 <_realloc_r+0x16>
 8004ebc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004ec0:	4611      	mov	r1, r2
 8004ec2:	f7ff bc49 	b.w	8004758 <_malloc_r>
 8004ec6:	b92a      	cbnz	r2, 8004ed4 <_realloc_r+0x24>
 8004ec8:	f7ff fbda 	bl	8004680 <_free_r>
 8004ecc:	4625      	mov	r5, r4
 8004ece:	4628      	mov	r0, r5
 8004ed0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004ed4:	f000 f81b 	bl	8004f0e <_malloc_usable_size_r>
 8004ed8:	4284      	cmp	r4, r0
 8004eda:	4607      	mov	r7, r0
 8004edc:	d802      	bhi.n	8004ee4 <_realloc_r+0x34>
 8004ede:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8004ee2:	d812      	bhi.n	8004f0a <_realloc_r+0x5a>
 8004ee4:	4621      	mov	r1, r4
 8004ee6:	4640      	mov	r0, r8
 8004ee8:	f7ff fc36 	bl	8004758 <_malloc_r>
 8004eec:	4605      	mov	r5, r0
 8004eee:	2800      	cmp	r0, #0
 8004ef0:	d0ed      	beq.n	8004ece <_realloc_r+0x1e>
 8004ef2:	42bc      	cmp	r4, r7
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	4631      	mov	r1, r6
 8004ef8:	bf28      	it	cs
 8004efa:	463a      	movcs	r2, r7
 8004efc:	f7ff ffca 	bl	8004e94 <memcpy>
 8004f00:	4631      	mov	r1, r6
 8004f02:	4640      	mov	r0, r8
 8004f04:	f7ff fbbc 	bl	8004680 <_free_r>
 8004f08:	e7e1      	b.n	8004ece <_realloc_r+0x1e>
 8004f0a:	4635      	mov	r5, r6
 8004f0c:	e7df      	b.n	8004ece <_realloc_r+0x1e>

08004f0e <_malloc_usable_size_r>:
 8004f0e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004f12:	1f18      	subs	r0, r3, #4
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bfbc      	itt	lt
 8004f18:	580b      	ldrlt	r3, [r1, r0]
 8004f1a:	18c0      	addlt	r0, r0, r3
 8004f1c:	4770      	bx	lr
	...

08004f20 <_init>:
 8004f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f22:	bf00      	nop
 8004f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f26:	bc08      	pop	{r3}
 8004f28:	469e      	mov	lr, r3
 8004f2a:	4770      	bx	lr

08004f2c <_fini>:
 8004f2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004f2e:	bf00      	nop
 8004f30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004f32:	bc08      	pop	{r3}
 8004f34:	469e      	mov	lr, r3
 8004f36:	4770      	bx	lr
