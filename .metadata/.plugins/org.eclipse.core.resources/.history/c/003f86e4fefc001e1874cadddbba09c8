/*
 * API_adxl345_port.c
 *
 *  Created on: Apr 17, 2024
 *      Author: lpmeoli
 */

/* Includes ------------------------------------------------------------------*/
#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>
#include "stm32f4xx_hal.h"
#include "stm32f4xx_nucleo_144.h"

#include "API_adx_port.h"

/* Private typedef -----------------------------------------------------------*/
typedef enum {
	REG_DEVID			= 0x00,
	REG_THRESH_ACT		= 0x24,
	REG_ACT_INACT_CTL	= 0x27,
	REG_BW_RATE			= 0x2C,
	REG_POWER_CTL 		= 0x2D,
	REG_INT_SOURCE		= 0x30,
	REG_DATA_FORMAT 	= 0x31,
	REG_DATAX0 			= 0x32,
	REG_DATAX1 			= 0x33,
	REG_DATAY0 			= 0x34,
	REG_DATAY1 			= 0x35,
	REG_DATAZ0 			= 0x36,
	REG_DATAZ1 			= 0x37,
} adxl345_register_t;

/* Private define ------------------------------------------------------------*/
#define ADXL345_ADDRESS 	0x53
#define CLOCK_SPEED			100000	// This parameter must be set to a value lower than 400kHz
#define REGISTER_DEVID		0xE5
#define MASK_DATA_READY		0x80

#define I2C_TIMEOUT			1000

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
static I2C_HandleTypeDef hi2c1;

/* Private function prototypes -----------------------------------------------*/
static void write_register(uint8_t reg, uint8_t value);
static uint8_t read_register(uint8_t reg);


/* Public functions ---------------------------------------------------------*/


uint8_t read_register(uint8_t reg) {
	uint8_t value;

	HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, &reg, sizeof(reg), I2C_TIMEOUT);
	HAL_I2C_Master_Receive(&hi2c1, ADXL345_ADDRESS<<1, &value, sizeof(value), I2C_TIMEOUT);

	return value;
}


void write_register(uint8_t reg, uint8_t value) {
	 uint8_t buf[] = {reg, value};
	 uint16_t size = sizeof(buf) / sizeof(uint8_t);

	 HAL_I2C_Master_Transmit(&hi2c1, ADXL345_ADDRESS<<1, buf, size, I2C_TIMEOUT);
}
