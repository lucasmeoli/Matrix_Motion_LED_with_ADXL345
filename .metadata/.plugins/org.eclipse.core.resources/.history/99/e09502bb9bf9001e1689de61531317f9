/*
 * API_decode_coordinates.c
 *
 *  Created on: Apr 8, 2024
 *      Author: lpmeoli
 */


/* Includes ------------------------------------------------------------------*/


#include <stdio.h>
#include <stdint.h>
#include <stdbool.h>

#include "stm32f4xx_hal.h"  		/* <- HAL include */
#include "stm32f4xx_nucleo_144.h"

#include "API_uart.h"
#include "API_adxl345.h"
#include "API_max7219.h"

#include "API_decode_coordinates.h"

/* Private typedef -----------------------------------------------------------*/
typedef enum {
    CONFIGURE_MODULES,
    READ_COORDINATES,
    DECODE_COORDINATES,
    DISPLAY_COORDINATES,
} coordinatesState_t;

/* Private define ------------------------------------------------------------*/

/* Private macro -------------------------------------------------------------*/
/* Private variables ---------------------------------------------------------*/
static coordinatesState_t current_state;
static coordinates_t coordinates;
static int16_t display_limits[] = {-128, 0, 128, 256};
uint8_t coordenada_y;
uint8_t coordenada_x;
int indice;
uint8_t current_display;

/* Private function prototypes -----------------------------------------------*/
static void FSM_error_handler(void);


/* Public functions ---------------------------------------------------------*/
bool_t coordinates_FSM_init() {
	current_state = CONFIGURE_MODULES;
	HAL_I2C_StateTypeDef adxl345_i2c_state = adxl345_get_i2c_state;

	HAL_I2C_StateTypeDef adlx345_get_I2C_state()


	return true;
}

void coordinates_FSM_update() {
	switch (current_state) {
		case CONFIGURE_MODULES:

			// ADXL345 configuration

			//TODO Buscar alguna otra forma para hacer esto, que no sea aca, sino que esto lo configure el usuarios
			TEMP_write_register(REG_BW_RATE, 0x08);
			TEMP_write_register(REG_DATA_FORMAT, 0x08);
			TEMP_write_register(REG_POWER_CTL, 0x08);


			// max7219_configure_displays();
			for (int8_t display = 0; display < 4; display++) {
				max7219_send_data(REG_SHUTDOWN,		0x00, display);
				max7219_send_data(REG_DECODE_MODE,  0x00, display);
				max7219_send_data(REG_INTENSITY, 	0x03, display);
				max7219_send_data(REG_SCAN_LIMIT, 	0x07, display);
				max7219_send_data(REG_SHUTDOWN,		0x01, display);
			}
			current_state = READ_COORDINATES;
			break;

		case READ_COORDINATES:
			coordinates = adxl345_read_coordinates();
			if(coordinates.z_coord>0) {
				current_state = DECODE_COORDINATES;
			}

			break;

		case DECODE_COORDINATES:
			// Decode Y coordinate for matrix 8x32
		    if (coordinates.y_coord >= -256 && coordinates.y_coord <= 256) {

		    	for (int i = 0; i < 4; i++) {
		    	    if (coordinates.y_coord < display_limits[i]) {
		    	        current_display = 3 - i;
		    	        indice = (coordinates.y_coord + display_limits[3-i]) / 16;
		    	        break;
		    	    }
		    	}


		    	coordenada_y = 1 << (7 - indice);
		    }


		    // Decode X coordinate for 8x32 matrix
		    if (coordinates.x_coord  >= -255 && coordinates.x_coord <= 255) {
		        indice = (coordinates.x_coord  + 255) / 64;
		        coordenada_x = indice + 1;
		    }

			current_state = DISPLAY_COORDINATES;
			break;

		case DISPLAY_COORDINATES:
			max7219_clean_all_displays();

			max7219_send_data(coordenada_x, coordenada_y, current_display);

			current_state = READ_COORDINATES;
			break;

		default:
			FSM_error_handler();
			break;
	}
}









/**
 * @brief  This function is executed in case of error occurrence.
 *
 * @param  None
 * @retval None
 */
static void FSM_error_handler(void) {
	/* Turn LED2 on */
	BSP_LED_Init(LED2);
	BSP_LED_On(LED2);
	while (1)
	{
	}
}
